
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006e68  08006e68  00016e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007060  08007060  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007068  08007068  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  2000000c  0800707c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800707c  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a65  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000294f  00000000  00000000  00033aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  000376b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227ad  00000000  00000000  00038850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f417  00000000  00000000  0005affd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1829  00000000  00000000  0006a414  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bc3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005444  00000000  00000000  0013bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e4c 	.word	0x08006e4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006e4c 	.word	0x08006e4c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <process_init>:
/*
 * Executes once before entering program loop
 */

void process_init()
{
 8000e68:	b598      	push	{r3, r4, r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  //reset biquad history
  BPF_biquad.yn2 = 0;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <process_init+0x88>)
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  BPF_biquad.yn1 = 0;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <process_init+0x88>)
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  BPF_biquad.xn2 = 0;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <process_init+0x88>)
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  BPF_biquad.xn1 = 0;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <process_init+0x88>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]


  F0 = 1000; // start off at 1000 Hz center freq;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <process_init+0x8c>)
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <process_init+0x90>)
 8000e90:	601a      	str	r2, [r3, #0]
  w0 = 2*3.141592*(F0/SAMPLE_RATE_ACTUAL);
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <process_init+0x8c>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000efc <process_init+0x94>
 8000e9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ea0:	ee16 0a90 	vmov	r0, s13
 8000ea4:	f7ff faf4 	bl	8000490 <__aeabi_f2d>
 8000ea8:	a30f      	add	r3, pc, #60	; (adr r3, 8000ee8 <process_init+0x80>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff fb47 	bl	8000540 <__aeabi_dmul>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4621      	mov	r1, r4
 8000eba:	f7ff fe03 	bl	8000ac4 <__aeabi_d2f>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <process_init+0x98>)
 8000ec2:	601a      	str	r2, [r3, #0]
  Q = 6;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <process_init+0x9c>)
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <process_init+0xa0>)
 8000ec8:	601a      	str	r2, [r3, #0]

  //compute an initial set of coefficients to avoid Nan
  compute_BPF_coeff(&BPF_biquad, w0, Q);
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <process_init+0x98>)
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <process_init+0x9c>)
 8000ed2:	ed93 7a00 	vldr	s14, [r3]
 8000ed6:	eef0 0a47 	vmov.f32	s1, s14
 8000eda:	eeb0 0a67 	vmov.f32	s0, s15
 8000ede:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <process_init+0x88>)
 8000ee0:	f000 f842 	bl	8000f68 <compute_BPF_coeff>

}
 8000ee4:	bf00      	nop
 8000ee6:	bd98      	pop	{r3, r4, r7, pc}
 8000ee8:	fc8b007a 	.word	0xfc8b007a
 8000eec:	401921fa 	.word	0x401921fa
 8000ef0:	2000002c 	.word	0x2000002c
 8000ef4:	20000058 	.word	0x20000058
 8000ef8:	447a0000 	.word	0x447a0000
 8000efc:	47371b00 	.word	0x47371b00
 8000f00:	20000054 	.word	0x20000054
 8000f04:	20000028 	.word	0x20000028
 8000f08:	40c00000 	.word	0x40c00000

08000f0c <loop>:

void loop() {
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

   //handle LEDs and Pots on slower time scale
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <process>:

void process(int *in_sample, int *out_sample)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]

  float in = (float)*in_sample;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f32:	edc7 7a03 	vstr	s15, [r7, #12]
  float out = 0;
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]

  //produce filtered output sample
  compute_biquad(&BPF_biquad, &in, &out);
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <process+0x48>)
 8000f48:	f000 f875 	bl	8001036 <compute_biquad>

  //cast float to int
  *out_sample = (int)out;
 8000f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f54:	ee17 2a90 	vmov	r2, s15
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000002c 	.word	0x2000002c

08000f68 <compute_BPF_coeff>:

#include "biquads.h"
#include <math.h>
#include <stdint.h>

void compute_BPF_coeff(biquad_t *bq, float w0, float Q){
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f74:	edc7 0a01 	vstr	s1, [r7, #4]
  float sinw0_over2 = sin(w0)/2;
 8000f78:	68b8      	ldr	r0, [r7, #8]
 8000f7a:	f7ff fa89 	bl	8000490 <__aeabi_f2d>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460c      	mov	r4, r1
 8000f82:	ec44 3b10 	vmov	d0, r3, r4
 8000f86:	f004 ff4f 	bl	8005e28 <sin>
 8000f8a:	ec51 0b10 	vmov	r0, r1, d0
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f96:	f7ff fbfd 	bl	8000794 <__aeabi_ddiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff fd8f 	bl	8000ac4 <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	617b      	str	r3, [r7, #20]
  float alpha = sinw0_over2/Q;;
 8000faa:	edd7 6a05 	vldr	s13, [r7, #20]
 8000fae:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb6:	edc7 7a04 	vstr	s15, [r7, #16]

  bq->b0 = sinw0_over2;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	611a      	str	r2, [r3, #16]
  bq->b1 = 0;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  bq->b2 = -sinw0_over2;
 8000fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fcc:	eef1 7a67 	vneg.f32	s15, s15
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	edc3 7a06 	vstr	s15, [r3, #24]

  bq->a0 = 1+alpha;
 8000fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	edc3 7a07 	vstr	s15, [r3, #28]
  bq->a1 = -2*cos(w0);
 8000fe8:	68b8      	ldr	r0, [r7, #8]
 8000fea:	f7ff fa51 	bl	8000490 <__aeabi_f2d>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	ec44 3b10 	vmov	d0, r3, r4
 8000ff6:	f004 fed3 	bl	8005da0 <cos>
 8000ffa:	ec51 0b10 	vmov	r0, r1, d0
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001006:	f7ff fa9b 	bl	8000540 <__aeabi_dmul>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	4618      	mov	r0, r3
 8001010:	4621      	mov	r1, r4
 8001012:	f7ff fd57 	bl	8000ac4 <__aeabi_d2f>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	621a      	str	r2, [r3, #32]
  bq->a2 = 1-alpha;
 800101c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001020:	edd7 7a04 	vldr	s15, [r7, #16]
 8001024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <compute_biquad>:


void compute_biquad(biquad_t *bq, float *in, float *out){
 8001036:	b480      	push	{r7}
 8001038:	b08b      	sub	sp, #44	; 0x2c
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]


  float b0 = bq->b0;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  float b1 = bq->b1;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	623b      	str	r3, [r7, #32]
  float b2 = bq->b2;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	61fb      	str	r3, [r7, #28]

  float a0 = bq->a0;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	61bb      	str	r3, [r7, #24]
  float a1 = bq->a1;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	617b      	str	r3, [r7, #20]
  float a2 = bq->a2;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	613b      	str	r3, [r7, #16]

  // Direct Form 1 Biquad Implementation
  *out = (*in)*(b0/a0);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001070:	edd7 6a06 	vldr	s13, [r7, #24]
 8001074:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	edc3 7a00 	vstr	s15, [r3]
  *out += bq->xn1*(b1/a0);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	edd3 6a00 	vldr	s13, [r3]
 800108e:	edd7 5a08 	vldr	s11, [r7, #32]
 8001092:	ed97 6a06 	vldr	s12, [r7, #24]
 8001096:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	edc3 7a00 	vstr	s15, [r3]
  *out += bq->xn2*(b2/a0);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80010b4:	edd7 5a07 	vldr	s11, [r7, #28]
 80010b8:	ed97 6a06 	vldr	s12, [r7, #24]
 80010bc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edc3 7a00 	vstr	s15, [r3]
  *out -= bq->yn1*(a1/a0);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80010da:	edd7 5a05 	vldr	s11, [r7, #20]
 80010de:	ed97 6a06 	vldr	s12, [r7, #24]
 80010e2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edc3 7a00 	vstr	s15, [r3]
  *out -= bq->yn2*(a2/a0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001100:	edd7 5a04 	vldr	s11, [r7, #16]
 8001104:	ed97 6a06 	vldr	s12, [r7, #24]
 8001108:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800110c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	edc3 7a00 	vstr	s15, [r3]

  //update biquad history
  bq->yn2 = bq->yn1;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	60da      	str	r2, [r3, #12]
  bq->yn1 = *out;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	609a      	str	r2, [r3, #8]
  bq->xn2 = bq->xn1;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	605a      	str	r2, [r3, #4]
  bq->xn1 = *in;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	372c      	adds	r7, #44	; 0x2c
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 ff68 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f824 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 fae6 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 8001158:	f000 fac4 	bl	80016e4 <MX_DMA_Init>
  MX_ADC1_Init();
 800115c:	f000 f89c 	bl	8001298 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001160:	f000 f8ec 	bl	800133c <MX_I2C1_Init>
  MX_I2S2_Init();
 8001164:	f000 f918 	bl	8001398 <MX_I2S2_Init>
  MX_TIM2_Init();
 8001168:	f000 f944 	bl	80013f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800116c:	f000 f9a4 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001170:	f000 fa1c 	bl	80015ac <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001174:	f000 fa88 	bl	8001688 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  process_init();
 8001178:	f7ff fe76 	bl	8000e68 <process_init>

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 2);
 800117c:	2302      	movs	r3, #2
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <main+0x48>)
 8001180:	4904      	ldr	r1, [pc, #16]	; (8001194 <main+0x4c>)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <main+0x50>)
 8001184:	f002 fc00 	bl	8003988 <HAL_I2SEx_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

      loop();
 8001188:	f7ff fec0 	bl	8000f0c <loop>
 800118c:	e7fc      	b.n	8001188 <main+0x40>
 800118e:	bf00      	nop
 8001190:	20000584 	.word	0x20000584
 8001194:	2000058c 	.word	0x2000058c
 8001198:	20000698 	.word	0x20000698

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b098      	sub	sp, #96	; 0x60
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a6:	2230      	movs	r2, #48	; 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fdee 	bl	8005d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <SystemClock_Config+0xf4>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <SystemClock_Config+0xf4>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <SystemClock_Config+0xf4>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b29      	ldr	r3, [pc, #164]	; (8001294 <SystemClock_Config+0xf8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <SystemClock_Config+0xf8>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <SystemClock_Config+0xf8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001206:	2301      	movs	r3, #1
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800120a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001218:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800121a:	2308      	movs	r3, #8
 800121c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800121e:	23a8      	movs	r3, #168	; 0xa8
 8001220:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001222:	2302      	movs	r3, #2
 8001224:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001226:	2307      	movs	r3, #7
 8001228:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f98c 	bl	800454c <HAL_RCC_OscConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800123a:	f000 fb61 	bl	8001900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123e:	230f      	movs	r3, #15
 8001240:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2302      	movs	r3, #2
 8001244:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001246:	2390      	movs	r3, #144	; 0x90
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fbe7 	bl	8004a2c <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001264:	f000 fb4c 	bl	8001900 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001268:	2301      	movs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800126c:	23c0      	movs	r3, #192	; 0xc0
 800126e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fdb3 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001284:	f000 fb3c 	bl	8001900 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3760      	adds	r7, #96	; 0x60
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <MX_ADC1_Init+0x9c>)
 80012ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_ADC1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_ADC1_Init+0x98>)
 80012b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_ADC1_Init+0x98>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_ADC1_Init+0x98>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_ADC1_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_ADC1_Init+0x98>)
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <MX_ADC1_Init+0xa0>)
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_ADC1_Init+0x98>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_ADC1_Init+0x98>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_ADC1_Init+0x98>)
 80012fa:	f000 ff25 	bl	8002148 <HAL_ADC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001304:	f000 fafc 	bl	8001900 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001308:	2301      	movs	r3, #1
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_ADC1_Init+0x98>)
 800131a:	f000 ff59 	bl	80021d0 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001324:	f000 faec 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000053c 	.word	0x2000053c
 8001334:	40012000 	.word	0x40012000
 8001338:	0f000001 	.word	0x0f000001

0800133c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C1_Init+0x50>)
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <MX_I2C1_Init+0x54>)
 8001344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_I2C1_Init+0x50>)
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_I2C1_Init+0x58>)
 800134a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_I2C1_Init+0x50>)
 800135a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_I2C1_Init+0x50>)
 800137a:	f001 ff7b 	bl	8003274 <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001384:	f000 fabc 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000a0 	.word	0x200000a0
 8001390:	40005400 	.word	0x40005400
 8001394:	000186a0 	.word	0x000186a0

08001398 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_I2S2_Init+0x54>)
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <MX_I2S2_Init+0x58>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_I2S2_Init+0x54>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_I2S2_Init+0x54>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_I2S2_Init+0x54>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_I2S2_Init+0x54>)
 80013b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013bc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_I2S2_Init+0x54>)
 80013c0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80013c4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_I2S2_Init+0x54>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_I2S2_Init+0x54>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_I2S2_Init+0x54>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_I2S2_Init+0x54>)
 80013da:	f002 f883 	bl	80034e4 <HAL_I2S_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80013e4:	f000 fa8c 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000698 	.word	0x20000698
 80013f0:	40003800 	.word	0x40003800

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_TIM2_Init+0xc0>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800143c:	481d      	ldr	r0, [pc, #116]	; (80014b4 <MX_TIM2_Init+0xc0>)
 800143e:	f003 fe0d 	bl	800505c <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001448:	f000 fa5a 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4619      	mov	r1, r3
 800145a:	4816      	ldr	r0, [pc, #88]	; (80014b4 <MX_TIM2_Init+0xc0>)
 800145c:	f004 f940 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001466:	f000 fa4b 	bl	8001900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	; 0x60
 800146c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001482:	f003 fe17 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800148c:	f000 fa38 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	220c      	movs	r2, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM2_Init+0xc0>)
 8001498:	f003 fe0c 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014a2:	f000 fa2d 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM2_Init+0xc0>)
 80014a8:	f000 fc1c 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000594 	.word	0x20000594

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014dc:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <MX_TIM3_Init+0xf0>)
 80014de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014fe:	4829      	ldr	r0, [pc, #164]	; (80015a4 <MX_TIM3_Init+0xec>)
 8001500:	f003 fdac 	bl	800505c <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800150a:	f000 f9f9 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	4619      	mov	r1, r3
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <MX_TIM3_Init+0xec>)
 800151e:	f004 f8df 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001528:	f000 f9ea 	bl	8001900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_TIM3_Init+0xec>)
 8001544:	f003 fdb6 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800154e:	f000 f9d7 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2204      	movs	r2, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <MX_TIM3_Init+0xec>)
 800155a:	f003 fdab 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001564:	f000 f9cc 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2208      	movs	r2, #8
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_TIM3_Init+0xec>)
 8001570:	f003 fda0 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800157a:	f000 f9c1 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	220c      	movs	r2, #12
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM3_Init+0xec>)
 8001586:	f003 fd95 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001590:	f000 f9b6 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM3_Init+0xec>)
 8001596:	f000 fba5 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200004fc 	.word	0x200004fc
 80015a8:	40000400 	.word	0x40000400

080015ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015d0:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <MX_TIM4_Init+0xd8>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015d4:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015f2:	4823      	ldr	r0, [pc, #140]	; (8001680 <MX_TIM4_Init+0xd4>)
 80015f4:	f003 fd32 	bl	800505c <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80015fe:	f000 f97f 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4619      	mov	r1, r3
 8001610:	481b      	ldr	r0, [pc, #108]	; (8001680 <MX_TIM4_Init+0xd4>)
 8001612:	f004 f865 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800161c:	f000 f970 	bl	8001900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	4812      	ldr	r0, [pc, #72]	; (8001680 <MX_TIM4_Init+0xd4>)
 8001638:	f003 fd3c 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001642:	f000 f95d 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2204      	movs	r2, #4
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM4_Init+0xd4>)
 800164e:	f003 fd31 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001658:	f000 f952 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2208      	movs	r2, #8
 8001660:	4619      	mov	r1, r3
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <MX_TIM4_Init+0xd4>)
 8001664:	f003 fd26 	bl	80050b4 <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800166e:	f000 f947 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <MX_TIM4_Init+0xd4>)
 8001674:	f000 fb36 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000060 	.word	0x20000060
 8001684:	40000800 	.word	0x40000800

08001688 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001692:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001696:	2204      	movs	r2, #4
 8001698:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169c:	2202      	movs	r2, #2
 800169e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016cc:	f002 fe20 	bl	8004310 <HAL_PCD_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 f913 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000f4 	.word	0x200000f4

080016e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_DMA_Init+0x3c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <MX_DMA_Init+0x3c>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_DMA_Init+0x3c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200e      	movs	r0, #14
 800170c:	f001 f859 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001710:	200e      	movs	r0, #14
 8001712:	f001 f872 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <MX_GPIO_Init+0x130>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <MX_GPIO_Init+0x130>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b42      	ldr	r3, [pc, #264]	; (8001854 <MX_GPIO_Init+0x130>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <MX_GPIO_Init+0x130>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <MX_GPIO_Init+0x130>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <MX_GPIO_Init+0x130>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <MX_GPIO_Init+0x130>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a36      	ldr	r2, [pc, #216]	; (8001854 <MX_GPIO_Init+0x130>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <MX_GPIO_Init+0x130>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_GPIO_Init+0x130>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a2f      	ldr	r2, [pc, #188]	; (8001854 <MX_GPIO_Init+0x130>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <MX_GPIO_Init+0x130>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_GPIO_Init+0x130>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <MX_GPIO_Init+0x130>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_GPIO_Init+0x130>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_GPIO_Init+0x130>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_GPIO_Init+0x130>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_GPIO_Init+0x130>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017e8:	481b      	ldr	r0, [pc, #108]	; (8001858 <MX_GPIO_Init+0x134>)
 80017ea:	f001 fd29 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2107      	movs	r1, #7
 80017f2:	481a      	ldr	r0, [pc, #104]	; (800185c <MX_GPIO_Init+0x138>)
 80017f4:	f001 fd24 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <MX_GPIO_Init+0x134>)
 800180e:	f001 fb7d 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <MX_GPIO_Init+0x134>)
 800182c:	f001 fb6e 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001830:	2307      	movs	r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_GPIO_Init+0x138>)
 8001848:	f001 fb60 	bl	8002f0c <HAL_GPIO_Init>

}
 800184c:	bf00      	nop
 800184e:	3730      	adds	r7, #48	; 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40021000 	.word	0x40021000
 800185c:	40020c00 	.word	0x40020c00

08001860 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8001870:	8852      	ldrh	r2, [r2, #2]
 8001872:	4313      	orrs	r3, r2
 8001874:	121b      	asrs	r3, r3, #8
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8001878:	6013      	str	r3, [r2, #0]

  // do audio processing
  process(&in_sample, &out_sample);
 800187a:	490b      	ldr	r1, [pc, #44]	; (80018a8 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 800187e:	f7ff fb4d 	bl	8000f1c <process>

  //place processed sample into tx_buf
  tx_buf[0] = (out_sample>>8) & 0xFFFF;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	121b      	asrs	r3, r3, #8
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 800188c:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = out_sample & 0xFFFF;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8001896:	805a      	strh	r2, [r3, #2]


}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000584 	.word	0x20000584
 80018a4:	200005d4 	.word	0x200005d4
 80018a8:	2000005c 	.word	0x2000005c
 80018ac:	2000058c 	.word	0x2000058c

080018b0 <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80018c0:	88d2      	ldrh	r2, [r2, #6]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	121b      	asrs	r3, r3, #8
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 80018c8:	6013      	str	r3, [r2, #0]

  // does audio processing
  process(&in_sample, &out_sample);
 80018ca:	490b      	ldr	r1, [pc, #44]	; (80018f8 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 80018ce:	f7ff fb25 	bl	8000f1c <process>

  //place processed sample into tx_buf
  tx_buf[2] = (out_sample>>8) & 0xFFFF;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	121b      	asrs	r3, r3, #8
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 80018dc:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = out_sample & 0xFFFF;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 80018e6:	80da      	strh	r2, [r3, #6]

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000584 	.word	0x20000584
 80018f4:	200005d4 	.word	0x200005d4
 80018f8:	2000005c 	.word	0x2000005c
 80018fc:	2000058c 	.word	0x2000058c

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_MspInit+0x4c>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_MspInit+0x4c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_ADC_MspInit+0x7c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d127      	bne.n	80019d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019ba:	230e      	movs	r3, #14
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_ADC_MspInit+0x84>)
 80019ce:	f001 fa9d 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_I2C_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12b      	bne.n	8001a62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a26:	23c0      	movs	r3, #192	; 0xc0
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2a:	2312      	movs	r3, #18
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a36:	2304      	movs	r3, #4
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a42:	f001 fa63 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020400 	.word	0x40020400

08001a78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_I2S_MspInit+0x1b4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	f040 80c4 	bne.w	8001c24 <HAL_I2S_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a62      	ldr	r2, [pc, #392]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a5b      	ldr	r2, [pc, #364]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4a54      	ldr	r2, [pc, #336]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae4:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <HAL_I2S_MspInit+0x1b8>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af0:	2304      	movs	r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001b00:	2306      	movs	r3, #6
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	484a      	ldr	r0, [pc, #296]	; (8001c34 <HAL_I2S_MspInit+0x1bc>)
 8001b0c:	f001 f9fe 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001b10:	2348      	movs	r3, #72	; 0x48
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b20:	2305      	movs	r3, #5
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4842      	ldr	r0, [pc, #264]	; (8001c34 <HAL_I2S_MspInit+0x1bc>)
 8001b2c:	f001 f9ee 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001b30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b42:	2305      	movs	r3, #5
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	483a      	ldr	r0, [pc, #232]	; (8001c38 <HAL_I2S_MspInit+0x1c0>)
 8001b4e:	f001 f9dd 	bl	8002f0c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b54:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_I2S_MspInit+0x1c8>)
 8001b56:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b5e:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7a:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b82:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8a:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001b98:	4828      	ldr	r0, [pc, #160]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001b9a:	f000 fe49 	bl	8002830 <HAL_DMA_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8001ba4:	f7ff feac 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_I2S_MspInit+0x1c4>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bb6:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <HAL_I2S_MspInit+0x1d0>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bc2:	2240      	movs	r2, #64	; 0x40
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bda:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001bfa:	f000 fe19 	bl	8002830 <HAL_DMA_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 8001c04:	f7ff fe7c 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_I2S_MspInit+0x1cc>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2024      	movs	r0, #36	; 0x24
 8001c1a:	f000 fdd2 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001c1e:	2024      	movs	r0, #36	; 0x24
 8001c20:	f000 fdeb 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40003800 	.word	0x40003800
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	200005d8 	.word	0x200005d8
 8001c40:	40026058 	.word	0x40026058
 8001c44:	20000638 	.word	0x20000638
 8001c48:	40026070 	.word	0x40026070

08001c4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d10e      	bne.n	8001c7c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c7a:	e026      	b.n	8001cca <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <HAL_TIM_PWM_MspInit+0x90>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	e012      	b.n	8001cca <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x94>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10d      	bne.n	8001cca <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40000800 	.word	0x40000800

08001ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d04:	d13d      	bne.n	8001d82 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4840      	ldr	r0, [pc, #256]	; (8001e5c <HAL_TIM_MspPostInit+0x178>)
 8001d5a:	f001 f8d7 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d70:	2301      	movs	r3, #1
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4839      	ldr	r0, [pc, #228]	; (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d7c:	f001 f8c6 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d80:	e065      	b.n	8001e4e <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a37      	ldr	r2, [pc, #220]	; (8001e64 <HAL_TIM_MspPostInit+0x180>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d13c      	bne.n	8001e06 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	481f      	ldr	r0, [pc, #124]	; (8001e5c <HAL_TIM_MspPostInit+0x178>)
 8001de0:	f001 f894 	bl	8002f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001de4:	2303      	movs	r3, #3
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001e00:	f001 f884 	bl	8002f0c <HAL_GPIO_Init>
}
 8001e04:	e023      	b.n	8001e4e <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_TIM_MspPostInit+0x184>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d11e      	bne.n	8001e4e <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_TIM_MspPostInit+0x174>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001e2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <HAL_TIM_MspPostInit+0x188>)
 8001e4a:	f001 f85f 	bl	8002f0c <HAL_GPIO_Init>
}
 8001e4e:	bf00      	nop
 8001e50:	3730      	adds	r7, #48	; 0x30
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40020c00 	.word	0x40020c00

08001e70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e90:	d132      	bne.n	8001ef8 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480e      	ldr	r0, [pc, #56]	; (8001f04 <HAL_PCD_MspInit+0x94>)
 8001ecc:	f001 f81e 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eda:	6353      	str	r3, [r2, #52]	; 0x34
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eea:	6453      	str	r3, [r2, #68]	; 0x44
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_PCD_MspInit+0x90>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5c:	f000 f8b2 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Stream3_IRQHandler+0x10>)
 8001f6a:	f000 fd67 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200005d8 	.word	0x200005d8

08001f78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Stream4_IRQHandler+0x10>)
 8001f7e:	f000 fd5d 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000638 	.word	0x20000638

08001f8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <SPI2_IRQHandler+0x10>)
 8001f92:	f001 fbe7 	bl	8003764 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000698 	.word	0x20000698

08001fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <SystemInit+0x28>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <SystemInit+0x28>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SystemInit+0x28>)
 8001fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fba:	609a      	str	r2, [r3, #8]
#endif
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fd2:	e003      	b.n	8001fdc <LoopCopyDataInit>

08001fd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fda:	3104      	adds	r1, #4

08001fdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fe0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fe2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fe4:	d3f6      	bcc.n	8001fd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fe8:	e002      	b.n	8001ff0 <LoopFillZerobss>

08001fea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fec:	f842 3b04 	str.w	r3, [r2], #4

08001ff0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ff2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ff4:	d3f9      	bcc.n	8001fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff ffd3 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f003 fea3 	bl	8005d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff f8a3 	bl	8001148 <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002004:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002008:	08007070 	.word	0x08007070
  ldr  r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002010:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002014:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002018:	200006e4 	.word	0x200006e4

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 fbaf 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fc5c 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fbc7 	bl	8002816 <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	f000 fb8f 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008
 80020e8:	200006e0 	.word	0x200006e0

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200006e0 	.word	0x200006e0

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_Delay+0x40>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000008 	.word	0x20000008

08002148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e033      	b.n	80021c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fbfa 	bl	8001960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800218e:	f023 0302 	bic.w	r3, r3, #2
 8002192:	f043 0202 	orr.w	r2, r3, #2
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f93a 	bl	8002414 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
 80021b6:	e001      	b.n	80021bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e105      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x228>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d925      	bls.n	8002248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	4603      	mov	r3, r0
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4403      	add	r3, r0
 800223a:	3b1e      	subs	r3, #30
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e022      	b.n	800228e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	2207      	movs	r2, #7
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	4603      	mov	r3, r0
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4403      	add	r3, r0
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d824      	bhi.n	80022e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b05      	subs	r3, #5
 80022a8:	221f      	movs	r2, #31
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	400a      	ands	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b05      	subs	r3, #5
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
 80022de:	e04c      	b.n	800237a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d824      	bhi.n	8002332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b23      	subs	r3, #35	; 0x23
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43da      	mvns	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	400a      	ands	r2, r1
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b23      	subs	r3, #35	; 0x23
 8002324:	fa00 f203 	lsl.w	r2, r0, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
 8002330:	e023      	b.n	800237a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	; 0x41
 8002344:	221f      	movs	r2, #31
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b41      	subs	r3, #65	; 0x41
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_ADC_ConfigChannel+0x234>)
 800237c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a21      	ldr	r2, [pc, #132]	; (8002408 <HAL_ADC_ConfigChannel+0x238>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d109      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1cc>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d105      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_ADC_ConfigChannel+0x238>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d123      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x21e>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d003      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x1e6>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b11      	cmp	r3, #17
 80023b4:	d11b      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d111      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_ADC_ConfigChannel+0x23c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_ADC_ConfigChannel+0x240>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	0c9a      	lsrs	r2, r3, #18
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40012300 	.word	0x40012300
 8002408:	40012000 	.word	0x40012000
 800240c:	20000000 	.word	0x20000000
 8002410:	431bde83 	.word	0x431bde83

08002414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800241c:	4b79      	ldr	r3, [pc, #484]	; (8002604 <ADC_Init+0x1f0>)
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	021a      	lsls	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800246c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <ADC_Init+0x1f4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e00f      	b.n	8002512 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0202 	bic.w	r2, r2, #2
 8002520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e1b      	ldrb	r3, [r3, #24]
 800252c:	005a      	lsls	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800255e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	3b01      	subs	r3, #1
 800256c:	035a      	lsls	r2, r3, #13
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	e007      	b.n	8002588 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	051a      	lsls	r2, r3, #20
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ca:	025a      	lsls	r2, r3, #9
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	029a      	lsls	r2, r3, #10
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40012300 	.word	0x40012300
 8002608:	0f000001 	.word	0x0f000001

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4907      	ldr	r1, [pc, #28]	; (80026a8 <__NVIC_EnableIRQ+0x38>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff29 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff3e 	bl	8002654 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff8e 	bl	8002700 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5d 	bl	80026ac <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff31 	bl	8002670 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa2 	bl	8002768 <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff fc56 	bl	80020ec <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e099      	b.n	8002980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286c:	e00f      	b.n	800288e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286e:	f7ff fc3d 	bl	80020ec <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b05      	cmp	r3, #5
 800287a:	d908      	bls.n	800288e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e078      	b.n	8002980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e8      	bne.n	800286e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_DMA_Init+0x158>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b04      	cmp	r3, #4
 8002920:	d117      	bne.n	8002952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa6f 	bl	8002e18 <DMA_CheckFifoParam>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800294e:	2301      	movs	r3, #1
 8002950:	e016      	b.n	8002980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa26 	bl	8002dac <DMA_CalcBaseAndBitshift>
 8002960:	4603      	mov	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	223f      	movs	r2, #63	; 0x3f
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	f010803f 	.word	0xf010803f

0800298c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_DMA_Start_IT+0x26>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e040      	b.n	8002a34 <HAL_DMA_Start_IT+0xa8>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d12f      	bne.n	8002a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9b8 	bl	8002d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	223f      	movs	r2, #63	; 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0216 	orr.w	r2, r2, #22
 80029fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a48:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <HAL_DMA_IRQHandler+0x258>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a92      	ldr	r2, [pc, #584]	; (8002c98 <HAL_DMA_IRQHandler+0x25c>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	2208      	movs	r2, #8
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2208      	movs	r2, #8
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2201      	movs	r2, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2201      	movs	r2, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	2204      	movs	r2, #4
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2210      	movs	r2, #16
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d043      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03c      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2210      	movs	r2, #16
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d024      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	e01f      	b.n	8002bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01b      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
 8002b7c:	e016      	b.n	8002bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0208 	bic.w	r2, r2, #8
 8002b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 808e 	beq.w	8002cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8086 	beq.w	8002cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d136      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0216 	bic.w	r2, r2, #22
 8002bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <HAL_DMA_IRQHandler+0x1da>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0208 	bic.w	r2, r2, #8
 8002c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	223f      	movs	r2, #63	; 0x3f
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d07d      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
        }
        return;
 8002c52:	e078      	b.n	8002d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01c      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d030      	beq.n	8002cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e02b      	b.n	8002cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
 8002c92:	e022      	b.n	8002cda <HAL_DMA_IRQHandler+0x29e>
 8002c94:	20000000 	.word	0x20000000
 8002c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0210 	bic.w	r2, r2, #16
 8002cb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d032      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d022      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2205      	movs	r2, #5
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d307      	bcc.n	8002d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f2      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x2ca>
 8002d20:	e000      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
 8002d44:	e000      	b.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d46:	bf00      	nop
    }
  }
}
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop

08002d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d108      	bne.n	8002d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d8e:	e007      	b.n	8002da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	60da      	str	r2, [r3, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b10      	subs	r3, #16
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <DMA_CalcBaseAndBitshift+0x64>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <DMA_CalcBaseAndBitshift+0x68>)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d909      	bls.n	8002dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	1d1a      	adds	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58
 8002dec:	e007      	b.n	8002dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	aaaaaaab 	.word	0xaaaaaaab
 8002e14:	08006e80 	.word	0x08006e80

08002e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11f      	bne.n	8002e72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d855      	bhi.n	8002ee4 <DMA_CheckFifoParam+0xcc>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <DMA_CheckFifoParam+0x28>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e63 	.word	0x08002e63
 8002e48:	08002e51 	.word	0x08002e51
 8002e4c:	08002ee5 	.word	0x08002ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d045      	beq.n	8002ee8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e60:	e042      	b.n	8002ee8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e6a:	d13f      	bne.n	8002eec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e70:	e03c      	b.n	8002eec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d121      	bne.n	8002ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d836      	bhi.n	8002ef0 <DMA_CheckFifoParam+0xd8>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <DMA_CheckFifoParam+0x70>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002e9f 	.word	0x08002e9f
 8002e90:	08002e99 	.word	0x08002e99
 8002e94:	08002eb1 	.word	0x08002eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e02f      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d024      	beq.n	8002ef4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eae:	e021      	b.n	8002ef4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eb8:	d11e      	bne.n	8002ef8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ebe:	e01b      	b.n	8002ef8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d902      	bls.n	8002ecc <DMA_CheckFifoParam+0xb4>
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d003      	beq.n	8002ed2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eca:	e018      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e015      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00e      	beq.n	8002efc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee2:	e00b      	b.n	8002efc <DMA_CheckFifoParam+0xe4>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e00a      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;
 8002ee8:	bf00      	nop
 8002eea:	e008      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;
 8002eec:	bf00      	nop
 8002eee:	e006      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;
 8002ef0:	bf00      	nop
 8002ef2:	e004      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e002      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;   
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;
 8002efc:	bf00      	nop
    }
  } 
  
  return status; 
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	e16b      	b.n	8003200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 815a 	bne.w	80031fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d00b      	beq.n	8002f66 <HAL_GPIO_Init+0x5a>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f5a:	2b11      	cmp	r3, #17
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0xfc>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b12      	cmp	r3, #18
 8003006:	d123      	bne.n	8003050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80b4 	beq.w	80031fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HAL_GPIO_Init+0x308>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <HAL_GPIO_Init+0x308>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_GPIO_Init+0x308>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ae:	4a5a      	ldr	r2, [pc, #360]	; (8003218 <HAL_GPIO_Init+0x30c>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a51      	ldr	r2, [pc, #324]	; (800321c <HAL_GPIO_Init+0x310>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x226>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a50      	ldr	r2, [pc, #320]	; (8003220 <HAL_GPIO_Init+0x314>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x222>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_GPIO_Init+0x318>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x21e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_GPIO_Init+0x31c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x21a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_GPIO_Init+0x320>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x216>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_GPIO_Init+0x324>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x212>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4b      	ldr	r2, [pc, #300]	; (8003234 <HAL_GPIO_Init+0x328>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_GPIO_Init+0x32c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x20a>
 8003112:	2307      	movs	r3, #7
 8003114:	e00e      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003116:	2308      	movs	r3, #8
 8003118:	e00c      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800311a:	2306      	movs	r3, #6
 800311c:	e00a      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800311e:	2305      	movs	r3, #5
 8003120:	e008      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003122:	2304      	movs	r3, #4
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003126:	2303      	movs	r3, #3
 8003128:	e004      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800312a:	2302      	movs	r3, #2
 800312c:	e002      	b.n	8003134 <HAL_GPIO_Init+0x228>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_GPIO_Init+0x228>
 8003132:	2300      	movs	r3, #0
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f002 0203 	and.w	r2, r2, #3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4093      	lsls	r3, r2
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003144:	4934      	ldr	r1, [pc, #208]	; (8003218 <HAL_GPIO_Init+0x30c>)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003152:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_GPIO_Init+0x330>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003176:	4a31      	ldr	r2, [pc, #196]	; (800323c <HAL_GPIO_Init+0x330>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800317c:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_GPIO_Init+0x330>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a0:	4a26      	ldr	r2, [pc, #152]	; (800323c <HAL_GPIO_Init+0x330>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_GPIO_Init+0x330>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_GPIO_Init+0x330>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_GPIO_Init+0x330>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f4:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_GPIO_Init+0x330>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3301      	adds	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	f67f ae90 	bls.w	8002f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003208:	bf00      	nop
 800320a:	3724      	adds	r7, #36	; 0x24
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40023800 	.word	0x40023800
 8003218:	40013800 	.word	0x40013800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40021400 	.word	0x40021400
 8003234:	40021800 	.word	0x40021800
 8003238:	40021c00 	.word	0x40021c00
 800323c:	40013c00 	.word	0x40013c00

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
 800324c:	4613      	mov	r3, r2
 800324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003250:	787b      	ldrb	r3, [r7, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800325c:	e003      	b.n	8003266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e11f      	b.n	80034c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fba4 	bl	80019e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032d8:	f001 fd70 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a7b      	ldr	r2, [pc, #492]	; (80034d0 <HAL_I2C_Init+0x25c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d807      	bhi.n	80032f8 <HAL_I2C_Init+0x84>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a7a      	ldr	r2, [pc, #488]	; (80034d4 <HAL_I2C_Init+0x260>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e006      	b.n	8003306 <HAL_I2C_Init+0x92>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <HAL_I2C_Init+0x264>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf94      	ite	ls
 8003300:	2301      	movls	r3, #1
 8003302:	2300      	movhi	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0db      	b.n	80034c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a72      	ldr	r2, [pc, #456]	; (80034dc <HAL_I2C_Init+0x268>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a64      	ldr	r2, [pc, #400]	; (80034d0 <HAL_I2C_Init+0x25c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <HAL_I2C_Init+0xd4>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3301      	adds	r3, #1
 8003346:	e009      	b.n	800335c <HAL_I2C_Init+0xe8>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a63      	ldr	r2, [pc, #396]	; (80034e0 <HAL_I2C_Init+0x26c>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	3301      	adds	r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800336e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4956      	ldr	r1, [pc, #344]	; (80034d0 <HAL_I2C_Init+0x25c>)
 8003378:	428b      	cmp	r3, r1
 800337a:	d80d      	bhi.n	8003398 <HAL_I2C_Init+0x124>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e59      	subs	r1, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fbb1 f3f3 	udiv	r3, r1, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003390:	2b04      	cmp	r3, #4
 8003392:	bf38      	it	cc
 8003394:	2304      	movcc	r3, #4
 8003396:	e04f      	b.n	8003438 <HAL_I2C_Init+0x1c4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d111      	bne.n	80033c4 <HAL_I2C_Init+0x150>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e58      	subs	r0, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	440b      	add	r3, r1
 80033ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e012      	b.n	80033ea <HAL_I2C_Init+0x176>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e58      	subs	r0, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	0099      	lsls	r1, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Init+0x17e>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e022      	b.n	8003438 <HAL_I2C_Init+0x1c4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10e      	bne.n	8003418 <HAL_I2C_Init+0x1a4>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e58      	subs	r0, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	440b      	add	r3, r1
 8003408:	fbb0 f3f3 	udiv	r3, r0, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	e00f      	b.n	8003438 <HAL_I2C_Init+0x1c4>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	0099      	lsls	r1, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	6809      	ldr	r1, [r1, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6911      	ldr	r1, [r2, #16]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	430b      	orrs	r3, r1
 800347a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	000186a0 	.word	0x000186a0
 80034d4:	001e847f 	.word	0x001e847f
 80034d8:	003d08ff 	.word	0x003d08ff
 80034dc:	431bde83 	.word	0x431bde83
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e128      	b.n	8003748 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a90      	ldr	r2, [pc, #576]	; (8003750 <HAL_I2S_Init+0x26c>)
 800350e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fe fab1 	bl	8001a78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800352c:	f023 030f 	bic.w	r3, r3, #15
 8003530:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2202      	movs	r2, #2
 8003538:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d060      	beq.n	8003604 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800354a:	2310      	movs	r3, #16
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e001      	b.n	8003554 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b20      	cmp	r3, #32
 800355a:	d802      	bhi.n	8003562 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003562:	2001      	movs	r0, #1
 8003564:	f001 fd20 	bl	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003568:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003572:	d125      	bne.n	80035c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	fbb2 f2f3 	udiv	r2, r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	3305      	adds	r3, #5
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e01f      	b.n	80035de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	3305      	adds	r3, #5
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e00e      	b.n	80035de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	3305      	adds	r3, #5
 80035dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4a5c      	ldr	r2, [pc, #368]	; (8003754 <HAL_I2S_Init+0x270>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	08db      	lsrs	r3, r3, #3
 80035e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e003      	b.n	800360c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003604:	2302      	movs	r3, #2
 8003606:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d902      	bls.n	8003618 <HAL_I2S_Init+0x134>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2bff      	cmp	r3, #255	; 0xff
 8003616:	d907      	bls.n	8003628 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e08f      	b.n	8003748 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	ea42 0103 	orr.w	r1, r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	430a      	orrs	r2, r1
 800363a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003646:	f023 030f 	bic.w	r3, r3, #15
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6851      	ldr	r1, [r2, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6892      	ldr	r2, [r2, #8]
 8003652:	4311      	orrs	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68d2      	ldr	r2, [r2, #12]
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6992      	ldr	r2, [r2, #24]
 800365e:	430a      	orrs	r2, r1
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d161      	bne.n	8003738 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a38      	ldr	r2, [pc, #224]	; (8003758 <HAL_I2S_Init+0x274>)
 8003678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a37      	ldr	r2, [pc, #220]	; (800375c <HAL_I2S_Init+0x278>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_I2S_Init+0x1a4>
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_I2S_Init+0x27c>)
 8003686:	e001      	b.n	800368c <HAL_I2S_Init+0x1a8>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	4932      	ldr	r1, [pc, #200]	; (800375c <HAL_I2S_Init+0x278>)
 8003694:	428a      	cmp	r2, r1
 8003696:	d101      	bne.n	800369c <HAL_I2S_Init+0x1b8>
 8003698:	4a31      	ldr	r2, [pc, #196]	; (8003760 <HAL_I2S_Init+0x27c>)
 800369a:	e001      	b.n	80036a0 <HAL_I2S_Init+0x1bc>
 800369c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036a4:	f023 030f 	bic.w	r3, r3, #15
 80036a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_I2S_Init+0x278>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_I2S_Init+0x1d4>
 80036b4:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_I2S_Init+0x27c>)
 80036b6:	e001      	b.n	80036bc <HAL_I2S_Init+0x1d8>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	2202      	movs	r2, #2
 80036be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <HAL_I2S_Init+0x278>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_I2S_Init+0x1ea>
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_I2S_Init+0x27c>)
 80036cc:	e001      	b.n	80036d2 <HAL_I2S_Init+0x1ee>
 80036ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036de:	d003      	beq.n	80036e8 <HAL_I2S_Init+0x204>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e001      	b.n	80036f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	b299      	uxth	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800370a:	4303      	orrs	r3, r0
 800370c:	b29b      	uxth	r3, r3
 800370e:	430b      	orrs	r3, r1
 8003710:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003712:	4313      	orrs	r3, r2
 8003714:	b29a      	uxth	r2, r3
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	4313      	orrs	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003720:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0d      	ldr	r2, [pc, #52]	; (800375c <HAL_I2S_Init+0x278>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_I2S_Init+0x24c>
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <HAL_I2S_Init+0x27c>)
 800372e:	e001      	b.n	8003734 <HAL_I2S_Init+0x250>
 8003730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003734:	897a      	ldrh	r2, [r7, #10]
 8003736:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08003873 	.word	0x08003873
 8003754:	cccccccd 	.word	0xcccccccd
 8003758:	08003c9d 	.word	0x08003c9d
 800375c:	40003800 	.word	0x40003800
 8003760:	40003400 	.word	0x40003400

08003764 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10e      	bne.n	800380c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffb8 	bl	800377c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	b292      	uxth	r2, r2
 8003828:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10e      	bne.n	800386a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff93 	bl	8003790 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d13a      	bne.n	8003904 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d109      	bne.n	80038ac <I2S_IRQHandler+0x3a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d102      	bne.n	80038ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffb4 	bl	8003814 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d126      	bne.n	8003904 <I2S_IRQHandler+0x92>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d11f      	bne.n	8003904 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff50 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b03      	cmp	r3, #3
 800390e:	d136      	bne.n	800397e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d109      	bne.n	800392e <I2S_IRQHandler+0xbc>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d102      	bne.n	800392e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff45 	bl	80037b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d122      	bne.n	800397e <I2S_IRQHandler+0x10c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b20      	cmp	r3, #32
 8003944:	d11b      	bne.n	800397e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003954:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff13 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d002      	beq.n	80039b4 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039b2:	e160      	b.n	8003c76 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e15a      	b.n	8003c80 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e152      	b.n	8003c80 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d002      	beq.n	8003a06 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d114      	bne.n	8003a30 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	865a      	strh	r2, [r3, #50]	; 0x32
 8003a2e:	e00b      	b.n	8003a48 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2205      	movs	r2, #5
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	4a8b      	ldr	r2, [pc, #556]	; (8003c88 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	4a8a      	ldr	r2, [pc, #552]	; (8003c8c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	4a89      	ldr	r2, [pc, #548]	; (8003c90 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003a6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	4a85      	ldr	r2, [pc, #532]	; (8003c88 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4a84      	ldr	r2, [pc, #528]	; (8003c8c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4a83      	ldr	r2, [pc, #524]	; (8003c90 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a90:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a98:	d002      	beq.n	8003aa0 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d16b      	bne.n	8003b78 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a79      	ldr	r2, [pc, #484]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003ab2:	4b79      	ldr	r3, [pc, #484]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ab4:	e001      	b.n	8003aba <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aba:	330c      	adds	r3, #12
 8003abc:	4619      	mov	r1, r3
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f7fe ff60 	bl	800298c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a70      	ldr	r2, [pc, #448]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003ad6:	4b70      	ldr	r3, [pc, #448]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ad8:	e001      	b.n	8003ade <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	496b      	ldr	r1, [pc, #428]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	d101      	bne.n	8003aee <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003aea:	4b6b      	ldr	r3, [pc, #428]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003aec:	e001      	b.n	8003af2 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003af8:	f107 0308 	add.w	r3, r7, #8
 8003afc:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f7fe ff3a 	bl	800298c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0202 	orr.w	r2, r2, #2
 8003b26:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	f000 809e 	beq.w	8003c76 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003b44:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003b46:	e001      	b.n	8003b4c <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4950      	ldr	r1, [pc, #320]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003b5a:	e001      	b.n	8003b60 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b64:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b74:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003b76:	e07e      	b.n	8003c76 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b86:	d10a      	bne.n	8003b9e <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003bb6:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003bb8:	e001      	b.n	8003bbe <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f7fe fee0 	bl	800298c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a30      	ldr	r2, [pc, #192]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003bd6:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	492b      	ldr	r1, [pc, #172]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d101      	bne.n	8003bee <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003bea:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003bec:	e001      	b.n	8003bf2 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf2:	f042 0202 	orr.w	r2, r2, #2
 8003bf6:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	4619      	mov	r1, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f7fe febb 	bl	800298c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c34:	d01e      	beq.n	8003c74 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003c42:	e001      	b.n	8003c48 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4911      	ldr	r1, [pc, #68]	; (8003c94 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003c50:	428b      	cmp	r3, r1
 8003c52:	d101      	bne.n	8003c58 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003c56:	e001      	b.n	8003c5c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c60:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c70:	61da      	str	r2, [r3, #28]
 8003c72:	e000      	b.n	8003c76 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003c74:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08003f45 	.word	0x08003f45
 8003c8c:	08003f61 	.word	0x08003f61
 8003c90:	08004099 	.word	0x08004099
 8003c94:	40003800 	.word	0x40003800
 8003c98:	40003400 	.word	0x40003400

08003c9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4aa2      	ldr	r2, [pc, #648]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cb6:	4ba2      	ldr	r3, [pc, #648]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cb8:	e001      	b.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a9b      	ldr	r2, [pc, #620]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003cd4:	4b9a      	ldr	r3, [pc, #616]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cd6:	e001      	b.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	d004      	beq.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 8099 	bne.w	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d107      	bne.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa05 	bl	8004118 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 faa8 	bl	8004278 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d13a      	bne.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d035      	beq.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7e      	ldr	r2, [pc, #504]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d46:	4b7e      	ldr	r3, [pc, #504]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d48:	e001      	b.n	8003d4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4979      	ldr	r1, [pc, #484]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d56:	428b      	cmp	r3, r1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d5a:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d5c:	e001      	b.n	8003d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fcfe 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	f040 80be 	bne.w	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80b8 	beq.w	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a59      	ldr	r2, [pc, #356]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dda:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ddc:	e001      	b.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4954      	ldr	r1, [pc, #336]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003dee:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fcc0 	bl	80037a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e24:	e084      	b.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f99e 	bl	800417c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f9dd 	bl	8004214 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d12f      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02a      	beq.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e88:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e8a:	e001      	b.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4929      	ldr	r1, [pc, #164]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e9c:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e9e:	e001      	b.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fc70 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d131      	bne.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02c      	beq.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4912      	ldr	r1, [pc, #72]	; (8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	d101      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ef8:	e001      	b.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f12:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fc3b 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f2e:	e000      	b.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f30:	bf00      	nop
}
 8003f32:	bf00      	nop
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40003800 	.word	0x40003800
 8003f40:	40003400 	.word	0x40003400

08003f44 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7fd fc84 	bl	8001860 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 8084 	bne.w	8004080 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d13c      	bne.n	8003ffc <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d006      	beq.n	8003fa0 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <I2SEx_TxRxDMACplt+0x130>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <I2SEx_TxRxDMACplt+0x4e>
 8003faa:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <I2SEx_TxRxDMACplt+0x134>)
 8003fac:	e001      	b.n	8003fb2 <I2SEx_TxRxDMACplt+0x52>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4935      	ldr	r1, [pc, #212]	; (8004090 <I2SEx_TxRxDMACplt+0x130>)
 8003fba:	428b      	cmp	r3, r1
 8003fbc:	d101      	bne.n	8003fc2 <I2SEx_TxRxDMACplt+0x62>
 8003fbe:	4b35      	ldr	r3, [pc, #212]	; (8004094 <I2SEx_TxRxDMACplt+0x134>)
 8003fc0:	e001      	b.n	8003fc6 <I2SEx_TxRxDMACplt+0x66>
 8003fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	e007      	b.n	8003fde <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7fd fc5a 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d13c      	bne.n	8004080 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004014:	d006      	beq.n	8004024 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004020:	2b00      	cmp	r3, #0
 8004022:	d108      	bne.n	8004036 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0202 	bic.w	r2, r2, #2
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	e015      	b.n	8004062 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <I2SEx_TxRxDMACplt+0x130>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <I2SEx_TxRxDMACplt+0xe4>
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <I2SEx_TxRxDMACplt+0x134>)
 8004042:	e001      	b.n	8004048 <I2SEx_TxRxDMACplt+0xe8>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4910      	ldr	r1, [pc, #64]	; (8004090 <I2SEx_TxRxDMACplt+0x130>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d101      	bne.n	8004058 <I2SEx_TxRxDMACplt+0xf8>
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <I2SEx_TxRxDMACplt+0x134>)
 8004056:	e001      	b.n	800405c <I2SEx_TxRxDMACplt+0xfc>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	f022 0202 	bic.w	r2, r2, #2
 8004060:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7fd fc18 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7fd fc15 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40003800 	.word	0x40003800
 8004094:	40003400 	.word	0x40003400

08004098 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0203 	bic.w	r2, r2, #3
 80040b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a15      	ldr	r2, [pc, #84]	; (8004110 <I2SEx_TxRxDMAError+0x78>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <I2SEx_TxRxDMAError+0x2c>
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <I2SEx_TxRxDMAError+0x7c>)
 80040c2:	e001      	b.n	80040c8 <I2SEx_TxRxDMAError+0x30>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4910      	ldr	r1, [pc, #64]	; (8004110 <I2SEx_TxRxDMAError+0x78>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d101      	bne.n	80040d8 <I2SEx_TxRxDMAError+0x40>
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <I2SEx_TxRxDMAError+0x7c>)
 80040d6:	e001      	b.n	80040dc <I2SEx_TxRxDMAError+0x44>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040dc:	f022 0203 	bic.w	r2, r2, #3
 80040e0:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fb4e 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40003800 	.word	0x40003800
 8004114:	40003400 	.word	0x40003400

08004118 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c99      	adds	r1, r3, #2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6251      	str	r1, [r2, #36]	; 0x24
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d113      	bne.n	8004172 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004158:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fd fb9f 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c99      	adds	r1, r3, #2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6251      	str	r1, [r2, #36]	; 0x24
 800418e:	8819      	ldrh	r1, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <I2SEx_TxISR_I2SExt+0x90>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <I2SEx_TxISR_I2SExt+0x22>
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <I2SEx_TxISR_I2SExt+0x94>)
 800419c:	e001      	b.n	80041a2 <I2SEx_TxISR_I2SExt+0x26>
 800419e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a2:	460a      	mov	r2, r1
 80041a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d121      	bne.n	8004202 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a12      	ldr	r2, [pc, #72]	; (800420c <I2SEx_TxISR_I2SExt+0x90>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <I2SEx_TxISR_I2SExt+0x50>
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <I2SEx_TxISR_I2SExt+0x94>)
 80041ca:	e001      	b.n	80041d0 <I2SEx_TxISR_I2SExt+0x54>
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	490d      	ldr	r1, [pc, #52]	; (800420c <I2SEx_TxISR_I2SExt+0x90>)
 80041d8:	428b      	cmp	r3, r1
 80041da:	d101      	bne.n	80041e0 <I2SEx_TxISR_I2SExt+0x64>
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <I2SEx_TxISR_I2SExt+0x94>)
 80041de:	e001      	b.n	80041e4 <I2SEx_TxISR_I2SExt+0x68>
 80041e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fd fb57 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40003800 	.word	0x40003800
 8004210:	40003400 	.word	0x40003400

08004214 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68d8      	ldr	r0, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	1c99      	adds	r1, r3, #2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800422c:	b282      	uxth	r2, r0
 800422e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d113      	bne.n	8004270 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004256:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fb20 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <I2SEx_RxISR_I2SExt+0x90>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <I2SEx_RxISR_I2SExt+0x16>
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <I2SEx_RxISR_I2SExt+0x94>)
 800428c:	e001      	b.n	8004292 <I2SEx_RxISR_I2SExt+0x1a>
 800428e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004292:	68d8      	ldr	r0, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	1c99      	adds	r1, r3, #2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800429e:	b282      	uxth	r2, r0
 80042a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d121      	bne.n	80042fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <I2SEx_RxISR_I2SExt+0x90>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <I2SEx_RxISR_I2SExt+0x50>
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <I2SEx_RxISR_I2SExt+0x94>)
 80042c6:	e001      	b.n	80042cc <I2SEx_RxISR_I2SExt+0x54>
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	490d      	ldr	r1, [pc, #52]	; (8004308 <I2SEx_RxISR_I2SExt+0x90>)
 80042d4:	428b      	cmp	r3, r1
 80042d6:	d101      	bne.n	80042dc <I2SEx_RxISR_I2SExt+0x64>
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <I2SEx_RxISR_I2SExt+0x94>)
 80042da:	e001      	b.n	80042e0 <I2SEx_RxISR_I2SExt+0x68>
 80042dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fd fad9 	bl	80018b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40003800 	.word	0x40003800
 800430c:	40003400 	.word	0x40003400

08004310 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004312:	b08f      	sub	sp, #60	; 0x3c
 8004314:	af0a      	add	r7, sp, #40	; 0x28
 8004316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e10f      	b.n	8004542 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fd fd97 	bl	8001e70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2203      	movs	r2, #3
 8004346:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fa9a 	bl	800589a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	687e      	ldr	r6, [r7, #4]
 800436e:	466d      	mov	r5, sp
 8004370:	f106 0410 	add.w	r4, r6, #16
 8004374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800437a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800437c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004380:	e885 0003 	stmia.w	r5, {r0, r1}
 8004384:	1d33      	adds	r3, r6, #4
 8004386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004388:	6838      	ldr	r0, [r7, #0]
 800438a:	f001 fa25 	bl	80057d8 <USB_CoreInit>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0d0      	b.n	8004542 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 fa88 	bl	80058bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e04a      	b.n	8004448 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	333d      	adds	r3, #61	; 0x3d
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	333c      	adds	r3, #60	; 0x3c
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	b298      	uxth	r0, r3
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3342      	adds	r3, #66	; 0x42
 80043ee:	4602      	mov	r2, r0
 80043f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	333f      	adds	r3, #63	; 0x3f
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004406:	7bfa      	ldrb	r2, [r7, #15]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3344      	adds	r3, #68	; 0x44
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3348      	adds	r3, #72	; 0x48
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3350      	adds	r3, #80	; 0x50
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	3301      	adds	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d3af      	bcc.n	80043b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e044      	b.n	80044e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	3301      	adds	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3b5      	bcc.n	8004458 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	687e      	ldr	r6, [r7, #4]
 80044f4:	466d      	mov	r5, sp
 80044f6:	f106 0410 	add.w	r4, r6, #16
 80044fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004506:	e885 0003 	stmia.w	r5, {r0, r1}
 800450a:	1d33      	adds	r3, r6, #4
 800450c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f001 f9fe 	bl	8005910 <USB_DevInit>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e00d      	b.n	8004542 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fbad 	bl	8005c9a <USB_DevDisconnect>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800454c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e25b      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d075      	beq.n	8004656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456a:	4ba3      	ldr	r3, [pc, #652]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b04      	cmp	r3, #4
 8004574:	d00c      	beq.n	8004590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004576:	4ba0      	ldr	r3, [pc, #640]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457e:	2b08      	cmp	r3, #8
 8004580:	d112      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4b9d      	ldr	r3, [pc, #628]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458e:	d10b      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	4b99      	ldr	r3, [pc, #612]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05b      	beq.n	8004654 <HAL_RCC_OscConfig+0x108>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d157      	bne.n	8004654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e236      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d106      	bne.n	80045c0 <HAL_RCC_OscConfig+0x74>
 80045b2:	4b91      	ldr	r3, [pc, #580]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a90      	ldr	r2, [pc, #576]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e01d      	b.n	80045fc <HAL_RCC_OscConfig+0xb0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x98>
 80045ca:	4b8b      	ldr	r3, [pc, #556]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a8a      	ldr	r2, [pc, #552]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a87      	ldr	r2, [pc, #540]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e00b      	b.n	80045fc <HAL_RCC_OscConfig+0xb0>
 80045e4:	4b84      	ldr	r3, [pc, #528]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a83      	ldr	r2, [pc, #524]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a80      	ldr	r2, [pc, #512]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80045f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d013      	beq.n	800462c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fd fd72 	bl	80020ec <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460c:	f7fd fd6e 	bl	80020ec <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1fb      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0xc0>
 800462a:	e014      	b.n	8004656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fd fd5e 	bl	80020ec <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004634:	f7fd fd5a 	bl	80020ec <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e1e7      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0xe8>
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d063      	beq.n	800472a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004662:	4b65      	ldr	r3, [pc, #404]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466e:	4b62      	ldr	r3, [pc, #392]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004676:	2b08      	cmp	r3, #8
 8004678:	d11c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b5f      	ldr	r3, [pc, #380]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d116      	bne.n	80046b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004686:	4b5c      	ldr	r3, [pc, #368]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_RCC_OscConfig+0x152>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e1bb      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469e:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4952      	ldr	r1, [pc, #328]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b2:	e03a      	b.n	800472a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046bc:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_RCC_OscConfig+0x2b0>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fd fd13 	bl	80020ec <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fd fd0f 	bl	80020ec <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e19c      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4940      	ldr	r1, [pc, #256]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fe:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <HAL_RCC_OscConfig+0x2b0>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fcf2 	bl	80020ec <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470c:	f7fd fcee 	bl	80020ec <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e17b      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d030      	beq.n	8004798 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <HAL_RCC_OscConfig+0x2b4>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd fcd2 	bl	80020ec <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd fcce 	bl	80020ec <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e15b      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x200>
 800476a:	e015      	b.n	8004798 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476c:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_RCC_OscConfig+0x2b4>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004772:	f7fd fcbb 	bl	80020ec <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477a:	f7fd fcb7 	bl	80020ec <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e144      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 800478e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a0 	beq.w	80048e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6413      	str	r3, [r2, #64]	; 0x40
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_OscConfig+0x2b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d121      	bne.n	8004826 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_RCC_OscConfig+0x2b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a07      	ldr	r2, [pc, #28]	; (8004804 <HAL_RCC_OscConfig+0x2b8>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ee:	f7fd fc7d 	bl	80020ec <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	e011      	b.n	800481a <HAL_RCC_OscConfig+0x2ce>
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
 80047fc:	42470000 	.word	0x42470000
 8004800:	42470e80 	.word	0x42470e80
 8004804:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd fc70 	bl	80020ec <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0fd      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b81      	ldr	r3, [pc, #516]	; (8004a20 <HAL_RCC_OscConfig+0x4d4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d106      	bne.n	800483c <HAL_RCC_OscConfig+0x2f0>
 800482e:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a7c      	ldr	r2, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
 800483a:	e01c      	b.n	8004876 <HAL_RCC_OscConfig+0x32a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b05      	cmp	r3, #5
 8004842:	d10c      	bne.n	800485e <HAL_RCC_OscConfig+0x312>
 8004844:	4b77      	ldr	r3, [pc, #476]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a76      	ldr	r2, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
 8004850:	4b74      	ldr	r3, [pc, #464]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a73      	ldr	r2, [pc, #460]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	e00b      	b.n	8004876 <HAL_RCC_OscConfig+0x32a>
 800485e:	4b71      	ldr	r3, [pc, #452]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a70      	ldr	r2, [pc, #448]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	4b6e      	ldr	r3, [pc, #440]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a6d      	ldr	r2, [pc, #436]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d015      	beq.n	80048aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fc35 	bl	80020ec <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fd fc31 	bl	80020ec <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0bc      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ee      	beq.n	8004886 <HAL_RCC_OscConfig+0x33a>
 80048a8:	e014      	b.n	80048d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048aa:	f7fd fc1f 	bl	80020ec <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fd fc1b 	bl	80020ec <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0a6      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ee      	bne.n	80048b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a51      	ldr	r2, [pc, #324]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8092 	beq.w	8004a14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f0:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d05c      	beq.n	80049b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d141      	bne.n	8004988 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b48      	ldr	r3, [pc, #288]	; (8004a28 <HAL_RCC_OscConfig+0x4dc>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490a:	f7fd fbef 	bl	80020ec <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004912:	f7fd fbeb 	bl	80020ec <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e078      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	019b      	lsls	r3, r3, #6
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	061b      	lsls	r3, r3, #24
 8004954:	4933      	ldr	r1, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495a:	4b33      	ldr	r3, [pc, #204]	; (8004a28 <HAL_RCC_OscConfig+0x4dc>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fd fbc4 	bl	80020ec <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004968:	f7fd fbc0 	bl	80020ec <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e04d      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x41c>
 8004986:	e045      	b.n	8004a14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <HAL_RCC_OscConfig+0x4dc>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd fbad 	bl	80020ec <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004996:	f7fd fba9 	bl	80020ec <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e036      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x44a>
 80049b4:	e02e      	b.n	8004a14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e029      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_RCC_OscConfig+0x4d8>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d11c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d115      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049ea:	4013      	ands	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40007000 	.word	0x40007000
 8004a24:	40023800 	.word	0x40023800
 8004a28:	42470060 	.word	0x42470060

08004a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0cc      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b68      	ldr	r3, [pc, #416]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d90c      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0b8      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d020      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a80:	4b59      	ldr	r3, [pc, #356]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a58      	ldr	r2, [pc, #352]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a98:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a52      	ldr	r2, [pc, #328]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	4b50      	ldr	r3, [pc, #320]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	494d      	ldr	r1, [pc, #308]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d044      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d107      	bne.n	8004ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d119      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e07f      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e06f      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afa:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e067      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 0203 	bic.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4934      	ldr	r1, [pc, #208]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b1c:	f7fd fae6 	bl	80020ec <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b24:	f7fd fae2 	bl	80020ec <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e04f      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 020c 	and.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d1eb      	bne.n	8004b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d20c      	bcs.n	8004b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e032      	b.n	8004bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4916      	ldr	r1, [pc, #88]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	490e      	ldr	r1, [pc, #56]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bb2:	f000 f821 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	fa21 f303 	lsr.w	r3, r1, r3
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd fa46 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023c00 	.word	0x40023c00
 8004be8:	40023800 	.word	0x40023800
 8004bec:	08006e68 	.word	0x08006e68
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	2300      	movs	r3, #0
 8004c08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0e:	4b63      	ldr	r3, [pc, #396]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d007      	beq.n	8004c2a <HAL_RCC_GetSysClockFreq+0x32>
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x38>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 80b4 	bne.w	8004d8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c26:	60bb      	str	r3, [r7, #8]
       break;
 8004c28:	e0b3      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c2c:	60bb      	str	r3, [r7, #8]
      break;
 8004c2e:	e0b0      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c30:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c3a:	4b58      	ldr	r3, [pc, #352]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d04a      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b55      	ldr	r3, [pc, #340]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	f04f 0400 	mov.w	r4, #0
 8004c50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	ea03 0501 	and.w	r5, r3, r1
 8004c5c:	ea04 0602 	and.w	r6, r4, r2
 8004c60:	4629      	mov	r1, r5
 8004c62:	4632      	mov	r2, r6
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	f04f 0400 	mov.w	r4, #0
 8004c6c:	0154      	lsls	r4, r2, #5
 8004c6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c72:	014b      	lsls	r3, r1, #5
 8004c74:	4619      	mov	r1, r3
 8004c76:	4622      	mov	r2, r4
 8004c78:	1b49      	subs	r1, r1, r5
 8004c7a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	f04f 0400 	mov.w	r4, #0
 8004c86:	0194      	lsls	r4, r2, #6
 8004c88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c8c:	018b      	lsls	r3, r1, #6
 8004c8e:	1a5b      	subs	r3, r3, r1
 8004c90:	eb64 0402 	sbc.w	r4, r4, r2
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	00e2      	lsls	r2, r4, #3
 8004c9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ca2:	00d9      	lsls	r1, r3, #3
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4614      	mov	r4, r2
 8004ca8:	195b      	adds	r3, r3, r5
 8004caa:	eb44 0406 	adc.w	r4, r4, r6
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	02a2      	lsls	r2, r4, #10
 8004cb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cbc:	0299      	lsls	r1, r3, #10
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f04f 0400 	mov.w	r4, #0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4623      	mov	r3, r4
 8004cd0:	f7fb ff48 	bl	8000b64 <__aeabi_uldivmod>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e049      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	099b      	lsrs	r3, r3, #6
 8004ce2:	f04f 0400 	mov.w	r4, #0
 8004ce6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	ea03 0501 	and.w	r5, r3, r1
 8004cf2:	ea04 0602 	and.w	r6, r4, r2
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f04f 0400 	mov.w	r4, #0
 8004d02:	0154      	lsls	r4, r2, #5
 8004d04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d08:	014b      	lsls	r3, r1, #5
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	1b49      	subs	r1, r1, r5
 8004d10:	eb62 0206 	sbc.w	r2, r2, r6
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	f04f 0400 	mov.w	r4, #0
 8004d1c:	0194      	lsls	r4, r2, #6
 8004d1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d22:	018b      	lsls	r3, r1, #6
 8004d24:	1a5b      	subs	r3, r3, r1
 8004d26:	eb64 0402 	sbc.w	r4, r4, r2
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	00e2      	lsls	r2, r4, #3
 8004d34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d38:	00d9      	lsls	r1, r3, #3
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	195b      	adds	r3, r3, r5
 8004d40:	eb44 0406 	adc.w	r4, r4, r6
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	02a2      	lsls	r2, r4, #10
 8004d4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d52:	0299      	lsls	r1, r3, #10
 8004d54:	460b      	mov	r3, r1
 8004d56:	4614      	mov	r4, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4623      	mov	r3, r4
 8004d66:	f7fb fefd 	bl	8000b64 <__aeabi_uldivmod>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	60bb      	str	r3, [r7, #8]
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d8e:	60bb      	str	r3, [r7, #8]
      break;
 8004d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d92:	68bb      	ldr	r3, [r7, #8]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000000 	.word	0x20000000

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5cd3      	ldrb	r3, [r2, r3]
 8004dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	08006e78 	.word	0x08006e78

08004de4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d105      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d035      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e0c:	4b62      	ldr	r3, [pc, #392]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e12:	f7fd f96b 	bl	80020ec <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e1a:	f7fd f967 	bl	80020ec <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0b0      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e2c:	4b5b      	ldr	r3, [pc, #364]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	019a      	lsls	r2, r3, #6
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	071b      	lsls	r3, r3, #28
 8004e44:	4955      	ldr	r1, [pc, #340]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e4c:	4b52      	ldr	r3, [pc, #328]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e52:	f7fd f94b 	bl	80020ec <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e5a:	f7fd f947 	bl	80020ec <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e090      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e6c:	4b4b      	ldr	r3, [pc, #300]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8083 	beq.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b44      	ldr	r3, [pc, #272]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	4a43      	ldr	r2, [pc, #268]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e94:	6413      	str	r3, [r2, #64]	; 0x40
 8004e96:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ea2:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a3e      	ldr	r2, [pc, #248]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eae:	f7fd f91d 	bl	80020ec <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fd f919 	bl	80020ec <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e062      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ec8:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed4:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004edc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d02f      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d028      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004efc:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f02:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f0e:	4b23      	ldr	r3, [pc, #140]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d114      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f1a:	f7fd f8e7 	bl	80020ec <HAL_GetTick>
 8004f1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fd f8e3 	bl	80020ec <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e02a      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ee      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f50:	d10d      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f66:	490d      	ldr	r1, [pc, #52]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]
 8004f6c:	e005      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f78:	6093      	str	r3, [r2, #8]
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f86:	4905      	ldr	r1, [pc, #20]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	42470068 	.word	0x42470068
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	42470e40 	.word	0x42470e40

08004fa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d13d      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fc6:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fce:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d12f      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fdc:	617b      	str	r3, [r7, #20]
          break;
 8004fde:	e02f      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fec:	d108      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fee:	4b18      	ldr	r3, [pc, #96]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e007      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005000:	4b13      	ldr	r3, [pc, #76]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005008:	4a13      	ldr	r2, [pc, #76]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502a:	0f1b      	lsrs	r3, r3, #28
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	617b      	str	r3, [r7, #20]
          break;
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
          break;
 800503e:	bf00      	nop
        }
      }
      break;
 8005040:	bf00      	nop
    }
  }
  return frequency;
 8005042:	697b      	ldr	r3, [r7, #20]
}
 8005044:	4618      	mov	r0, r3
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40023800 	.word	0x40023800
 8005054:	00bb8000 	.word	0x00bb8000
 8005058:	00f42400 	.word	0x00f42400

0800505c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e01d      	b.n	80050aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fde2 	bl	8001c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 f8d0 	bl	8005240 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0b4      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	f200 809f 	bhi.w	8005224 <HAL_TIM_PWM_ConfigChannel+0x170>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005121 	.word	0x08005121
 80050f0:	08005225 	.word	0x08005225
 80050f4:	08005225 	.word	0x08005225
 80050f8:	08005225 	.word	0x08005225
 80050fc:	08005161 	.word	0x08005161
 8005100:	08005225 	.word	0x08005225
 8005104:	08005225 	.word	0x08005225
 8005108:	08005225 	.word	0x08005225
 800510c:	080051a3 	.word	0x080051a3
 8005110:	08005225 	.word	0x08005225
 8005114:	08005225 	.word	0x08005225
 8005118:	08005225 	.word	0x08005225
 800511c:	080051e3 	.word	0x080051e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f92a 	bl	8005380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0208 	orr.w	r2, r2, #8
 800513a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0204 	bic.w	r2, r2, #4
 800514a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
      break;
 800515e:	e062      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f97a 	bl	8005460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	619a      	str	r2, [r3, #24]
      break;
 80051a0:	e041      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f9cf 	bl	800554c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0208 	orr.w	r2, r2, #8
 80051bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0204 	bic.w	r2, r2, #4
 80051cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69d9      	ldr	r1, [r3, #28]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	61da      	str	r2, [r3, #28]
      break;
 80051e0:	e021      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fa23 	bl	8005634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	61da      	str	r2, [r3, #28]
      break;
 8005222:	e000      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005224:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a40      	ldr	r2, [pc, #256]	; (8005354 <TIM_Base_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d00f      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3d      	ldr	r2, [pc, #244]	; (8005358 <TIM_Base_SetConfig+0x118>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00b      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3c      	ldr	r2, [pc, #240]	; (800535c <TIM_Base_SetConfig+0x11c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3b      	ldr	r2, [pc, #236]	; (8005360 <TIM_Base_SetConfig+0x120>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3a      	ldr	r2, [pc, #232]	; (8005364 <TIM_Base_SetConfig+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d108      	bne.n	8005292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <TIM_Base_SetConfig+0x114>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02b      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a0:	d027      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <TIM_Base_SetConfig+0x118>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d023      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	; (800535c <TIM_Base_SetConfig+0x11c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <TIM_Base_SetConfig+0x120>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01b      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <TIM_Base_SetConfig+0x124>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d017      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a28      	ldr	r2, [pc, #160]	; (8005368 <TIM_Base_SetConfig+0x128>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a27      	ldr	r2, [pc, #156]	; (800536c <TIM_Base_SetConfig+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00f      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <TIM_Base_SetConfig+0x130>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00b      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a25      	ldr	r2, [pc, #148]	; (8005374 <TIM_Base_SetConfig+0x134>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a24      	ldr	r2, [pc, #144]	; (8005378 <TIM_Base_SetConfig+0x138>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a23      	ldr	r2, [pc, #140]	; (800537c <TIM_Base_SetConfig+0x13c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d108      	bne.n	8005304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <TIM_Base_SetConfig+0x114>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_Base_SetConfig+0xf8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <TIM_Base_SetConfig+0x124>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d103      	bne.n	8005340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	615a      	str	r2, [r3, #20]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40010400 	.word	0x40010400
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800
 8005374:	40001800 	.word	0x40001800
 8005378:	40001c00 	.word	0x40001c00
 800537c:	40002000 	.word	0x40002000

08005380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0302 	bic.w	r3, r3, #2
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a20      	ldr	r2, [pc, #128]	; (8005458 <TIM_OC1_SetConfig+0xd8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC1_SetConfig+0x64>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1f      	ldr	r2, [pc, #124]	; (800545c <TIM_OC1_SetConfig+0xdc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10c      	bne.n	80053fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0308 	bic.w	r3, r3, #8
 80053ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a15      	ldr	r2, [pc, #84]	; (8005458 <TIM_OC1_SetConfig+0xd8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC1_SetConfig+0x8e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a14      	ldr	r2, [pc, #80]	; (800545c <TIM_OC1_SetConfig+0xdc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d111      	bne.n	8005432 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40010000 	.word	0x40010000
 800545c:	40010400 	.word	0x40010400

08005460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0210 	bic.w	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0320 	bic.w	r3, r3, #32
 80054aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a22      	ldr	r2, [pc, #136]	; (8005544 <TIM_OC2_SetConfig+0xe4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC2_SetConfig+0x68>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a21      	ldr	r2, [pc, #132]	; (8005548 <TIM_OC2_SetConfig+0xe8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d10d      	bne.n	80054e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <TIM_OC2_SetConfig+0xe4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0x94>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a16      	ldr	r2, [pc, #88]	; (8005548 <TIM_OC2_SetConfig+0xe8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40010400 	.word	0x40010400

0800554c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <TIM_OC3_SetConfig+0xe0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC3_SetConfig+0x66>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a20      	ldr	r2, [pc, #128]	; (8005630 <TIM_OC3_SetConfig+0xe4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10d      	bne.n	80055ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <TIM_OC3_SetConfig+0xe0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_OC3_SetConfig+0x92>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <TIM_OC3_SetConfig+0xe4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d113      	bne.n	8005606 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400

08005634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	031b      	lsls	r3, r3, #12
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <TIM_OC4_SetConfig+0xa4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC4_SetConfig+0x68>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a11      	ldr	r2, [pc, #68]	; (80056dc <TIM_OC4_SetConfig+0xa8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d109      	bne.n	80056b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40010400 	.word	0x40010400

080056e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e05a      	b.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a21      	ldr	r2, [pc, #132]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005744:	d01d      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4313      	orrs	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40001800 	.word	0x40001800

080057d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d8:	b084      	sub	sp, #16
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	f107 001c 	add.w	r0, r7, #28
 80057e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d122      	bne.n	8005836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa56 	bl	8005cdc <USB_CoreReset>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e01a      	b.n	800586c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa4a 	bl	8005cdc <USB_CoreReset>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800584c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
 800585e:	e005      	b.n	800586c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10b      	bne.n	800588a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f043 0206 	orr.w	r2, r3, #6
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005896:	b004      	add	sp, #16
 8005898:	4770      	bx	lr

0800589a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d106      	bne.n	80058e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	e00b      	b.n	8005900 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e001      	b.n	8005900 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e003      	b.n	8005908 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005900:	2032      	movs	r0, #50	; 0x32
 8005902:	f7fc fbff 	bl	8002104 <HAL_Delay>

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005910:	b084      	sub	sp, #16
 8005912:	b580      	push	{r7, lr}
 8005914:	b086      	sub	sp, #24
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800591e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e009      	b.n	8005944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3340      	adds	r3, #64	; 0x40
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3301      	adds	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b0e      	cmp	r3, #14
 8005948:	d9f2      	bls.n	8005930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11c      	bne.n	800598a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
 8005988:	e00b      	b.n	80059a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b4:	4619      	mov	r1, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059bc:	461a      	mov	r2, r3
 80059be:	680b      	ldr	r3, [r1, #0]
 80059c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10c      	bne.n	80059e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f949 	bl	8005c68 <USB_SetDevSpeed>
 80059d6:	e008      	b.n	80059ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059d8:	2101      	movs	r1, #1
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f944 	bl	8005c68 <USB_SetDevSpeed>
 80059e0:	e003      	b.n	80059ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059e2:	2103      	movs	r1, #3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f93f 	bl	8005c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ea:	2110      	movs	r1, #16
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8f3 	bl	8005bd8 <USB_FlushTxFifo>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f911 	bl	8005c24 <USB_FlushRxFifo>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e043      	b.n	8005abe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4c:	d118      	bne.n	8005a80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e013      	b.n	8005a92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	461a      	mov	r2, r3
 8005a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e008      	b.n	8005a92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	3301      	adds	r3, #1
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3b7      	bcc.n	8005a36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e043      	b.n	8005b54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae2:	d118      	bne.n	8005b16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	461a      	mov	r2, r3
 8005af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e013      	b.n	8005b28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e008      	b.n	8005b28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	461a      	mov	r2, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	461a      	mov	r2, r3
 8005b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3301      	adds	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3b7      	bcc.n	8005acc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f043 0210 	orr.w	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <USB_DevInit+0x2c4>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f043 0208 	orr.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bbc:	f043 0304 	orr.w	r3, r3, #4
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd0:	b004      	add	sp, #16
 8005bd2:	4770      	bx	lr
 8005bd4:	803c3800 	.word	0x803c3800

08005bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <USB_FlushTxFifo+0x48>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e006      	b.n	8005c12 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d0f0      	beq.n	8005bf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	00030d40 	.word	0x00030d40

08005c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2210      	movs	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <USB_FlushRxFifo+0x40>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d0f0      	beq.n	8005c36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	00030d40 	.word	0x00030d40

08005c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cb4:	f023 0303 	bic.w	r3, r3, #3
 8005cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc8:	f043 0302 	orr.w	r3, r3, #2
 8005ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <USB_CoreReset+0x64>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e01b      	b.n	8005d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	daf2      	bge.n	8005ce8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <USB_CoreReset+0x64>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d901      	bls.n	8005d24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d0f0      	beq.n	8005d12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	00030d40 	.word	0x00030d40

08005d44 <__libc_init_array>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4e0d      	ldr	r6, [pc, #52]	; (8005d7c <__libc_init_array+0x38>)
 8005d48:	4c0d      	ldr	r4, [pc, #52]	; (8005d80 <__libc_init_array+0x3c>)
 8005d4a:	1ba4      	subs	r4, r4, r6
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	2500      	movs	r5, #0
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	d109      	bne.n	8005d68 <__libc_init_array+0x24>
 8005d54:	4e0b      	ldr	r6, [pc, #44]	; (8005d84 <__libc_init_array+0x40>)
 8005d56:	4c0c      	ldr	r4, [pc, #48]	; (8005d88 <__libc_init_array+0x44>)
 8005d58:	f001 f878 	bl	8006e4c <_init>
 8005d5c:	1ba4      	subs	r4, r4, r6
 8005d5e:	10a4      	asrs	r4, r4, #2
 8005d60:	2500      	movs	r5, #0
 8005d62:	42a5      	cmp	r5, r4
 8005d64:	d105      	bne.n	8005d72 <__libc_init_array+0x2e>
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d6c:	4798      	blx	r3
 8005d6e:	3501      	adds	r5, #1
 8005d70:	e7ee      	b.n	8005d50 <__libc_init_array+0xc>
 8005d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d76:	4798      	blx	r3
 8005d78:	3501      	adds	r5, #1
 8005d7a:	e7f2      	b.n	8005d62 <__libc_init_array+0x1e>
 8005d7c:	08007068 	.word	0x08007068
 8005d80:	08007068 	.word	0x08007068
 8005d84:	08007068 	.word	0x08007068
 8005d88:	0800706c 	.word	0x0800706c

08005d8c <memset>:
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <cos>:
 8005da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005da2:	ec51 0b10 	vmov	r0, r1, d0
 8005da6:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <cos+0x80>)
 8005da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005dac:	4293      	cmp	r3, r2
 8005dae:	dc06      	bgt.n	8005dbe <cos+0x1e>
 8005db0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005e18 <cos+0x78>
 8005db4:	f000 fa74 	bl	80062a0 <__kernel_cos>
 8005db8:	ec51 0b10 	vmov	r0, r1, d0
 8005dbc:	e007      	b.n	8005dce <cos+0x2e>
 8005dbe:	4a19      	ldr	r2, [pc, #100]	; (8005e24 <cos+0x84>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	dd09      	ble.n	8005dd8 <cos+0x38>
 8005dc4:	ee10 2a10 	vmov	r2, s0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	f7fa fa01 	bl	80001d0 <__aeabi_dsub>
 8005dce:	ec41 0b10 	vmov	d0, r0, r1
 8005dd2:	b005      	add	sp, #20
 8005dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd8:	4668      	mov	r0, sp
 8005dda:	f000 f86d 	bl	8005eb8 <__ieee754_rem_pio2>
 8005dde:	f000 0003 	and.w	r0, r0, #3
 8005de2:	2801      	cmp	r0, #1
 8005de4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005de8:	ed9d 0b00 	vldr	d0, [sp]
 8005dec:	d007      	beq.n	8005dfe <cos+0x5e>
 8005dee:	2802      	cmp	r0, #2
 8005df0:	d00e      	beq.n	8005e10 <cos+0x70>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d0de      	beq.n	8005db4 <cos+0x14>
 8005df6:	2001      	movs	r0, #1
 8005df8:	f000 fe5a 	bl	8006ab0 <__kernel_sin>
 8005dfc:	e7dc      	b.n	8005db8 <cos+0x18>
 8005dfe:	f000 fe57 	bl	8006ab0 <__kernel_sin>
 8005e02:	ec53 2b10 	vmov	r2, r3, d0
 8005e06:	ee10 0a10 	vmov	r0, s0
 8005e0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e0e:	e7de      	b.n	8005dce <cos+0x2e>
 8005e10:	f000 fa46 	bl	80062a0 <__kernel_cos>
 8005e14:	e7f5      	b.n	8005e02 <cos+0x62>
 8005e16:	bf00      	nop
	...
 8005e20:	3fe921fb 	.word	0x3fe921fb
 8005e24:	7fefffff 	.word	0x7fefffff

08005e28 <sin>:
 8005e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e2a:	ec51 0b10 	vmov	r0, r1, d0
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <sin+0x88>)
 8005e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e34:	4293      	cmp	r3, r2
 8005e36:	dc07      	bgt.n	8005e48 <sin+0x20>
 8005e38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005ea8 <sin+0x80>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f000 fe37 	bl	8006ab0 <__kernel_sin>
 8005e42:	ec51 0b10 	vmov	r0, r1, d0
 8005e46:	e007      	b.n	8005e58 <sin+0x30>
 8005e48:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <sin+0x8c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	dd09      	ble.n	8005e62 <sin+0x3a>
 8005e4e:	ee10 2a10 	vmov	r2, s0
 8005e52:	460b      	mov	r3, r1
 8005e54:	f7fa f9bc 	bl	80001d0 <__aeabi_dsub>
 8005e58:	ec41 0b10 	vmov	d0, r0, r1
 8005e5c:	b005      	add	sp, #20
 8005e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e62:	4668      	mov	r0, sp
 8005e64:	f000 f828 	bl	8005eb8 <__ieee754_rem_pio2>
 8005e68:	f000 0003 	and.w	r0, r0, #3
 8005e6c:	2801      	cmp	r0, #1
 8005e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e72:	ed9d 0b00 	vldr	d0, [sp]
 8005e76:	d004      	beq.n	8005e82 <sin+0x5a>
 8005e78:	2802      	cmp	r0, #2
 8005e7a:	d005      	beq.n	8005e88 <sin+0x60>
 8005e7c:	b970      	cbnz	r0, 8005e9c <sin+0x74>
 8005e7e:	2001      	movs	r0, #1
 8005e80:	e7dd      	b.n	8005e3e <sin+0x16>
 8005e82:	f000 fa0d 	bl	80062a0 <__kernel_cos>
 8005e86:	e7dc      	b.n	8005e42 <sin+0x1a>
 8005e88:	2001      	movs	r0, #1
 8005e8a:	f000 fe11 	bl	8006ab0 <__kernel_sin>
 8005e8e:	ec53 2b10 	vmov	r2, r3, d0
 8005e92:	ee10 0a10 	vmov	r0, s0
 8005e96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e9a:	e7dd      	b.n	8005e58 <sin+0x30>
 8005e9c:	f000 fa00 	bl	80062a0 <__kernel_cos>
 8005ea0:	e7f5      	b.n	8005e8e <sin+0x66>
 8005ea2:	bf00      	nop
 8005ea4:	f3af 8000 	nop.w
	...
 8005eb0:	3fe921fb 	.word	0x3fe921fb
 8005eb4:	7fefffff 	.word	0x7fefffff

08005eb8 <__ieee754_rem_pio2>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	ec57 6b10 	vmov	r6, r7, d0
 8005ec0:	4bc3      	ldr	r3, [pc, #780]	; (80061d0 <__ieee754_rem_pio2+0x318>)
 8005ec2:	b08d      	sub	sp, #52	; 0x34
 8005ec4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ec8:	4598      	cmp	r8, r3
 8005eca:	4604      	mov	r4, r0
 8005ecc:	9704      	str	r7, [sp, #16]
 8005ece:	dc07      	bgt.n	8005ee0 <__ieee754_rem_pio2+0x28>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	ed84 0b00 	vstr	d0, [r4]
 8005ed8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005edc:	2500      	movs	r5, #0
 8005ede:	e027      	b.n	8005f30 <__ieee754_rem_pio2+0x78>
 8005ee0:	4bbc      	ldr	r3, [pc, #752]	; (80061d4 <__ieee754_rem_pio2+0x31c>)
 8005ee2:	4598      	cmp	r8, r3
 8005ee4:	dc75      	bgt.n	8005fd2 <__ieee754_rem_pio2+0x11a>
 8005ee6:	9b04      	ldr	r3, [sp, #16]
 8005ee8:	4dbb      	ldr	r5, [pc, #748]	; (80061d8 <__ieee754_rem_pio2+0x320>)
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	ee10 0a10 	vmov	r0, s0
 8005ef0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006198 <__ieee754_rem_pio2+0x2e0>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	dd36      	ble.n	8005f68 <__ieee754_rem_pio2+0xb0>
 8005efa:	f7fa f969 	bl	80001d0 <__aeabi_dsub>
 8005efe:	45a8      	cmp	r8, r5
 8005f00:	4606      	mov	r6, r0
 8005f02:	460f      	mov	r7, r1
 8005f04:	d018      	beq.n	8005f38 <__ieee754_rem_pio2+0x80>
 8005f06:	a3a6      	add	r3, pc, #664	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x2e8>)
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa f960 	bl	80001d0 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	e9c4 2300 	strd	r2, r3, [r4]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa f958 	bl	80001d0 <__aeabi_dsub>
 8005f20:	a39f      	add	r3, pc, #636	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x2e8>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa f953 	bl	80001d0 <__aeabi_dsub>
 8005f2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f2e:	2501      	movs	r5, #1
 8005f30:	4628      	mov	r0, r5
 8005f32:	b00d      	add	sp, #52	; 0x34
 8005f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f38:	a39b      	add	r3, pc, #620	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x2f0>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa f947 	bl	80001d0 <__aeabi_dsub>
 8005f42:	a39b      	add	r3, pc, #620	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2f8>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	4606      	mov	r6, r0
 8005f4a:	460f      	mov	r7, r1
 8005f4c:	f7fa f940 	bl	80001d0 <__aeabi_dsub>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	e9c4 2300 	strd	r2, r3, [r4]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	f7fa f938 	bl	80001d0 <__aeabi_dsub>
 8005f60:	a393      	add	r3, pc, #588	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2f8>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	e7de      	b.n	8005f26 <__ieee754_rem_pio2+0x6e>
 8005f68:	f7fa f934 	bl	80001d4 <__adddf3>
 8005f6c:	45a8      	cmp	r8, r5
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	d016      	beq.n	8005fa2 <__ieee754_rem_pio2+0xea>
 8005f74:	a38a      	add	r3, pc, #552	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x2e8>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f7fa f92b 	bl	80001d4 <__adddf3>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	e9c4 2300 	strd	r2, r3, [r4]
 8005f86:	4630      	mov	r0, r6
 8005f88:	4639      	mov	r1, r7
 8005f8a:	f7fa f921 	bl	80001d0 <__aeabi_dsub>
 8005f8e:	a384      	add	r3, pc, #528	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x2e8>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa f91e 	bl	80001d4 <__adddf3>
 8005f98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fa0:	e7c6      	b.n	8005f30 <__ieee754_rem_pio2+0x78>
 8005fa2:	a381      	add	r3, pc, #516	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x2f0>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa f914 	bl	80001d4 <__adddf3>
 8005fac:	a380      	add	r3, pc, #512	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2f8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	f7fa f90d 	bl	80001d4 <__adddf3>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	e9c4 2300 	strd	r2, r3, [r4]
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa f903 	bl	80001d0 <__aeabi_dsub>
 8005fca:	a379      	add	r3, pc, #484	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2f8>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	e7e0      	b.n	8005f94 <__ieee754_rem_pio2+0xdc>
 8005fd2:	4b82      	ldr	r3, [pc, #520]	; (80061dc <__ieee754_rem_pio2+0x324>)
 8005fd4:	4598      	cmp	r8, r3
 8005fd6:	f300 80d0 	bgt.w	800617a <__ieee754_rem_pio2+0x2c2>
 8005fda:	f000 fe23 	bl	8006c24 <fabs>
 8005fde:	ec57 6b10 	vmov	r6, r7, d0
 8005fe2:	ee10 0a10 	vmov	r0, s0
 8005fe6:	a374      	add	r3, pc, #464	; (adr r3, 80061b8 <__ieee754_rem_pio2+0x300>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa faa7 	bl	8000540 <__aeabi_dmul>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4b7a      	ldr	r3, [pc, #488]	; (80061e0 <__ieee754_rem_pio2+0x328>)
 8005ff6:	f7fa f8ed 	bl	80001d4 <__adddf3>
 8005ffa:	f7fa fd3b 	bl	8000a74 <__aeabi_d2iz>
 8005ffe:	4605      	mov	r5, r0
 8006000:	f7fa fa34 	bl	800046c <__aeabi_i2d>
 8006004:	a364      	add	r3, pc, #400	; (adr r3, 8006198 <__ieee754_rem_pio2+0x2e0>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600e:	f7fa fa97 	bl	8000540 <__aeabi_dmul>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa f8d9 	bl	80001d0 <__aeabi_dsub>
 800601e:	a360      	add	r3, pc, #384	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x2e8>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	4682      	mov	sl, r0
 8006026:	468b      	mov	fp, r1
 8006028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602c:	f7fa fa88 	bl	8000540 <__aeabi_dmul>
 8006030:	2d1f      	cmp	r5, #31
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	dc0c      	bgt.n	8006052 <__ieee754_rem_pio2+0x19a>
 8006038:	1e6a      	subs	r2, r5, #1
 800603a:	4b6a      	ldr	r3, [pc, #424]	; (80061e4 <__ieee754_rem_pio2+0x32c>)
 800603c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006040:	4543      	cmp	r3, r8
 8006042:	d006      	beq.n	8006052 <__ieee754_rem_pio2+0x19a>
 8006044:	4632      	mov	r2, r6
 8006046:	463b      	mov	r3, r7
 8006048:	4650      	mov	r0, sl
 800604a:	4659      	mov	r1, fp
 800604c:	f7fa f8c0 	bl	80001d0 <__aeabi_dsub>
 8006050:	e00e      	b.n	8006070 <__ieee754_rem_pio2+0x1b8>
 8006052:	4632      	mov	r2, r6
 8006054:	463b      	mov	r3, r7
 8006056:	4650      	mov	r0, sl
 8006058:	4659      	mov	r1, fp
 800605a:	f7fa f8b9 	bl	80001d0 <__aeabi_dsub>
 800605e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	9a05      	ldr	r2, [sp, #20]
 8006066:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b10      	cmp	r3, #16
 800606e:	dc02      	bgt.n	8006076 <__ieee754_rem_pio2+0x1be>
 8006070:	e9c4 0100 	strd	r0, r1, [r4]
 8006074:	e039      	b.n	80060ea <__ieee754_rem_pio2+0x232>
 8006076:	a34c      	add	r3, pc, #304	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x2f0>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006080:	f7fa fa5e 	bl	8000540 <__aeabi_dmul>
 8006084:	4606      	mov	r6, r0
 8006086:	460f      	mov	r7, r1
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4650      	mov	r0, sl
 800608e:	4659      	mov	r1, fp
 8006090:	f7fa f89e 	bl	80001d0 <__aeabi_dsub>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4680      	mov	r8, r0
 800609a:	4689      	mov	r9, r1
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa f896 	bl	80001d0 <__aeabi_dsub>
 80060a4:	4632      	mov	r2, r6
 80060a6:	463b      	mov	r3, r7
 80060a8:	f7fa f892 	bl	80001d0 <__aeabi_dsub>
 80060ac:	a340      	add	r3, pc, #256	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2f8>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	4606      	mov	r6, r0
 80060b4:	460f      	mov	r7, r1
 80060b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ba:	f7fa fa41 	bl	8000540 <__aeabi_dmul>
 80060be:	4632      	mov	r2, r6
 80060c0:	463b      	mov	r3, r7
 80060c2:	f7fa f885 	bl	80001d0 <__aeabi_dsub>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f7fa f87d 	bl	80001d0 <__aeabi_dsub>
 80060d6:	9a05      	ldr	r2, [sp, #20]
 80060d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b31      	cmp	r3, #49	; 0x31
 80060e0:	dc20      	bgt.n	8006124 <__ieee754_rem_pio2+0x26c>
 80060e2:	e9c4 0100 	strd	r0, r1, [r4]
 80060e6:	46c2      	mov	sl, r8
 80060e8:	46cb      	mov	fp, r9
 80060ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80060ee:	4650      	mov	r0, sl
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	4659      	mov	r1, fp
 80060f6:	f7fa f86b 	bl	80001d0 <__aeabi_dsub>
 80060fa:	463b      	mov	r3, r7
 80060fc:	4632      	mov	r2, r6
 80060fe:	f7fa f867 	bl	80001d0 <__aeabi_dsub>
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800610a:	f6bf af11 	bge.w	8005f30 <__ieee754_rem_pio2+0x78>
 800610e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	f8c4 8000 	str.w	r8, [r4]
 8006118:	60a0      	str	r0, [r4, #8]
 800611a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800611e:	60e3      	str	r3, [r4, #12]
 8006120:	426d      	negs	r5, r5
 8006122:	e705      	b.n	8005f30 <__ieee754_rem_pio2+0x78>
 8006124:	a326      	add	r3, pc, #152	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x308>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800612e:	f7fa fa07 	bl	8000540 <__aeabi_dmul>
 8006132:	4606      	mov	r6, r0
 8006134:	460f      	mov	r7, r1
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa f847 	bl	80001d0 <__aeabi_dsub>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4682      	mov	sl, r0
 8006148:	468b      	mov	fp, r1
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa f83f 	bl	80001d0 <__aeabi_dsub>
 8006152:	4632      	mov	r2, r6
 8006154:	463b      	mov	r3, r7
 8006156:	f7fa f83b 	bl	80001d0 <__aeabi_dsub>
 800615a:	a31b      	add	r3, pc, #108	; (adr r3, 80061c8 <__ieee754_rem_pio2+0x310>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	4606      	mov	r6, r0
 8006162:	460f      	mov	r7, r1
 8006164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006168:	f7fa f9ea 	bl	8000540 <__aeabi_dmul>
 800616c:	4632      	mov	r2, r6
 800616e:	463b      	mov	r3, r7
 8006170:	f7fa f82e 	bl	80001d0 <__aeabi_dsub>
 8006174:	4606      	mov	r6, r0
 8006176:	460f      	mov	r7, r1
 8006178:	e764      	b.n	8006044 <__ieee754_rem_pio2+0x18c>
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <__ieee754_rem_pio2+0x330>)
 800617c:	4598      	cmp	r8, r3
 800617e:	dd35      	ble.n	80061ec <__ieee754_rem_pio2+0x334>
 8006180:	ee10 2a10 	vmov	r2, s0
 8006184:	463b      	mov	r3, r7
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa f821 	bl	80001d0 <__aeabi_dsub>
 800618e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006192:	e9c4 0100 	strd	r0, r1, [r4]
 8006196:	e6a1      	b.n	8005edc <__ieee754_rem_pio2+0x24>
 8006198:	54400000 	.word	0x54400000
 800619c:	3ff921fb 	.word	0x3ff921fb
 80061a0:	1a626331 	.word	0x1a626331
 80061a4:	3dd0b461 	.word	0x3dd0b461
 80061a8:	1a600000 	.word	0x1a600000
 80061ac:	3dd0b461 	.word	0x3dd0b461
 80061b0:	2e037073 	.word	0x2e037073
 80061b4:	3ba3198a 	.word	0x3ba3198a
 80061b8:	6dc9c883 	.word	0x6dc9c883
 80061bc:	3fe45f30 	.word	0x3fe45f30
 80061c0:	2e000000 	.word	0x2e000000
 80061c4:	3ba3198a 	.word	0x3ba3198a
 80061c8:	252049c1 	.word	0x252049c1
 80061cc:	397b839a 	.word	0x397b839a
 80061d0:	3fe921fb 	.word	0x3fe921fb
 80061d4:	4002d97b 	.word	0x4002d97b
 80061d8:	3ff921fb 	.word	0x3ff921fb
 80061dc:	413921fb 	.word	0x413921fb
 80061e0:	3fe00000 	.word	0x3fe00000
 80061e4:	08006e88 	.word	0x08006e88
 80061e8:	7fefffff 	.word	0x7fefffff
 80061ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80061f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80061f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80061f8:	4630      	mov	r0, r6
 80061fa:	460f      	mov	r7, r1
 80061fc:	f7fa fc3a 	bl	8000a74 <__aeabi_d2iz>
 8006200:	f7fa f934 	bl	800046c <__aeabi_i2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006210:	f7f9 ffde 	bl	80001d0 <__aeabi_dsub>
 8006214:	2200      	movs	r2, #0
 8006216:	4b1f      	ldr	r3, [pc, #124]	; (8006294 <__ieee754_rem_pio2+0x3dc>)
 8006218:	f7fa f992 	bl	8000540 <__aeabi_dmul>
 800621c:	460f      	mov	r7, r1
 800621e:	4606      	mov	r6, r0
 8006220:	f7fa fc28 	bl	8000a74 <__aeabi_d2iz>
 8006224:	f7fa f922 	bl	800046c <__aeabi_i2d>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006234:	f7f9 ffcc 	bl	80001d0 <__aeabi_dsub>
 8006238:	2200      	movs	r2, #0
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <__ieee754_rem_pio2+0x3dc>)
 800623c:	f7fa f980 	bl	8000540 <__aeabi_dmul>
 8006240:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006244:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006248:	f04f 0803 	mov.w	r8, #3
 800624c:	2600      	movs	r6, #0
 800624e:	2700      	movs	r7, #0
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006258:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800625c:	f7fa fbd8 	bl	8000a10 <__aeabi_dcmpeq>
 8006260:	b9b0      	cbnz	r0, 8006290 <__ieee754_rem_pio2+0x3d8>
 8006262:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <__ieee754_rem_pio2+0x3e0>)
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	2302      	movs	r3, #2
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	462a      	mov	r2, r5
 800626c:	4643      	mov	r3, r8
 800626e:	4621      	mov	r1, r4
 8006270:	a806      	add	r0, sp, #24
 8006272:	f000 f8dd 	bl	8006430 <__kernel_rem_pio2>
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	4605      	mov	r5, r0
 800627c:	f6bf ae58 	bge.w	8005f30 <__ieee754_rem_pio2+0x78>
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800628e:	e746      	b.n	800611e <__ieee754_rem_pio2+0x266>
 8006290:	46d0      	mov	r8, sl
 8006292:	e7dd      	b.n	8006250 <__ieee754_rem_pio2+0x398>
 8006294:	41700000 	.word	0x41700000
 8006298:	08006f08 	.word	0x08006f08
 800629c:	00000000 	.word	0x00000000

080062a0 <__kernel_cos>:
 80062a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	ec59 8b10 	vmov	r8, r9, d0
 80062a8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80062ac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80062b0:	ed2d 8b02 	vpush	{d8}
 80062b4:	eeb0 8a41 	vmov.f32	s16, s2
 80062b8:	eef0 8a61 	vmov.f32	s17, s3
 80062bc:	da07      	bge.n	80062ce <__kernel_cos+0x2e>
 80062be:	ee10 0a10 	vmov	r0, s0
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa fbd6 	bl	8000a74 <__aeabi_d2iz>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f000 8089 	beq.w	80063e0 <__kernel_cos+0x140>
 80062ce:	4642      	mov	r2, r8
 80062d0:	464b      	mov	r3, r9
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f7fa f933 	bl	8000540 <__aeabi_dmul>
 80062da:	2200      	movs	r2, #0
 80062dc:	4b4e      	ldr	r3, [pc, #312]	; (8006418 <__kernel_cos+0x178>)
 80062de:	4604      	mov	r4, r0
 80062e0:	460d      	mov	r5, r1
 80062e2:	f7fa f92d 	bl	8000540 <__aeabi_dmul>
 80062e6:	a340      	add	r3, pc, #256	; (adr r3, 80063e8 <__kernel_cos+0x148>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	4682      	mov	sl, r0
 80062ee:	468b      	mov	fp, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7fa f924 	bl	8000540 <__aeabi_dmul>
 80062f8:	a33d      	add	r3, pc, #244	; (adr r3, 80063f0 <__kernel_cos+0x150>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7f9 ff69 	bl	80001d4 <__adddf3>
 8006302:	4622      	mov	r2, r4
 8006304:	462b      	mov	r3, r5
 8006306:	f7fa f91b 	bl	8000540 <__aeabi_dmul>
 800630a:	a33b      	add	r3, pc, #236	; (adr r3, 80063f8 <__kernel_cos+0x158>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ff5e 	bl	80001d0 <__aeabi_dsub>
 8006314:	4622      	mov	r2, r4
 8006316:	462b      	mov	r3, r5
 8006318:	f7fa f912 	bl	8000540 <__aeabi_dmul>
 800631c:	a338      	add	r3, pc, #224	; (adr r3, 8006400 <__kernel_cos+0x160>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ff57 	bl	80001d4 <__adddf3>
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f7fa f909 	bl	8000540 <__aeabi_dmul>
 800632e:	a336      	add	r3, pc, #216	; (adr r3, 8006408 <__kernel_cos+0x168>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7f9 ff4c 	bl	80001d0 <__aeabi_dsub>
 8006338:	4622      	mov	r2, r4
 800633a:	462b      	mov	r3, r5
 800633c:	f7fa f900 	bl	8000540 <__aeabi_dmul>
 8006340:	a333      	add	r3, pc, #204	; (adr r3, 8006410 <__kernel_cos+0x170>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7f9 ff45 	bl	80001d4 <__adddf3>
 800634a:	4622      	mov	r2, r4
 800634c:	462b      	mov	r3, r5
 800634e:	f7fa f8f7 	bl	8000540 <__aeabi_dmul>
 8006352:	4622      	mov	r2, r4
 8006354:	462b      	mov	r3, r5
 8006356:	f7fa f8f3 	bl	8000540 <__aeabi_dmul>
 800635a:	ec53 2b18 	vmov	r2, r3, d8
 800635e:	4604      	mov	r4, r0
 8006360:	460d      	mov	r5, r1
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7fa f8eb 	bl	8000540 <__aeabi_dmul>
 800636a:	460b      	mov	r3, r1
 800636c:	4602      	mov	r2, r0
 800636e:	4629      	mov	r1, r5
 8006370:	4620      	mov	r0, r4
 8006372:	f7f9 ff2d 	bl	80001d0 <__aeabi_dsub>
 8006376:	4b29      	ldr	r3, [pc, #164]	; (800641c <__kernel_cos+0x17c>)
 8006378:	429e      	cmp	r6, r3
 800637a:	4680      	mov	r8, r0
 800637c:	4689      	mov	r9, r1
 800637e:	dc11      	bgt.n	80063a4 <__kernel_cos+0x104>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4650      	mov	r0, sl
 8006386:	4659      	mov	r1, fp
 8006388:	f7f9 ff22 	bl	80001d0 <__aeabi_dsub>
 800638c:	460b      	mov	r3, r1
 800638e:	4924      	ldr	r1, [pc, #144]	; (8006420 <__kernel_cos+0x180>)
 8006390:	4602      	mov	r2, r0
 8006392:	2000      	movs	r0, #0
 8006394:	f7f9 ff1c 	bl	80001d0 <__aeabi_dsub>
 8006398:	ecbd 8b02 	vpop	{d8}
 800639c:	ec41 0b10 	vmov	d0, r0, r1
 80063a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4b1f      	ldr	r3, [pc, #124]	; (8006424 <__kernel_cos+0x184>)
 80063a6:	491e      	ldr	r1, [pc, #120]	; (8006420 <__kernel_cos+0x180>)
 80063a8:	429e      	cmp	r6, r3
 80063aa:	bfcc      	ite	gt
 80063ac:	4d1e      	ldrgt	r5, [pc, #120]	; (8006428 <__kernel_cos+0x188>)
 80063ae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80063b2:	2400      	movs	r4, #0
 80063b4:	4622      	mov	r2, r4
 80063b6:	462b      	mov	r3, r5
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7f9 ff09 	bl	80001d0 <__aeabi_dsub>
 80063be:	4622      	mov	r2, r4
 80063c0:	4606      	mov	r6, r0
 80063c2:	460f      	mov	r7, r1
 80063c4:	462b      	mov	r3, r5
 80063c6:	4650      	mov	r0, sl
 80063c8:	4659      	mov	r1, fp
 80063ca:	f7f9 ff01 	bl	80001d0 <__aeabi_dsub>
 80063ce:	4642      	mov	r2, r8
 80063d0:	464b      	mov	r3, r9
 80063d2:	f7f9 fefd 	bl	80001d0 <__aeabi_dsub>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	e7d9      	b.n	8006394 <__kernel_cos+0xf4>
 80063e0:	2000      	movs	r0, #0
 80063e2:	490f      	ldr	r1, [pc, #60]	; (8006420 <__kernel_cos+0x180>)
 80063e4:	e7d8      	b.n	8006398 <__kernel_cos+0xf8>
 80063e6:	bf00      	nop
 80063e8:	be8838d4 	.word	0xbe8838d4
 80063ec:	bda8fae9 	.word	0xbda8fae9
 80063f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80063f4:	3e21ee9e 	.word	0x3e21ee9e
 80063f8:	809c52ad 	.word	0x809c52ad
 80063fc:	3e927e4f 	.word	0x3e927e4f
 8006400:	19cb1590 	.word	0x19cb1590
 8006404:	3efa01a0 	.word	0x3efa01a0
 8006408:	16c15177 	.word	0x16c15177
 800640c:	3f56c16c 	.word	0x3f56c16c
 8006410:	5555554c 	.word	0x5555554c
 8006414:	3fa55555 	.word	0x3fa55555
 8006418:	3fe00000 	.word	0x3fe00000
 800641c:	3fd33332 	.word	0x3fd33332
 8006420:	3ff00000 	.word	0x3ff00000
 8006424:	3fe90000 	.word	0x3fe90000
 8006428:	3fd20000 	.word	0x3fd20000
 800642c:	00000000 	.word	0x00000000

08006430 <__kernel_rem_pio2>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	ed2d 8b02 	vpush	{d8}
 8006438:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800643c:	1ed4      	subs	r4, r2, #3
 800643e:	9308      	str	r3, [sp, #32]
 8006440:	9101      	str	r1, [sp, #4]
 8006442:	4bc5      	ldr	r3, [pc, #788]	; (8006758 <__kernel_rem_pio2+0x328>)
 8006444:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006446:	9009      	str	r0, [sp, #36]	; 0x24
 8006448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	9b08      	ldr	r3, [sp, #32]
 8006450:	3b01      	subs	r3, #1
 8006452:	9307      	str	r3, [sp, #28]
 8006454:	2318      	movs	r3, #24
 8006456:	fb94 f4f3 	sdiv	r4, r4, r3
 800645a:	f06f 0317 	mvn.w	r3, #23
 800645e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006462:	fb04 3303 	mla	r3, r4, r3, r3
 8006466:	eb03 0a02 	add.w	sl, r3, r2
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	9a07      	ldr	r2, [sp, #28]
 800646e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006748 <__kernel_rem_pio2+0x318>
 8006472:	eb03 0802 	add.w	r8, r3, r2
 8006476:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006478:	1aa7      	subs	r7, r4, r2
 800647a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800647e:	ae22      	add	r6, sp, #136	; 0x88
 8006480:	2500      	movs	r5, #0
 8006482:	4545      	cmp	r5, r8
 8006484:	dd13      	ble.n	80064ae <__kernel_rem_pio2+0x7e>
 8006486:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006748 <__kernel_rem_pio2+0x318>
 800648a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800648e:	2600      	movs	r6, #0
 8006490:	9b04      	ldr	r3, [sp, #16]
 8006492:	429e      	cmp	r6, r3
 8006494:	dc32      	bgt.n	80064fc <__kernel_rem_pio2+0xcc>
 8006496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	9b08      	ldr	r3, [sp, #32]
 800649c:	199d      	adds	r5, r3, r6
 800649e:	ab22      	add	r3, sp, #136	; 0x88
 80064a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	ec59 8b18 	vmov	r8, r9, d8
 80064aa:	2700      	movs	r7, #0
 80064ac:	e01f      	b.n	80064ee <__kernel_rem_pio2+0xbe>
 80064ae:	42ef      	cmn	r7, r5
 80064b0:	d407      	bmi.n	80064c2 <__kernel_rem_pio2+0x92>
 80064b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80064b6:	f7f9 ffd9 	bl	800046c <__aeabi_i2d>
 80064ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80064be:	3501      	adds	r5, #1
 80064c0:	e7df      	b.n	8006482 <__kernel_rem_pio2+0x52>
 80064c2:	ec51 0b18 	vmov	r0, r1, d8
 80064c6:	e7f8      	b.n	80064ba <__kernel_rem_pio2+0x8a>
 80064c8:	9906      	ldr	r1, [sp, #24]
 80064ca:	9d02      	ldr	r5, [sp, #8]
 80064cc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80064d0:	9106      	str	r1, [sp, #24]
 80064d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80064d6:	9502      	str	r5, [sp, #8]
 80064d8:	f7fa f832 	bl	8000540 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7f9 fe76 	bl	80001d4 <__adddf3>
 80064e8:	3701      	adds	r7, #1
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	9b07      	ldr	r3, [sp, #28]
 80064f0:	429f      	cmp	r7, r3
 80064f2:	dde9      	ble.n	80064c8 <__kernel_rem_pio2+0x98>
 80064f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7c9      	b.n	8006490 <__kernel_rem_pio2+0x60>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	aa0e      	add	r2, sp, #56	; 0x38
 8006500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006504:	930c      	str	r3, [sp, #48]	; 0x30
 8006506:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006508:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800650c:	9c04      	ldr	r4, [sp, #16]
 800650e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006510:	ab9a      	add	r3, sp, #616	; 0x268
 8006512:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006516:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800651a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800651e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006522:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006526:	ab9a      	add	r3, sp, #616	; 0x268
 8006528:	445b      	add	r3, fp
 800652a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800652e:	2500      	movs	r5, #0
 8006530:	1b63      	subs	r3, r4, r5
 8006532:	2b00      	cmp	r3, #0
 8006534:	dc78      	bgt.n	8006628 <__kernel_rem_pio2+0x1f8>
 8006536:	4650      	mov	r0, sl
 8006538:	ec49 8b10 	vmov	d0, r8, r9
 800653c:	f000 fc00 	bl	8006d40 <scalbn>
 8006540:	ec57 6b10 	vmov	r6, r7, d0
 8006544:	2200      	movs	r2, #0
 8006546:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800654a:	ee10 0a10 	vmov	r0, s0
 800654e:	4639      	mov	r1, r7
 8006550:	f7f9 fff6 	bl	8000540 <__aeabi_dmul>
 8006554:	ec41 0b10 	vmov	d0, r0, r1
 8006558:	f000 fb6e 	bl	8006c38 <floor>
 800655c:	2200      	movs	r2, #0
 800655e:	ec51 0b10 	vmov	r0, r1, d0
 8006562:	4b7e      	ldr	r3, [pc, #504]	; (800675c <__kernel_rem_pio2+0x32c>)
 8006564:	f7f9 ffec 	bl	8000540 <__aeabi_dmul>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	f7f9 fe2e 	bl	80001d0 <__aeabi_dsub>
 8006574:	460f      	mov	r7, r1
 8006576:	4606      	mov	r6, r0
 8006578:	f7fa fa7c 	bl	8000a74 <__aeabi_d2iz>
 800657c:	9006      	str	r0, [sp, #24]
 800657e:	f7f9 ff75 	bl	800046c <__aeabi_i2d>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4630      	mov	r0, r6
 8006588:	4639      	mov	r1, r7
 800658a:	f7f9 fe21 	bl	80001d0 <__aeabi_dsub>
 800658e:	f1ba 0f00 	cmp.w	sl, #0
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	dd6c      	ble.n	8006672 <__kernel_rem_pio2+0x242>
 8006598:	1e62      	subs	r2, r4, #1
 800659a:	ab0e      	add	r3, sp, #56	; 0x38
 800659c:	f1ca 0118 	rsb	r1, sl, #24
 80065a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80065a4:	9d06      	ldr	r5, [sp, #24]
 80065a6:	fa40 f301 	asr.w	r3, r0, r1
 80065aa:	441d      	add	r5, r3
 80065ac:	408b      	lsls	r3, r1
 80065ae:	1ac0      	subs	r0, r0, r3
 80065b0:	ab0e      	add	r3, sp, #56	; 0x38
 80065b2:	9506      	str	r5, [sp, #24]
 80065b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80065b8:	f1ca 0317 	rsb	r3, sl, #23
 80065bc:	fa40 f303 	asr.w	r3, r0, r3
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	9b02      	ldr	r3, [sp, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dd62      	ble.n	800668e <__kernel_rem_pio2+0x25e>
 80065c8:	9b06      	ldr	r3, [sp, #24]
 80065ca:	2200      	movs	r2, #0
 80065cc:	3301      	adds	r3, #1
 80065ce:	9306      	str	r3, [sp, #24]
 80065d0:	4615      	mov	r5, r2
 80065d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80065d6:	4294      	cmp	r4, r2
 80065d8:	f300 8095 	bgt.w	8006706 <__kernel_rem_pio2+0x2d6>
 80065dc:	f1ba 0f00 	cmp.w	sl, #0
 80065e0:	dd07      	ble.n	80065f2 <__kernel_rem_pio2+0x1c2>
 80065e2:	f1ba 0f01 	cmp.w	sl, #1
 80065e6:	f000 80a2 	beq.w	800672e <__kernel_rem_pio2+0x2fe>
 80065ea:	f1ba 0f02 	cmp.w	sl, #2
 80065ee:	f000 80c1 	beq.w	8006774 <__kernel_rem_pio2+0x344>
 80065f2:	9b02      	ldr	r3, [sp, #8]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d14a      	bne.n	800668e <__kernel_rem_pio2+0x25e>
 80065f8:	4632      	mov	r2, r6
 80065fa:	463b      	mov	r3, r7
 80065fc:	2000      	movs	r0, #0
 80065fe:	4958      	ldr	r1, [pc, #352]	; (8006760 <__kernel_rem_pio2+0x330>)
 8006600:	f7f9 fde6 	bl	80001d0 <__aeabi_dsub>
 8006604:	4606      	mov	r6, r0
 8006606:	460f      	mov	r7, r1
 8006608:	2d00      	cmp	r5, #0
 800660a:	d040      	beq.n	800668e <__kernel_rem_pio2+0x25e>
 800660c:	4650      	mov	r0, sl
 800660e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006750 <__kernel_rem_pio2+0x320>
 8006612:	f000 fb95 	bl	8006d40 <scalbn>
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	ec53 2b10 	vmov	r2, r3, d0
 800661e:	f7f9 fdd7 	bl	80001d0 <__aeabi_dsub>
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	e032      	b.n	800668e <__kernel_rem_pio2+0x25e>
 8006628:	2200      	movs	r2, #0
 800662a:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <__kernel_rem_pio2+0x334>)
 800662c:	4640      	mov	r0, r8
 800662e:	4649      	mov	r1, r9
 8006630:	f7f9 ff86 	bl	8000540 <__aeabi_dmul>
 8006634:	f7fa fa1e 	bl	8000a74 <__aeabi_d2iz>
 8006638:	f7f9 ff18 	bl	800046c <__aeabi_i2d>
 800663c:	2200      	movs	r2, #0
 800663e:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <__kernel_rem_pio2+0x338>)
 8006640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006644:	f7f9 ff7c 	bl	8000540 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4640      	mov	r0, r8
 800664e:	4649      	mov	r1, r9
 8006650:	f7f9 fdbe 	bl	80001d0 <__aeabi_dsub>
 8006654:	f7fa fa0e 	bl	8000a74 <__aeabi_d2iz>
 8006658:	ab0e      	add	r3, sp, #56	; 0x38
 800665a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800665e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006666:	f7f9 fdb5 	bl	80001d4 <__adddf3>
 800666a:	3501      	adds	r5, #1
 800666c:	4680      	mov	r8, r0
 800666e:	4689      	mov	r9, r1
 8006670:	e75e      	b.n	8006530 <__kernel_rem_pio2+0x100>
 8006672:	d105      	bne.n	8006680 <__kernel_rem_pio2+0x250>
 8006674:	1e63      	subs	r3, r4, #1
 8006676:	aa0e      	add	r2, sp, #56	; 0x38
 8006678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800667c:	15c3      	asrs	r3, r0, #23
 800667e:	e79f      	b.n	80065c0 <__kernel_rem_pio2+0x190>
 8006680:	2200      	movs	r2, #0
 8006682:	4b3a      	ldr	r3, [pc, #232]	; (800676c <__kernel_rem_pio2+0x33c>)
 8006684:	f7fa f9e2 	bl	8000a4c <__aeabi_dcmpge>
 8006688:	2800      	cmp	r0, #0
 800668a:	d139      	bne.n	8006700 <__kernel_rem_pio2+0x2d0>
 800668c:	9002      	str	r0, [sp, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	2300      	movs	r3, #0
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7fa f9bb 	bl	8000a10 <__aeabi_dcmpeq>
 800669a:	2800      	cmp	r0, #0
 800669c:	f000 80c7 	beq.w	800682e <__kernel_rem_pio2+0x3fe>
 80066a0:	1e65      	subs	r5, r4, #1
 80066a2:	462b      	mov	r3, r5
 80066a4:	2200      	movs	r2, #0
 80066a6:	9904      	ldr	r1, [sp, #16]
 80066a8:	428b      	cmp	r3, r1
 80066aa:	da6a      	bge.n	8006782 <__kernel_rem_pio2+0x352>
 80066ac:	2a00      	cmp	r2, #0
 80066ae:	f000 8088 	beq.w	80067c2 <__kernel_rem_pio2+0x392>
 80066b2:	ab0e      	add	r3, sp, #56	; 0x38
 80066b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80066b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80b4 	beq.w	800682a <__kernel_rem_pio2+0x3fa>
 80066c2:	4650      	mov	r0, sl
 80066c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006750 <__kernel_rem_pio2+0x320>
 80066c8:	f000 fb3a 	bl	8006d40 <scalbn>
 80066cc:	00ec      	lsls	r4, r5, #3
 80066ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80066d0:	191e      	adds	r6, r3, r4
 80066d2:	ec59 8b10 	vmov	r8, r9, d0
 80066d6:	f106 0a08 	add.w	sl, r6, #8
 80066da:	462f      	mov	r7, r5
 80066dc:	2f00      	cmp	r7, #0
 80066de:	f280 80df 	bge.w	80068a0 <__kernel_rem_pio2+0x470>
 80066e2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006748 <__kernel_rem_pio2+0x318>
 80066e6:	f04f 0a00 	mov.w	sl, #0
 80066ea:	eba5 030a 	sub.w	r3, r5, sl
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f2c0 810a 	blt.w	8006908 <__kernel_rem_pio2+0x4d8>
 80066f4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006770 <__kernel_rem_pio2+0x340>
 80066f8:	ec59 8b18 	vmov	r8, r9, d8
 80066fc:	2700      	movs	r7, #0
 80066fe:	e0f5      	b.n	80068ec <__kernel_rem_pio2+0x4bc>
 8006700:	2302      	movs	r3, #2
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	e760      	b.n	80065c8 <__kernel_rem_pio2+0x198>
 8006706:	ab0e      	add	r3, sp, #56	; 0x38
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	b94d      	cbnz	r5, 8006722 <__kernel_rem_pio2+0x2f2>
 800670e:	b12b      	cbz	r3, 800671c <__kernel_rem_pio2+0x2ec>
 8006710:	a80e      	add	r0, sp, #56	; 0x38
 8006712:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006716:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800671a:	2301      	movs	r3, #1
 800671c:	3201      	adds	r2, #1
 800671e:	461d      	mov	r5, r3
 8006720:	e759      	b.n	80065d6 <__kernel_rem_pio2+0x1a6>
 8006722:	a80e      	add	r0, sp, #56	; 0x38
 8006724:	1acb      	subs	r3, r1, r3
 8006726:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800672a:	462b      	mov	r3, r5
 800672c:	e7f6      	b.n	800671c <__kernel_rem_pio2+0x2ec>
 800672e:	1e62      	subs	r2, r4, #1
 8006730:	ab0e      	add	r3, sp, #56	; 0x38
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800673a:	a90e      	add	r1, sp, #56	; 0x38
 800673c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006740:	e757      	b.n	80065f2 <__kernel_rem_pio2+0x1c2>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
	...
 8006754:	3ff00000 	.word	0x3ff00000
 8006758:	08007050 	.word	0x08007050
 800675c:	40200000 	.word	0x40200000
 8006760:	3ff00000 	.word	0x3ff00000
 8006764:	3e700000 	.word	0x3e700000
 8006768:	41700000 	.word	0x41700000
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	08007010 	.word	0x08007010
 8006774:	1e62      	subs	r2, r4, #1
 8006776:	ab0e      	add	r3, sp, #56	; 0x38
 8006778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006780:	e7db      	b.n	800673a <__kernel_rem_pio2+0x30a>
 8006782:	a90e      	add	r1, sp, #56	; 0x38
 8006784:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006788:	3b01      	subs	r3, #1
 800678a:	430a      	orrs	r2, r1
 800678c:	e78b      	b.n	80066a6 <__kernel_rem_pio2+0x276>
 800678e:	3301      	adds	r3, #1
 8006790:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006794:	2900      	cmp	r1, #0
 8006796:	d0fa      	beq.n	800678e <__kernel_rem_pio2+0x35e>
 8006798:	9a08      	ldr	r2, [sp, #32]
 800679a:	4422      	add	r2, r4
 800679c:	00d2      	lsls	r2, r2, #3
 800679e:	a922      	add	r1, sp, #136	; 0x88
 80067a0:	18e3      	adds	r3, r4, r3
 80067a2:	9206      	str	r2, [sp, #24]
 80067a4:	440a      	add	r2, r1
 80067a6:	9302      	str	r3, [sp, #8]
 80067a8:	f10b 0108 	add.w	r1, fp, #8
 80067ac:	f102 0308 	add.w	r3, r2, #8
 80067b0:	1c66      	adds	r6, r4, #1
 80067b2:	910a      	str	r1, [sp, #40]	; 0x28
 80067b4:	2500      	movs	r5, #0
 80067b6:	930d      	str	r3, [sp, #52]	; 0x34
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	42b3      	cmp	r3, r6
 80067bc:	da04      	bge.n	80067c8 <__kernel_rem_pio2+0x398>
 80067be:	461c      	mov	r4, r3
 80067c0:	e6a6      	b.n	8006510 <__kernel_rem_pio2+0xe0>
 80067c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c4:	2301      	movs	r3, #1
 80067c6:	e7e3      	b.n	8006790 <__kernel_rem_pio2+0x360>
 80067c8:	9b06      	ldr	r3, [sp, #24]
 80067ca:	18ef      	adds	r7, r5, r3
 80067cc:	ab22      	add	r3, sp, #136	; 0x88
 80067ce:	441f      	add	r7, r3
 80067d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067d6:	f7f9 fe49 	bl	800046c <__aeabi_i2d>
 80067da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067dc:	461c      	mov	r4, r3
 80067de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e0:	e9c7 0100 	strd	r0, r1, [r7]
 80067e4:	eb03 0b05 	add.w	fp, r3, r5
 80067e8:	2700      	movs	r7, #0
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	f04f 0900 	mov.w	r9, #0
 80067f2:	9b07      	ldr	r3, [sp, #28]
 80067f4:	429f      	cmp	r7, r3
 80067f6:	dd08      	ble.n	800680a <__kernel_rem_pio2+0x3da>
 80067f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fa:	aa72      	add	r2, sp, #456	; 0x1c8
 80067fc:	18eb      	adds	r3, r5, r3
 80067fe:	4413      	add	r3, r2
 8006800:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006804:	3601      	adds	r6, #1
 8006806:	3508      	adds	r5, #8
 8006808:	e7d6      	b.n	80067b8 <__kernel_rem_pio2+0x388>
 800680a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800680e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006812:	f7f9 fe95 	bl	8000540 <__aeabi_dmul>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4640      	mov	r0, r8
 800681c:	4649      	mov	r1, r9
 800681e:	f7f9 fcd9 	bl	80001d4 <__adddf3>
 8006822:	3701      	adds	r7, #1
 8006824:	4680      	mov	r8, r0
 8006826:	4689      	mov	r9, r1
 8006828:	e7e3      	b.n	80067f2 <__kernel_rem_pio2+0x3c2>
 800682a:	3d01      	subs	r5, #1
 800682c:	e741      	b.n	80066b2 <__kernel_rem_pio2+0x282>
 800682e:	f1ca 0000 	rsb	r0, sl, #0
 8006832:	ec47 6b10 	vmov	d0, r6, r7
 8006836:	f000 fa83 	bl	8006d40 <scalbn>
 800683a:	ec57 6b10 	vmov	r6, r7, d0
 800683e:	2200      	movs	r2, #0
 8006840:	4b99      	ldr	r3, [pc, #612]	; (8006aa8 <__kernel_rem_pio2+0x678>)
 8006842:	ee10 0a10 	vmov	r0, s0
 8006846:	4639      	mov	r1, r7
 8006848:	f7fa f900 	bl	8000a4c <__aeabi_dcmpge>
 800684c:	b1f8      	cbz	r0, 800688e <__kernel_rem_pio2+0x45e>
 800684e:	2200      	movs	r2, #0
 8006850:	4b96      	ldr	r3, [pc, #600]	; (8006aac <__kernel_rem_pio2+0x67c>)
 8006852:	4630      	mov	r0, r6
 8006854:	4639      	mov	r1, r7
 8006856:	f7f9 fe73 	bl	8000540 <__aeabi_dmul>
 800685a:	f7fa f90b 	bl	8000a74 <__aeabi_d2iz>
 800685e:	4680      	mov	r8, r0
 8006860:	f7f9 fe04 	bl	800046c <__aeabi_i2d>
 8006864:	2200      	movs	r2, #0
 8006866:	4b90      	ldr	r3, [pc, #576]	; (8006aa8 <__kernel_rem_pio2+0x678>)
 8006868:	f7f9 fe6a 	bl	8000540 <__aeabi_dmul>
 800686c:	460b      	mov	r3, r1
 800686e:	4602      	mov	r2, r0
 8006870:	4639      	mov	r1, r7
 8006872:	4630      	mov	r0, r6
 8006874:	f7f9 fcac 	bl	80001d0 <__aeabi_dsub>
 8006878:	f7fa f8fc 	bl	8000a74 <__aeabi_d2iz>
 800687c:	1c65      	adds	r5, r4, #1
 800687e:	ab0e      	add	r3, sp, #56	; 0x38
 8006880:	f10a 0a18 	add.w	sl, sl, #24
 8006884:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006888:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800688c:	e719      	b.n	80066c2 <__kernel_rem_pio2+0x292>
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7fa f8ef 	bl	8000a74 <__aeabi_d2iz>
 8006896:	ab0e      	add	r3, sp, #56	; 0x38
 8006898:	4625      	mov	r5, r4
 800689a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800689e:	e710      	b.n	80066c2 <__kernel_rem_pio2+0x292>
 80068a0:	ab0e      	add	r3, sp, #56	; 0x38
 80068a2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80068a6:	f7f9 fde1 	bl	800046c <__aeabi_i2d>
 80068aa:	4642      	mov	r2, r8
 80068ac:	464b      	mov	r3, r9
 80068ae:	f7f9 fe47 	bl	8000540 <__aeabi_dmul>
 80068b2:	2200      	movs	r2, #0
 80068b4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80068b8:	4b7c      	ldr	r3, [pc, #496]	; (8006aac <__kernel_rem_pio2+0x67c>)
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f7f9 fe3f 	bl	8000540 <__aeabi_dmul>
 80068c2:	3f01      	subs	r7, #1
 80068c4:	4680      	mov	r8, r0
 80068c6:	4689      	mov	r9, r1
 80068c8:	e708      	b.n	80066dc <__kernel_rem_pio2+0x2ac>
 80068ca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80068d6:	f7f9 fe33 	bl	8000540 <__aeabi_dmul>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4640      	mov	r0, r8
 80068e0:	4649      	mov	r1, r9
 80068e2:	f7f9 fc77 	bl	80001d4 <__adddf3>
 80068e6:	3701      	adds	r7, #1
 80068e8:	4680      	mov	r8, r0
 80068ea:	4689      	mov	r9, r1
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	429f      	cmp	r7, r3
 80068f0:	dc01      	bgt.n	80068f6 <__kernel_rem_pio2+0x4c6>
 80068f2:	45ba      	cmp	sl, r7
 80068f4:	dae9      	bge.n	80068ca <__kernel_rem_pio2+0x49a>
 80068f6:	ab4a      	add	r3, sp, #296	; 0x128
 80068f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068fc:	e9c3 8900 	strd	r8, r9, [r3]
 8006900:	f10a 0a01 	add.w	sl, sl, #1
 8006904:	3e08      	subs	r6, #8
 8006906:	e6f0      	b.n	80066ea <__kernel_rem_pio2+0x2ba>
 8006908:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800690a:	2b03      	cmp	r3, #3
 800690c:	d85b      	bhi.n	80069c6 <__kernel_rem_pio2+0x596>
 800690e:	e8df f003 	tbb	[pc, r3]
 8006912:	264a      	.short	0x264a
 8006914:	0226      	.short	0x0226
 8006916:	ab9a      	add	r3, sp, #616	; 0x268
 8006918:	441c      	add	r4, r3
 800691a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800691e:	46a2      	mov	sl, r4
 8006920:	46ab      	mov	fp, r5
 8006922:	f1bb 0f00 	cmp.w	fp, #0
 8006926:	dc6c      	bgt.n	8006a02 <__kernel_rem_pio2+0x5d2>
 8006928:	46a2      	mov	sl, r4
 800692a:	46ab      	mov	fp, r5
 800692c:	f1bb 0f01 	cmp.w	fp, #1
 8006930:	f300 8086 	bgt.w	8006a40 <__kernel_rem_pio2+0x610>
 8006934:	2000      	movs	r0, #0
 8006936:	2100      	movs	r1, #0
 8006938:	2d01      	cmp	r5, #1
 800693a:	f300 80a0 	bgt.w	8006a7e <__kernel_rem_pio2+0x64e>
 800693e:	9b02      	ldr	r3, [sp, #8]
 8006940:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006944:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 809e 	bne.w	8006a8a <__kernel_rem_pio2+0x65a>
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	e9c3 7800 	strd	r7, r8, [r3]
 8006954:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006958:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800695c:	e033      	b.n	80069c6 <__kernel_rem_pio2+0x596>
 800695e:	3408      	adds	r4, #8
 8006960:	ab4a      	add	r3, sp, #296	; 0x128
 8006962:	441c      	add	r4, r3
 8006964:	462e      	mov	r6, r5
 8006966:	2000      	movs	r0, #0
 8006968:	2100      	movs	r1, #0
 800696a:	2e00      	cmp	r6, #0
 800696c:	da3a      	bge.n	80069e4 <__kernel_rem_pio2+0x5b4>
 800696e:	9b02      	ldr	r3, [sp, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d03d      	beq.n	80069f0 <__kernel_rem_pio2+0x5c0>
 8006974:	4602      	mov	r2, r0
 8006976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800697a:	9c01      	ldr	r4, [sp, #4]
 800697c:	e9c4 2300 	strd	r2, r3, [r4]
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006988:	f7f9 fc22 	bl	80001d0 <__aeabi_dsub>
 800698c:	ae4c      	add	r6, sp, #304	; 0x130
 800698e:	2401      	movs	r4, #1
 8006990:	42a5      	cmp	r5, r4
 8006992:	da30      	bge.n	80069f6 <__kernel_rem_pio2+0x5c6>
 8006994:	9b02      	ldr	r3, [sp, #8]
 8006996:	b113      	cbz	r3, 800699e <__kernel_rem_pio2+0x56e>
 8006998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800699c:	4619      	mov	r1, r3
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80069a4:	e00f      	b.n	80069c6 <__kernel_rem_pio2+0x596>
 80069a6:	ab9a      	add	r3, sp, #616	; 0x268
 80069a8:	441c      	add	r4, r3
 80069aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80069ae:	2000      	movs	r0, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	da10      	bge.n	80069d8 <__kernel_rem_pio2+0x5a8>
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	b113      	cbz	r3, 80069c0 <__kernel_rem_pio2+0x590>
 80069ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069be:	4619      	mov	r1, r3
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	e9c3 0100 	strd	r0, r1, [r3]
 80069c6:	9b06      	ldr	r3, [sp, #24]
 80069c8:	f003 0007 	and.w	r0, r3, #7
 80069cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80069d0:	ecbd 8b02 	vpop	{d8}
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069dc:	f7f9 fbfa 	bl	80001d4 <__adddf3>
 80069e0:	3d01      	subs	r5, #1
 80069e2:	e7e6      	b.n	80069b2 <__kernel_rem_pio2+0x582>
 80069e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069e8:	f7f9 fbf4 	bl	80001d4 <__adddf3>
 80069ec:	3e01      	subs	r6, #1
 80069ee:	e7bc      	b.n	800696a <__kernel_rem_pio2+0x53a>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	e7c1      	b.n	800697a <__kernel_rem_pio2+0x54a>
 80069f6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80069fa:	f7f9 fbeb 	bl	80001d4 <__adddf3>
 80069fe:	3401      	adds	r4, #1
 8006a00:	e7c6      	b.n	8006990 <__kernel_rem_pio2+0x560>
 8006a02:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006a06:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	ec53 2b17 	vmov	r2, r3, d7
 8006a10:	4649      	mov	r1, r9
 8006a12:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a16:	f7f9 fbdd 	bl	80001d4 <__adddf3>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7f9 fbd3 	bl	80001d0 <__aeabi_dsub>
 8006a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a2e:	f7f9 fbd1 	bl	80001d4 <__adddf3>
 8006a32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a36:	e9ca 0100 	strd	r0, r1, [sl]
 8006a3a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006a3e:	e770      	b.n	8006922 <__kernel_rem_pio2+0x4f2>
 8006a40:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006a44:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006a48:	4630      	mov	r0, r6
 8006a4a:	ec53 2b17 	vmov	r2, r3, d7
 8006a4e:	4639      	mov	r1, r7
 8006a50:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a54:	f7f9 fbbe 	bl	80001d4 <__adddf3>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	f7f9 fbb4 	bl	80001d0 <__aeabi_dsub>
 8006a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6c:	f7f9 fbb2 	bl	80001d4 <__adddf3>
 8006a70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a74:	e9ca 0100 	strd	r0, r1, [sl]
 8006a78:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006a7c:	e756      	b.n	800692c <__kernel_rem_pio2+0x4fc>
 8006a7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a82:	f7f9 fba7 	bl	80001d4 <__adddf3>
 8006a86:	3d01      	subs	r5, #1
 8006a88:	e756      	b.n	8006938 <__kernel_rem_pio2+0x508>
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	9a01      	ldr	r2, [sp, #4]
 8006a8e:	601f      	str	r7, [r3, #0]
 8006a90:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006a94:	605c      	str	r4, [r3, #4]
 8006a96:	609d      	str	r5, [r3, #8]
 8006a98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a9c:	60d3      	str	r3, [r2, #12]
 8006a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aa2:	6110      	str	r0, [r2, #16]
 8006aa4:	6153      	str	r3, [r2, #20]
 8006aa6:	e78e      	b.n	80069c6 <__kernel_rem_pio2+0x596>
 8006aa8:	41700000 	.word	0x41700000
 8006aac:	3e700000 	.word	0x3e700000

08006ab0 <__kernel_sin>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	ec55 4b10 	vmov	r4, r5, d0
 8006ab8:	b085      	sub	sp, #20
 8006aba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006abe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006ac2:	ed8d 1b00 	vstr	d1, [sp]
 8006ac6:	9002      	str	r0, [sp, #8]
 8006ac8:	da06      	bge.n	8006ad8 <__kernel_sin+0x28>
 8006aca:	ee10 0a10 	vmov	r0, s0
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7f9 ffd0 	bl	8000a74 <__aeabi_d2iz>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d051      	beq.n	8006b7c <__kernel_sin+0xcc>
 8006ad8:	4622      	mov	r2, r4
 8006ada:	462b      	mov	r3, r5
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 fd2e 	bl	8000540 <__aeabi_dmul>
 8006ae4:	4682      	mov	sl, r0
 8006ae6:	468b      	mov	fp, r1
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fd26 	bl	8000540 <__aeabi_dmul>
 8006af4:	a341      	add	r3, pc, #260	; (adr r3, 8006bfc <__kernel_sin+0x14c>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	4680      	mov	r8, r0
 8006afc:	4689      	mov	r9, r1
 8006afe:	4650      	mov	r0, sl
 8006b00:	4659      	mov	r1, fp
 8006b02:	f7f9 fd1d 	bl	8000540 <__aeabi_dmul>
 8006b06:	a33f      	add	r3, pc, #252	; (adr r3, 8006c04 <__kernel_sin+0x154>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fb60 	bl	80001d0 <__aeabi_dsub>
 8006b10:	4652      	mov	r2, sl
 8006b12:	465b      	mov	r3, fp
 8006b14:	f7f9 fd14 	bl	8000540 <__aeabi_dmul>
 8006b18:	a33c      	add	r3, pc, #240	; (adr r3, 8006c0c <__kernel_sin+0x15c>)
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f7f9 fb59 	bl	80001d4 <__adddf3>
 8006b22:	4652      	mov	r2, sl
 8006b24:	465b      	mov	r3, fp
 8006b26:	f7f9 fd0b 	bl	8000540 <__aeabi_dmul>
 8006b2a:	a33a      	add	r3, pc, #232	; (adr r3, 8006c14 <__kernel_sin+0x164>)
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f7f9 fb4e 	bl	80001d0 <__aeabi_dsub>
 8006b34:	4652      	mov	r2, sl
 8006b36:	465b      	mov	r3, fp
 8006b38:	f7f9 fd02 	bl	8000540 <__aeabi_dmul>
 8006b3c:	a337      	add	r3, pc, #220	; (adr r3, 8006c1c <__kernel_sin+0x16c>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fb47 	bl	80001d4 <__adddf3>
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	b9db      	cbnz	r3, 8006b86 <__kernel_sin+0xd6>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4650      	mov	r0, sl
 8006b54:	4659      	mov	r1, fp
 8006b56:	f7f9 fcf3 	bl	8000540 <__aeabi_dmul>
 8006b5a:	a325      	add	r3, pc, #148	; (adr r3, 8006bf0 <__kernel_sin+0x140>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fb36 	bl	80001d0 <__aeabi_dsub>
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	f7f9 fcea 	bl	8000540 <__aeabi_dmul>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 fb2e 	bl	80001d4 <__adddf3>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	ec45 4b10 	vmov	d0, r4, r5
 8006b80:	b005      	add	sp, #20
 8006b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	2200      	movs	r2, #0
 8006b88:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <__kernel_sin+0x148>)
 8006b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b8e:	f7f9 fcd7 	bl	8000540 <__aeabi_dmul>
 8006b92:	4632      	mov	r2, r6
 8006b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b98:	463b      	mov	r3, r7
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fccf 	bl	8000540 <__aeabi_dmul>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006baa:	f7f9 fb11 	bl	80001d0 <__aeabi_dsub>
 8006bae:	4652      	mov	r2, sl
 8006bb0:	465b      	mov	r3, fp
 8006bb2:	f7f9 fcc5 	bl	8000540 <__aeabi_dmul>
 8006bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bba:	f7f9 fb09 	bl	80001d0 <__aeabi_dsub>
 8006bbe:	a30c      	add	r3, pc, #48	; (adr r3, 8006bf0 <__kernel_sin+0x140>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 fcb8 	bl	8000540 <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fafc 	bl	80001d4 <__adddf3>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4620      	mov	r0, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7f9 faf4 	bl	80001d0 <__aeabi_dsub>
 8006be8:	e7c6      	b.n	8006b78 <__kernel_sin+0xc8>
 8006bea:	bf00      	nop
 8006bec:	f3af 8000 	nop.w
 8006bf0:	55555549 	.word	0x55555549
 8006bf4:	3fc55555 	.word	0x3fc55555
 8006bf8:	3fe00000 	.word	0x3fe00000
 8006bfc:	5acfd57c 	.word	0x5acfd57c
 8006c00:	3de5d93a 	.word	0x3de5d93a
 8006c04:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c08:	3e5ae5e6 	.word	0x3e5ae5e6
 8006c0c:	57b1fe7d 	.word	0x57b1fe7d
 8006c10:	3ec71de3 	.word	0x3ec71de3
 8006c14:	19c161d5 	.word	0x19c161d5
 8006c18:	3f2a01a0 	.word	0x3f2a01a0
 8006c1c:	1110f8a6 	.word	0x1110f8a6
 8006c20:	3f811111 	.word	0x3f811111

08006c24 <fabs>:
 8006c24:	ec51 0b10 	vmov	r0, r1, d0
 8006c28:	ee10 2a10 	vmov	r2, s0
 8006c2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c30:	ec43 2b10 	vmov	d0, r2, r3
 8006c34:	4770      	bx	lr
	...

08006c38 <floor>:
 8006c38:	ec51 0b10 	vmov	r0, r1, d0
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006c44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006c48:	2e13      	cmp	r6, #19
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	ee10 5a10 	vmov	r5, s0
 8006c50:	4680      	mov	r8, r0
 8006c52:	dc34      	bgt.n	8006cbe <floor+0x86>
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	da16      	bge.n	8006c86 <floor+0x4e>
 8006c58:	a335      	add	r3, pc, #212	; (adr r3, 8006d30 <floor+0xf8>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fab9 	bl	80001d4 <__adddf3>
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	f7f9 fefb 	bl	8000a60 <__aeabi_dcmpgt>
 8006c6a:	b148      	cbz	r0, 8006c80 <floor+0x48>
 8006c6c:	2c00      	cmp	r4, #0
 8006c6e:	da59      	bge.n	8006d24 <floor+0xec>
 8006c70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006c74:	4a30      	ldr	r2, [pc, #192]	; (8006d38 <floor+0x100>)
 8006c76:	432b      	orrs	r3, r5
 8006c78:	2500      	movs	r5, #0
 8006c7a:	42ab      	cmp	r3, r5
 8006c7c:	bf18      	it	ne
 8006c7e:	4614      	movne	r4, r2
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	e025      	b.n	8006cd2 <floor+0x9a>
 8006c86:	4f2d      	ldr	r7, [pc, #180]	; (8006d3c <floor+0x104>)
 8006c88:	4137      	asrs	r7, r6
 8006c8a:	ea01 0307 	and.w	r3, r1, r7
 8006c8e:	4303      	orrs	r3, r0
 8006c90:	d01f      	beq.n	8006cd2 <floor+0x9a>
 8006c92:	a327      	add	r3, pc, #156	; (adr r3, 8006d30 <floor+0xf8>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fa9c 	bl	80001d4 <__adddf3>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f7f9 fede 	bl	8000a60 <__aeabi_dcmpgt>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d0eb      	beq.n	8006c80 <floor+0x48>
 8006ca8:	2c00      	cmp	r4, #0
 8006caa:	bfbe      	ittt	lt
 8006cac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006cb0:	fa43 f606 	asrlt.w	r6, r3, r6
 8006cb4:	19a4      	addlt	r4, r4, r6
 8006cb6:	ea24 0407 	bic.w	r4, r4, r7
 8006cba:	2500      	movs	r5, #0
 8006cbc:	e7e0      	b.n	8006c80 <floor+0x48>
 8006cbe:	2e33      	cmp	r6, #51	; 0x33
 8006cc0:	dd0b      	ble.n	8006cda <floor+0xa2>
 8006cc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006cc6:	d104      	bne.n	8006cd2 <floor+0x9a>
 8006cc8:	ee10 2a10 	vmov	r2, s0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	f7f9 fa81 	bl	80001d4 <__adddf3>
 8006cd2:	ec41 0b10 	vmov	d0, r0, r1
 8006cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cda:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce2:	fa23 f707 	lsr.w	r7, r3, r7
 8006ce6:	4207      	tst	r7, r0
 8006ce8:	d0f3      	beq.n	8006cd2 <floor+0x9a>
 8006cea:	a311      	add	r3, pc, #68	; (adr r3, 8006d30 <floor+0xf8>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f7f9 fa70 	bl	80001d4 <__adddf3>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f7f9 feb2 	bl	8000a60 <__aeabi_dcmpgt>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d0bf      	beq.n	8006c80 <floor+0x48>
 8006d00:	2c00      	cmp	r4, #0
 8006d02:	da02      	bge.n	8006d0a <floor+0xd2>
 8006d04:	2e14      	cmp	r6, #20
 8006d06:	d103      	bne.n	8006d10 <floor+0xd8>
 8006d08:	3401      	adds	r4, #1
 8006d0a:	ea25 0507 	bic.w	r5, r5, r7
 8006d0e:	e7b7      	b.n	8006c80 <floor+0x48>
 8006d10:	2301      	movs	r3, #1
 8006d12:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006d16:	fa03 f606 	lsl.w	r6, r3, r6
 8006d1a:	4435      	add	r5, r6
 8006d1c:	4545      	cmp	r5, r8
 8006d1e:	bf38      	it	cc
 8006d20:	18e4      	addcc	r4, r4, r3
 8006d22:	e7f2      	b.n	8006d0a <floor+0xd2>
 8006d24:	2500      	movs	r5, #0
 8006d26:	462c      	mov	r4, r5
 8006d28:	e7aa      	b.n	8006c80 <floor+0x48>
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w
 8006d30:	8800759c 	.word	0x8800759c
 8006d34:	7e37e43c 	.word	0x7e37e43c
 8006d38:	bff00000 	.word	0xbff00000
 8006d3c:	000fffff 	.word	0x000fffff

08006d40 <scalbn>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	ec55 4b10 	vmov	r4, r5, d0
 8006d46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	b9aa      	cbnz	r2, 8006d7c <scalbn+0x3c>
 8006d50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d54:	4323      	orrs	r3, r4
 8006d56:	d03b      	beq.n	8006dd0 <scalbn+0x90>
 8006d58:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <scalbn+0xe0>)
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	ee10 0a10 	vmov	r0, s0
 8006d62:	f7f9 fbed 	bl	8000540 <__aeabi_dmul>
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <scalbn+0xe4>)
 8006d68:	429e      	cmp	r6, r3
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	da12      	bge.n	8006d96 <scalbn+0x56>
 8006d70:	a327      	add	r3, pc, #156	; (adr r3, 8006e10 <scalbn+0xd0>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fbe3 	bl	8000540 <__aeabi_dmul>
 8006d7a:	e009      	b.n	8006d90 <scalbn+0x50>
 8006d7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006d80:	428a      	cmp	r2, r1
 8006d82:	d10c      	bne.n	8006d9e <scalbn+0x5e>
 8006d84:	ee10 2a10 	vmov	r2, s0
 8006d88:	4620      	mov	r0, r4
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f7f9 fa22 	bl	80001d4 <__adddf3>
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	e01c      	b.n	8006dd0 <scalbn+0x90>
 8006d96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	3a36      	subs	r2, #54	; 0x36
 8006d9e:	4432      	add	r2, r6
 8006da0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006da4:	428a      	cmp	r2, r1
 8006da6:	dd0b      	ble.n	8006dc0 <scalbn+0x80>
 8006da8:	ec45 4b11 	vmov	d1, r4, r5
 8006dac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006e18 <scalbn+0xd8>
 8006db0:	f000 f83c 	bl	8006e2c <copysign>
 8006db4:	a318      	add	r3, pc, #96	; (adr r3, 8006e18 <scalbn+0xd8>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	ec51 0b10 	vmov	r0, r1, d0
 8006dbe:	e7da      	b.n	8006d76 <scalbn+0x36>
 8006dc0:	2a00      	cmp	r2, #0
 8006dc2:	dd08      	ble.n	8006dd6 <scalbn+0x96>
 8006dc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006dc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006dcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006dd0:	ec45 4b10 	vmov	d0, r4, r5
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006dda:	da0d      	bge.n	8006df8 <scalbn+0xb8>
 8006ddc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006de0:	429e      	cmp	r6, r3
 8006de2:	ec45 4b11 	vmov	d1, r4, r5
 8006de6:	dce1      	bgt.n	8006dac <scalbn+0x6c>
 8006de8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006e10 <scalbn+0xd0>
 8006dec:	f000 f81e 	bl	8006e2c <copysign>
 8006df0:	a307      	add	r3, pc, #28	; (adr r3, 8006e10 <scalbn+0xd0>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	e7e0      	b.n	8006dba <scalbn+0x7a>
 8006df8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006dfc:	3236      	adds	r2, #54	; 0x36
 8006dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <scalbn+0xe8>)
 8006e0e:	e7b2      	b.n	8006d76 <scalbn+0x36>
 8006e10:	c2f8f359 	.word	0xc2f8f359
 8006e14:	01a56e1f 	.word	0x01a56e1f
 8006e18:	8800759c 	.word	0x8800759c
 8006e1c:	7e37e43c 	.word	0x7e37e43c
 8006e20:	43500000 	.word	0x43500000
 8006e24:	ffff3cb0 	.word	0xffff3cb0
 8006e28:	3c900000 	.word	0x3c900000

08006e2c <copysign>:
 8006e2c:	ec51 0b10 	vmov	r0, r1, d0
 8006e30:	ee11 0a90 	vmov	r0, s3
 8006e34:	ee10 2a10 	vmov	r2, s0
 8006e38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006e40:	ea41 0300 	orr.w	r3, r1, r0
 8006e44:	ec43 2b10 	vmov	d0, r2, r3
 8006e48:	4770      	bx	lr
	...

08006e4c <_init>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	bf00      	nop
 8006e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e52:	bc08      	pop	{r3}
 8006e54:	469e      	mov	lr, r3
 8006e56:	4770      	bx	lr

08006e58 <_fini>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr
