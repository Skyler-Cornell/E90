
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e4  080053e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  2000000c  080053f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  080053f8  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028ed  00000000  00000000  00033815  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  00036108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  000373c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a07  00000000  00000000  00038568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fad2  00000000  00000000  0005af6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d181b  00000000  00000000  0006aa41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  0013c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053a4 	.word	0x080053a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080053a4 	.word	0x080053a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <process_init>:
 */



void process_init()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  // initialize data structures
  init_LEDs();
 80004cc:	f000 ffaa 	bl	8001424 <init_LEDs>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <loop>:

void loop() {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
   // manage user controls here (LEDs, Pots)
  //update_LED(&LED1, 0,0,0);
  //update_LED(&LED2, 0,0,0);
  //update_LED(&LED3, 255,0,200);

}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <process>:

void process(int *in_sample, int *out_sample)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]

  // passthru
  *out_sample = *in_sample;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	601a      	str	r2, [r3, #0]
  if (*in_sample > 2000000 || *in_sample < -2000000 ) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <process+0x54>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	dc04      	bgt.n	800050a <process+0x26>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <process+0x58>)
 8000506:	4293      	cmp	r3, r2
 8000508:	da11      	bge.n	800052e <process+0x4a>
       update_LED(&LED1, 255,0,0);
 800050a:	2300      	movs	r3, #0
 800050c:	2200      	movs	r2, #0
 800050e:	21ff      	movs	r1, #255	; 0xff
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <process+0x5c>)
 8000512:	f000 ff61 	bl	80013d8 <update_LED>
       update_LED(&LED2, 255,0,0);
 8000516:	2300      	movs	r3, #0
 8000518:	2200      	movs	r2, #0
 800051a:	21ff      	movs	r1, #255	; 0xff
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <process+0x60>)
 800051e:	f000 ff5b 	bl	80013d8 <update_LED>
       update_LED(&LED3, 255,0,0);
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	21ff      	movs	r1, #255	; 0xff
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <process+0x64>)
 800052a:	f000 ff55 	bl	80013d8 <update_LED>
  }

}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	001e8480 	.word	0x001e8480
 800053c:	ffe17b80 	.word	0xffe17b80
 8000540:	200006ac 	.word	0x200006ac
 8000544:	200006c4 	.word	0x200006c4
 8000548:	200006b8 	.word	0x200006b8

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f001 f806 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f824 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 faea 	bl	8000b30 <MX_GPIO_Init>
  MX_DMA_Init();
 800055c:	f000 fac8 	bl	8000af0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000560:	f000 f89c 	bl	800069c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000564:	f000 f8ec 	bl	8000740 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000568:	f000 f918 	bl	800079c <MX_I2S2_Init>

  MX_TIM2_Init();
 800056c:	f000 f944 	bl	80007f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000570:	f000 f9a6 	bl	80008c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000574:	f000 fa1e 	bl	80009b4 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000578:	f000 fa8c 	bl	8000a94 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  process_init();
 800057c:	f7ff ffa4 	bl	80004c8 <process_init>

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 2);
 8000580:	2302      	movs	r3, #2
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <main+0x48>)
 8000584:	4904      	ldr	r1, [pc, #16]	; (8000598 <main+0x4c>)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <main+0x50>)
 8000588:	f002 fc9e 	bl	8002ec8 <HAL_I2SEx_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

      loop();
 800058c:	f7ff ffa2 	bl	80004d4 <loop>
 8000590:	e7fc      	b.n	800058c <main+0x40>
 8000592:	bf00      	nop
 8000594:	20000550 	.word	0x20000550
 8000598:	20000558 	.word	0x20000558
 800059c:	20000664 	.word	0x20000664

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b098      	sub	sp, #96	; 0x60
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fef0 	bl	8005394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <SystemClock_Config+0xf4>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <SystemClock_Config+0xf4>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	6413      	str	r3, [r2, #64]	; 0x40
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xf4>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xf8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a28      	ldr	r2, [pc, #160]	; (8000698 <SystemClock_Config+0xf8>)
 80005f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xf8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060a:	2301      	movs	r3, #1
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061e:	2308      	movs	r3, #8
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000622:	23a8      	movs	r3, #168	; 0xa8
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062a:	2307      	movs	r3, #7
 800062c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fa2a 	bl	8003a8c <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800063e:	f000 fb65 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fc85 	bl	8003f6c <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000668:	f000 fb50 	bl	8000d0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800066c:	2301      	movs	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fe51 	bl	8004324 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000688:	f000 fb40 	bl	8000d0c <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3760      	adds	r7, #96	; 0x60
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_ADC1_Init+0x98>)
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <MX_ADC1_Init+0x9c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_ADC1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_ADC1_Init+0x98>)
 80006bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_ADC1_Init+0x98>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_ADC1_Init+0x98>)
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_ADC1_Init+0xa0>)
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_ADC1_Init+0x98>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_ADC1_Init+0x98>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_ADC1_Init+0x98>)
 80006fe:	f000 ffc3 	bl	8001688 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000708:	f000 fb00 	bl	8000d0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800070c:	2301      	movs	r3, #1
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_ADC1_Init+0x98>)
 800071e:	f000 fff7 	bl	8001710 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 faf0 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000508 	.word	0x20000508
 8000738:	40012000 	.word	0x40012000
 800073c:	0f000001 	.word	0x0f000001

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f002 f819 	bl	80027b4 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fac0 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000006c 	.word	0x2000006c
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MX_I2S2_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007c4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007c8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007d8:	2201      	movs	r2, #1
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2S2_Init+0x54>)
 80007de:	f002 f921 	bl	8002a24 <HAL_I2S_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80007e8:	f000 fa90 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000664 	.word	0x20000664
 80007f4:	40003800 	.word	0x40003800

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_TIM2_Init+0xc4>)
 800081c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000820:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_TIM2_Init+0xc4>)
 8000824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_TIM2_Init+0xc4>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 254;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_TIM2_Init+0xc4>)
 8000832:	22fe      	movs	r2, #254	; 0xfe
 8000834:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM2_Init+0xc4>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_TIM2_Init+0xc4>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000842:	481e      	ldr	r0, [pc, #120]	; (80008bc <MX_TIM2_Init+0xc4>)
 8000844:	f003 feaa 	bl	800459c <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800084e:	f000 fa5d 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	4619      	mov	r1, r3
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <MX_TIM2_Init+0xc4>)
 8000862:	f004 fa41 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800086c:	f000 fa4e 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM2_Init+0xc4>)
 8000888:	f003 fef2 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000892:	f000 fa3b 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	220c      	movs	r2, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM2_Init+0xc4>)
 800089e:	f003 fee7 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008a8:	f000 fa30 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM2_Init+0xc4>)
 80008ae:	f000 fc1f 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000560 	.word	0x20000560

080008c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <MX_TIM3_Init+0xec>)
 80008e4:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <MX_TIM3_Init+0xf0>)
 80008e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <MX_TIM3_Init+0xec>)
 80008ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_TIM3_Init+0xec>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_TIM3_Init+0xec>)
 80008f8:	22fe      	movs	r2, #254	; 0xfe
 80008fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_TIM3_Init+0xec>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_TIM3_Init+0xec>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <MX_TIM3_Init+0xec>)
 800090a:	f003 fe47 	bl	800459c <HAL_TIM_PWM_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f9fa 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4619      	mov	r1, r3
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_TIM3_Init+0xec>)
 8000928:	f004 f9de 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000932:	f000 f9eb 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000936:	2360      	movs	r3, #96	; 0x60
 8000938:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	4817      	ldr	r0, [pc, #92]	; (80009ac <MX_TIM3_Init+0xec>)
 800094e:	f003 fe8f 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000958:	f000 f9d8 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2204      	movs	r2, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <MX_TIM3_Init+0xec>)
 8000964:	f003 fe84 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800096e:	f000 f9cd 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2208      	movs	r2, #8
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_TIM3_Init+0xec>)
 800097a:	f003 fe79 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000984:	f000 f9c2 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	220c      	movs	r2, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM3_Init+0xec>)
 8000990:	f003 fe6e 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800099a:	f000 f9b7 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM3_Init+0xec>)
 80009a0:	f000 fba6 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200004c8 	.word	0x200004c8
 80009b0:	40000400 	.word	0x40000400

080009b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009d8:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <MX_TIM4_Init+0xdc>)
 80009da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 254;
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009ec:	22fe      	movs	r2, #254	; 0xfe
 80009ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_TIM4_Init+0xd8>)
 80009fe:	f003 fdcd 	bl	800459c <HAL_TIM_PWM_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 f980 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a14:	f107 0320 	add.w	r3, r7, #32
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481c      	ldr	r0, [pc, #112]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a1c:	f004 f964 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a26:	f000 f971 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2a:	2360      	movs	r3, #96	; 0x60
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a42:	f003 fe15 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a4c:	f000 f95e 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a58:	f003 fe0a 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a62:	f000 f953 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2208      	movs	r2, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a6e:	f003 fdff 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000a78:	f000 f948 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM4_Init+0xd8>)
 8000a7e:	f000 fb37 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000002c 	.word	0x2000002c
 8000a90:	40000800 	.word	0x40000800

08000a94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	f002 feba 	bl	8003850 <HAL_PCD_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f000 f913 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000c0 	.word	0x200000c0

08000af0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DMA_Init+0x3c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <MX_DMA_Init+0x3c>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DMA_Init+0x3c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	200e      	movs	r0, #14
 8000b18:	f001 f8f3 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b1c:	200e      	movs	r0, #14
 8000b1e:	f001 f90c 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a36      	ldr	r2, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000bf4:	481b      	ldr	r0, [pc, #108]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000bf6:	f001 fdc3 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2107      	movs	r1, #7
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <MX_GPIO_Init+0x138>)
 8000c00:	f001 fdbe 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000c1a:	f001 fc17 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000c38:	f001 fc08 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0x138>)
 8000c54:	f001 fbfa 	bl	800244c <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	041b      	lsls	r3, r3, #16
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8000c7c:	8852      	ldrh	r2, [r2, #2]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	121b      	asrs	r3, r3, #8
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8000c84:	6013      	str	r3, [r2, #0]

  // do audio processing
  process(&in_sample, &out_sample);
 8000c86:	490b      	ldr	r1, [pc, #44]	; (8000cb4 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8000c8a:	f7ff fc2b 	bl	80004e4 <process>

  //place processed sample into tx_buf
  tx_buf[0] = (out_sample>>8) & 0xFFFF;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	121b      	asrs	r3, r3, #8
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000c98:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = out_sample & 0xFFFF;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000ca2:	805a      	strh	r2, [r3, #2]


}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000550 	.word	0x20000550
 8000cb0:	200005a0 	.word	0x200005a0
 8000cb4:	20000028 	.word	0x20000028
 8000cb8:	20000558 	.word	0x20000558

08000cbc <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8000cc6:	889b      	ldrh	r3, [r3, #4]
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8000ccc:	88d2      	ldrh	r2, [r2, #6]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	121b      	asrs	r3, r3, #8
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 8000cd4:	6013      	str	r3, [r2, #0]

  // does audio processing
  process(&in_sample, &out_sample);
 8000cd6:	490b      	ldr	r1, [pc, #44]	; (8000d04 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 8000cda:	f7ff fc03 	bl	80004e4 <process>

  //place processed sample into tx_buf
  tx_buf[2] = (out_sample>>8) & 0xFFFF;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	121b      	asrs	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000ce8:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = out_sample & 0xFFFF;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000cf2:	80da      	strh	r2, [r3, #6]

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000550 	.word	0x20000550
 8000d00:	200005a0 	.word	0x200005a0
 8000d04:	20000028 	.word	0x20000028
 8000d08:	20000558 	.word	0x20000558

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_ADC_MspInit+0x7c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d127      	bne.n	8000dde <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_ADC_MspInit+0x80>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <HAL_ADC_MspInit+0x80>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_ADC_MspInit+0x80>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_ADC_MspInit+0x80>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_ADC_MspInit+0x80>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_ADC_MspInit+0x80>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dc6:	230e      	movs	r3, #14
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_ADC_MspInit+0x84>)
 8000dda:	f001 fb37 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012000 	.word	0x40012000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_I2C_MspInit+0x84>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12b      	bne.n	8000e6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e32:	23c0      	movs	r3, #192	; 0xc0
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e36:	2312      	movs	r3, #18
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e42:	2304      	movs	r3, #4
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <HAL_I2C_MspInit+0x8c>)
 8000e4e:	f001 fafd 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020400 	.word	0x40020400

08000e84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a65      	ldr	r2, [pc, #404]	; (8001038 <HAL_I2S_MspInit+0x1b4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f040 80c4 	bne.w	8001030 <HAL_I2S_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	4b63      	ldr	r3, [pc, #396]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a62      	ldr	r2, [pc, #392]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b60      	ldr	r3, [pc, #384]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b5c      	ldr	r3, [pc, #368]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a5b      	ldr	r2, [pc, #364]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b59      	ldr	r3, [pc, #356]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	4b55      	ldr	r3, [pc, #340]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a54      	ldr	r2, [pc, #336]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b52      	ldr	r3, [pc, #328]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efc:	2304      	movs	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	484a      	ldr	r0, [pc, #296]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f18:	f001 fa98 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000f1c:	2348      	movs	r3, #72	; 0x48
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4842      	ldr	r0, [pc, #264]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f38:	f001 fa88 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	483a      	ldr	r0, [pc, #232]	; (8001044 <HAL_I2S_MspInit+0x1c0>)
 8000f5a:	f001 fa77 	bl	800244c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f60:	4a3a      	ldr	r2, [pc, #232]	; (800104c <HAL_I2S_MspInit+0x1c8>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f66:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f6a:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f96:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000fa4:	4828      	ldr	r0, [pc, #160]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fa6:	f000 fee3 	bl	8001d70 <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8000fb0:	f7ff feac 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a24      	ldr	r2, [pc, #144]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_I2S_MspInit+0x1d0>)
 8000fc4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fce:	2240      	movs	r2, #64	; 0x40
 8000fd0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fde:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fee:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8001006:	f000 feb3 	bl	8001d70 <HAL_DMA_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 8001010:	f7ff fe7c 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_I2S_MspInit+0x1cc>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2024      	movs	r0, #36	; 0x24
 8001026:	f000 fe6c 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800102a:	2024      	movs	r0, #36	; 0x24
 800102c:	f000 fe85 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40003800 	.word	0x40003800
 800103c:	40023800 	.word	0x40023800
 8001040:	40020800 	.word	0x40020800
 8001044:	40020400 	.word	0x40020400
 8001048:	200005a4 	.word	0x200005a4
 800104c:	40026058 	.word	0x40026058
 8001050:	20000604 	.word	0x20000604
 8001054:	40026070 	.word	0x40026070

08001058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001068:	d10e      	bne.n	8001088 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001086:	e026      	b.n	80010d6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <HAL_TIM_PWM_MspInit+0x90>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10e      	bne.n	80010b0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
}
 80010ae:	e012      	b.n	80010d6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_TIM_PWM_MspInit+0x94>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10d      	bne.n	80010d6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_TIM_PWM_MspInit+0x8c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40000400 	.word	0x40000400
 80010ec:	40000800 	.word	0x40000800

080010f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001110:	d13d      	bne.n	800118e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114a:	2301      	movs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800115a:	2301      	movs	r3, #1
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4840      	ldr	r0, [pc, #256]	; (8001268 <HAL_TIM_MspPostInit+0x178>)
 8001166:	f001 f971 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800116a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4839      	ldr	r0, [pc, #228]	; (800126c <HAL_TIM_MspPostInit+0x17c>)
 8001188:	f001 f960 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800118c:	e065      	b.n	800125a <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a37      	ldr	r2, [pc, #220]	; (8001270 <HAL_TIM_MspPostInit+0x180>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d13c      	bne.n	8001212 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a30      	ldr	r2, [pc, #192]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a29      	ldr	r2, [pc, #164]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d0:	23c0      	movs	r3, #192	; 0xc0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	481f      	ldr	r0, [pc, #124]	; (8001268 <HAL_TIM_MspPostInit+0x178>)
 80011ec:	f001 f92e 	bl	800244c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f0:	2303      	movs	r3, #3
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001200:	2302      	movs	r3, #2
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <HAL_TIM_MspPostInit+0x17c>)
 800120c:	f001 f91e 	bl	800244c <HAL_GPIO_Init>
}
 8001210:	e023      	b.n	800125a <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_TIM_MspPostInit+0x184>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d11e      	bne.n	800125a <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_TIM_MspPostInit+0x174>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001238:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800124a:	2302      	movs	r3, #2
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <HAL_TIM_MspPostInit+0x188>)
 8001256:	f001 f8f9 	bl	800244c <HAL_GPIO_Init>
}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40000400 	.word	0x40000400
 8001274:	40000800 	.word	0x40000800
 8001278:	40020c00 	.word	0x40020c00

0800127c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129c:	d132      	bne.n	8001304 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012cc:	230a      	movs	r3, #10
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <HAL_PCD_MspInit+0x94>)
 80012d8:	f001 f8b8 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e6:	6353      	str	r3, [r2, #52]	; 0x34
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	6453      	str	r3, [r2, #68]	; 0x44
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_PCD_MspInit+0x90>)
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 f94c 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <DMA1_Stream3_IRQHandler+0x10>)
 8001376:	f000 fe01 	bl	8001f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200005a4 	.word	0x200005a4

08001384 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <DMA1_Stream4_IRQHandler+0x10>)
 800138a:	f000 fdf7 	bl	8001f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000604 	.word	0x20000604

08001398 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <SPI2_IRQHandler+0x10>)
 800139e:	f001 fc81 	bl	8002ca4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000664 	.word	0x20000664

080013ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <SystemInit+0x28>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <SystemInit+0x28>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SystemInit+0x28>)
 80013c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c6:	609a      	str	r2, [r3, #8]
#endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <update_LED>:
RGB_LED_t LED1;
RGB_LED_t LED2;
RGB_LED_t LED3;


void update_LED(RGB_LED_t *led, uint8_t R, uint8_t G, uint8_t B) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	70fb      	strb	r3, [r7, #3]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70bb      	strb	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	707b      	strb	r3, [r7, #1]

  *(led->R_CCR) = 255-R;
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	601a      	str	r2, [r3, #0]
  *(led->G_CCR) = 255-G;
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	601a      	str	r2, [r3, #0]
  *(led->B_CCR) = 255-B;
 800140a:	787b      	ldrb	r3, [r7, #1]
 800140c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	601a      	str	r2, [r3, #0]

}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <init_LEDs>:

/*
 * Assign Timers and channels to each LED Struct and start the pWM
 *
 */
void init_LEDs() {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
   * compare registers, which can be done by dereferencing the R_CCR field and
   * changing its contents, to change the color.
   */

  //LED 1
  LED1.R_CCR = &(htim4.Instance->CCR1);
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <init_LEDs+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3334      	adds	r3, #52	; 0x34
 800142e:	4a32      	ldr	r2, [pc, #200]	; (80014f8 <init_LEDs+0xd4>)
 8001430:	6013      	str	r3, [r2, #0]
  LED1.G_CCR = &(htim4.Instance->CCR3);
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <init_LEDs+0xd0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	333c      	adds	r3, #60	; 0x3c
 8001438:	4a2f      	ldr	r2, [pc, #188]	; (80014f8 <init_LEDs+0xd4>)
 800143a:	6053      	str	r3, [r2, #4]
  LED1.B_CCR = &(htim4.Instance->CCR2);
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <init_LEDs+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3338      	adds	r3, #56	; 0x38
 8001442:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <init_LEDs+0xd4>)
 8001444:	6093      	str	r3, [r2, #8]

  //LED 2
  LED2.R_CCR = &(htim2.Instance->CCR4);
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <init_LEDs+0xd8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3340      	adds	r3, #64	; 0x40
 800144c:	4a2c      	ldr	r2, [pc, #176]	; (8001500 <init_LEDs+0xdc>)
 800144e:	6013      	str	r3, [r2, #0]
  LED2.G_CCR = &(htim3.Instance->CCR3);
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <init_LEDs+0xe0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	333c      	adds	r3, #60	; 0x3c
 8001456:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <init_LEDs+0xdc>)
 8001458:	6053      	str	r3, [r2, #4]
  LED2.B_CCR = &(htim3.Instance->CCR4);
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <init_LEDs+0xe0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3340      	adds	r3, #64	; 0x40
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <init_LEDs+0xdc>)
 8001462:	6093      	str	r3, [r2, #8]

  //LED 3
  LED3.R_CCR = &(htim2.Instance->CCR1);
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <init_LEDs+0xd8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3334      	adds	r3, #52	; 0x34
 800146a:	4a27      	ldr	r2, [pc, #156]	; (8001508 <init_LEDs+0xe4>)
 800146c:	6013      	str	r3, [r2, #0]
  LED3.G_CCR = &(htim3.Instance->CCR1);
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <init_LEDs+0xe0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3334      	adds	r3, #52	; 0x34
 8001474:	4a24      	ldr	r2, [pc, #144]	; (8001508 <init_LEDs+0xe4>)
 8001476:	6053      	str	r3, [r2, #4]
  LED3.B_CCR = &(htim3.Instance->CCR2);
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <init_LEDs+0xe0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3338      	adds	r3, #56	; 0x38
 800147e:	4a22      	ldr	r2, [pc, #136]	; (8001508 <init_LEDs+0xe4>)
 8001480:	6093      	str	r3, [r2, #8]

  update_LED(&LED1, 0,0,0);
 8001482:	2300      	movs	r3, #0
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	481b      	ldr	r0, [pc, #108]	; (80014f8 <init_LEDs+0xd4>)
 800148a:	f7ff ffa5 	bl	80013d8 <update_LED>
  update_LED(&LED2, 0,0,0);
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <init_LEDs+0xdc>)
 8001496:	f7ff ff9f 	bl	80013d8 <update_LED>
  update_LED(&LED3, 0,0,0);
 800149a:	2300      	movs	r3, #0
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	4819      	ldr	r0, [pc, #100]	; (8001508 <init_LEDs+0xe4>)
 80014a2:	f7ff ff99 	bl	80013d8 <update_LED>

  //LED 1
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80014a6:	2100      	movs	r1, #0
 80014a8:	4812      	ldr	r0, [pc, #72]	; (80014f4 <init_LEDs+0xd0>)
 80014aa:	f003 f8a3 	bl	80045f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80014ae:	2108      	movs	r1, #8
 80014b0:	4810      	ldr	r0, [pc, #64]	; (80014f4 <init_LEDs+0xd0>)
 80014b2:	f003 f89f 	bl	80045f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80014b6:	2104      	movs	r1, #4
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <init_LEDs+0xd0>)
 80014ba:	f003 f89b 	bl	80045f4 <HAL_TIM_PWM_Start>

  //LED 2
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80014be:	210c      	movs	r1, #12
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <init_LEDs+0xd8>)
 80014c2:	f003 f897 	bl	80045f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80014c6:	2108      	movs	r1, #8
 80014c8:	480e      	ldr	r0, [pc, #56]	; (8001504 <init_LEDs+0xe0>)
 80014ca:	f003 f893 	bl	80045f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80014ce:	210c      	movs	r1, #12
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <init_LEDs+0xe0>)
 80014d2:	f003 f88f 	bl	80045f4 <HAL_TIM_PWM_Start>

  //LED 3
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <init_LEDs+0xd8>)
 80014da:	f003 f88b 	bl	80045f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80014de:	2100      	movs	r1, #0
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <init_LEDs+0xe0>)
 80014e2:	f003 f887 	bl	80045f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80014e6:	2104      	movs	r1, #4
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <init_LEDs+0xe0>)
 80014ea:	f003 f883 	bl	80045f4 <HAL_TIM_PWM_Start>


}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000002c 	.word	0x2000002c
 80014f8:	200006ac 	.word	0x200006ac
 80014fc:	20000560 	.word	0x20000560
 8001500:	200006c4 	.word	0x200006c4
 8001504:	200004c8 	.word	0x200004c8
 8001508:	200006b8 	.word	0x200006b8

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001512:	e003      	b.n	800151c <LoopCopyDataInit>

08001514 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001516:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001518:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800151a:	3104      	adds	r1, #4

0800151c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001520:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001522:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001524:	d3f6      	bcc.n	8001514 <CopyDataInit>
  ldr  r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001528:	e002      	b.n	8001530 <LoopFillZerobss>

0800152a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800152a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800152c:	f842 3b04 	str.w	r3, [r2], #4

08001530 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001532:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001534:	d3f9      	bcc.n	800152a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001536:	f7ff ff39 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f003 ff07 	bl	800534c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f805 	bl	800054c <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001548:	080053ec 	.word	0x080053ec
  ldr  r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001550:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001554:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001558:	200006d4 	.word	0x200006d4

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 fbaf 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fbc2 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fbc7 	bl	8001d56 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e0:	f000 fb8f 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	200006d0 	.word	0x200006d0

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200006d0 	.word	0x200006d0

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_Delay+0x40>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000008 	.word	0x20000008

08001688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e033      	b.n	8001706 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fb60 	bl	8000d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f93a 	bl	8001954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
 80016f6:	e001      	b.n	80016fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_ADC_ConfigChannel+0x1c>
 8001728:	2302      	movs	r3, #2
 800172a:	e105      	b.n	8001938 <HAL_ADC_ConfigChannel+0x228>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b09      	cmp	r3, #9
 800173a:	d925      	bls.n	8001788 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68d9      	ldr	r1, [r3, #12]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	3b1e      	subs	r3, #30
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43da      	mvns	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	400a      	ands	r2, r1
 8001760:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68d9      	ldr	r1, [r3, #12]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	4603      	mov	r3, r0
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4403      	add	r3, r0
 800177a:	3b1e      	subs	r3, #30
 800177c:	409a      	lsls	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e022      	b.n	80017ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6919      	ldr	r1, [r3, #16]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	2207      	movs	r2, #7
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6919      	ldr	r1, [r3, #16]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4403      	add	r3, r0
 80017c4:	409a      	lsls	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d824      	bhi.n	8001820 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	3b05      	subs	r3, #5
 80017e8:	221f      	movs	r2, #31
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	3b05      	subs	r3, #5
 8001812:	fa00 f203 	lsl.w	r2, r0, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
 800181e:	e04c      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b0c      	cmp	r3, #12
 8001826:	d824      	bhi.n	8001872 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3b23      	subs	r3, #35	; 0x23
 800183a:	221f      	movs	r2, #31
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43da      	mvns	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	400a      	ands	r2, r1
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b23      	subs	r3, #35	; 0x23
 8001864:	fa00 f203 	lsl.w	r2, r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
 8001870:	e023      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	3b41      	subs	r3, #65	; 0x41
 8001884:	221f      	movs	r2, #31
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b41      	subs	r3, #65	; 0x41
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_ADC_ConfigChannel+0x234>)
 80018bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <HAL_ADC_ConfigChannel+0x238>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d109      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1cc>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_ADC_ConfigChannel+0x238>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d123      	bne.n	800192e <HAL_ADC_ConfigChannel+0x21e>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d003      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0x1e6>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b11      	cmp	r3, #17
 80018f4:	d11b      	bne.n	800192e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b10      	cmp	r3, #16
 8001908:	d111      	bne.n	800192e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_ADC_ConfigChannel+0x23c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_ADC_ConfigChannel+0x240>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	0c9a      	lsrs	r2, r3, #18
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001920:	e002      	b.n	8001928 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3b01      	subs	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f9      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40012300 	.word	0x40012300
 8001948:	40012000 	.word	0x40012000
 800194c:	20000000 	.word	0x20000000
 8001950:	431bde83 	.word	0x431bde83

08001954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195c:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <ADC_Init+0x1f0>)
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	431a      	orrs	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	021a      	lsls	r2, r3, #8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6899      	ldr	r1, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <ADC_Init+0x1f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d022      	beq.n	8001a32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6899      	ldr	r1, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e00f      	b.n	8001a52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0202 	bic.w	r2, r2, #2
 8001a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7e1b      	ldrb	r3, [r3, #24]
 8001a6c:	005a      	lsls	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01b      	beq.n	8001ab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	035a      	lsls	r2, r3, #13
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	e007      	b.n	8001ac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	051a      	lsls	r2, r3, #20
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b0a:	025a      	lsls	r2, r3, #9
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6899      	ldr	r1, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	029a      	lsls	r2, r3, #10
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40012300 	.word	0x40012300
 8001b48:	0f000001 	.word	0x0f000001

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff29 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff3e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff31 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff fc56 	bl	800162c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e099      	b.n	8001ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dac:	e00f      	b.n	8001dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dae:	f7ff fc3d 	bl	800162c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d908      	bls.n	8001dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e078      	b.n	8001ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e8      	bne.n	8001dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_DMA_Init+0x158>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4313      	orrs	r3, r2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d117      	bne.n	8001e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fa6f 	bl	8002358 <DMA_CheckFifoParam>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e016      	b.n	8001ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa26 	bl	80022ec <DMA_CalcBaseAndBitshift>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	223f      	movs	r2, #63	; 0x3f
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	f010803f 	.word	0xf010803f

08001ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Start_IT+0x26>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e040      	b.n	8001f74 <HAL_DMA_Start_IT+0xa8>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d12f      	bne.n	8001f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9b8 	bl	8002290 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0216 	orr.w	r2, r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e005      	b.n	8001f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_DMA_IRQHandler+0x258>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_DMA_IRQHandler+0x25c>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0204 	bic.w	r2, r2, #4
 8001fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2201      	movs	r2, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2201      	movs	r2, #1
 800200c:	409a      	lsls	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2204      	movs	r2, #4
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2204      	movs	r2, #4
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2210      	movs	r2, #16
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d043      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03c      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2210      	movs	r2, #16
 8002078:	409a      	lsls	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d018      	beq.n	80020be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d024      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
 80020aa:	e01f      	b.n	80020ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e016      	b.n	80020ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0208 	bic.w	r2, r2, #8
 80020da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2220      	movs	r2, #32
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 808e 	beq.w	800221a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8086 	beq.w	800221a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2220      	movs	r2, #32
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b05      	cmp	r3, #5
 8002124:	d136      	bne.n	8002194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0216 	bic.w	r2, r2, #22
 8002134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_DMA_IRQHandler+0x1da>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	223f      	movs	r2, #63	; 0x3f
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07d      	beq.n	8002286 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
        }
        return;
 8002192:	e078      	b.n	8002286 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01c      	beq.n	80021dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d030      	beq.n	800221a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e02b      	b.n	800221a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d027      	beq.n	800221a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
 80021d2:	e022      	b.n	800221a <HAL_DMA_IRQHandler+0x29e>
 80021d4:	20000000 	.word	0x20000000
 80021d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0210 	bic.w	r2, r2, #16
 80021f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	2b00      	cmp	r3, #0
 8002220:	d032      	beq.n	8002288 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d022      	beq.n	8002274 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2205      	movs	r2, #5
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	429a      	cmp	r2, r3
 8002250:	d307      	bcc.n	8002262 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f2      	bne.n	8002246 <HAL_DMA_IRQHandler+0x2ca>
 8002260:	e000      	b.n	8002264 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002262:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e000      	b.n	8002288 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002286:	bf00      	nop
    }
  }
}
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop

08002290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d108      	bne.n	80022d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ce:	e007      	b.n	80022e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3b10      	subs	r3, #16
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <DMA_CalcBaseAndBitshift+0x64>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <DMA_CalcBaseAndBitshift+0x68>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d909      	bls.n	800232e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	1d1a      	adds	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	659a      	str	r2, [r3, #88]	; 0x58
 800232c:	e007      	b.n	800233e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	aaaaaaab 	.word	0xaaaaaaab
 8002354:	080053d4 	.word	0x080053d4

08002358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d855      	bhi.n	8002424 <DMA_CheckFifoParam+0xcc>
 8002378:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <DMA_CheckFifoParam+0x28>)
 800237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237e:	bf00      	nop
 8002380:	08002391 	.word	0x08002391
 8002384:	080023a3 	.word	0x080023a3
 8002388:	08002391 	.word	0x08002391
 800238c:	08002425 	.word	0x08002425
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d045      	beq.n	8002428 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e042      	b.n	8002428 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023aa:	d13f      	bne.n	800242c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e03c      	b.n	800242c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ba:	d121      	bne.n	8002400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d836      	bhi.n	8002430 <DMA_CheckFifoParam+0xd8>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <DMA_CheckFifoParam+0x70>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023df 	.word	0x080023df
 80023d0:	080023d9 	.word	0x080023d9
 80023d4:	080023f1 	.word	0x080023f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e02f      	b.n	800243e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d024      	beq.n	8002434 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ee:	e021      	b.n	8002434 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f8:	d11e      	bne.n	8002438 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023fe:	e01b      	b.n	8002438 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d902      	bls.n	800240c <DMA_CheckFifoParam+0xb4>
 8002406:	2b03      	cmp	r3, #3
 8002408:	d003      	beq.n	8002412 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800240a:	e018      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e015      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00e      	beq.n	800243c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      break;
 8002422:	e00b      	b.n	800243c <DMA_CheckFifoParam+0xe4>
      break;
 8002424:	bf00      	nop
 8002426:	e00a      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 8002428:	bf00      	nop
 800242a:	e008      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 800242c:	bf00      	nop
 800242e:	e006      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 8002430:	bf00      	nop
 8002432:	e004      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 8002434:	bf00      	nop
 8002436:	e002      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;   
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 800243c:	bf00      	nop
    }
  } 
  
  return status; 
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e16b      	b.n	8002740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 815a 	bne.w	800273a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00b      	beq.n	80024a6 <HAL_GPIO_Init+0x5a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249a:	2b11      	cmp	r3, #17
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0xfc>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80b4 	beq.w	800273a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_GPIO_Init+0x308>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_GPIO_Init+0x308>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_GPIO_Init+0x308>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a5a      	ldr	r2, [pc, #360]	; (8002758 <HAL_GPIO_Init+0x30c>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_GPIO_Init+0x310>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02b      	beq.n	8002672 <HAL_GPIO_Init+0x226>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_GPIO_Init+0x314>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d025      	beq.n	800266e <HAL_GPIO_Init+0x222>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <HAL_GPIO_Init+0x318>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x21e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_GPIO_Init+0x31c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x21a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_GPIO_Init+0x320>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x216>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x324>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x212>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_GPIO_Init+0x328>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x20e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_GPIO_Init+0x32c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x20a>
 8002652:	2307      	movs	r3, #7
 8002654:	e00e      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002656:	2308      	movs	r3, #8
 8002658:	e00c      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800265a:	2306      	movs	r3, #6
 800265c:	e00a      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800265e:	2305      	movs	r3, #5
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002672:	2300      	movs	r3, #0
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002684:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_GPIO_Init+0x30c>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_GPIO_Init+0x330>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_GPIO_Init+0x330>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_GPIO_Init+0x330>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_GPIO_Init+0x330>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_GPIO_Init+0x330>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_GPIO_Init+0x330>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_GPIO_Init+0x330>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_GPIO_Init+0x330>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f ae90 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002748:	bf00      	nop
 800274a:	3724      	adds	r7, #36	; 0x24
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	40021c00 	.word	0x40021c00
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e11f      	b.n	8002a06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fb0a 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002818:	f001 fd70 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 800281c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_I2C_Init+0x25c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d807      	bhi.n	8002838 <HAL_I2C_Init+0x84>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a7a      	ldr	r2, [pc, #488]	; (8002a14 <HAL_I2C_Init+0x260>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e006      	b.n	8002846 <HAL_I2C_Init+0x92>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a77      	ldr	r2, [pc, #476]	; (8002a18 <HAL_I2C_Init+0x264>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0db      	b.n	8002a06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <HAL_I2C_Init+0x268>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a64      	ldr	r2, [pc, #400]	; (8002a10 <HAL_I2C_Init+0x25c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d802      	bhi.n	8002888 <HAL_I2C_Init+0xd4>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	e009      	b.n	800289c <HAL_I2C_Init+0xe8>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4a63      	ldr	r2, [pc, #396]	; (8002a20 <HAL_I2C_Init+0x26c>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	3301      	adds	r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4956      	ldr	r1, [pc, #344]	; (8002a10 <HAL_I2C_Init+0x25c>)
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d80d      	bhi.n	80028d8 <HAL_I2C_Init+0x124>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e59      	subs	r1, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	bf38      	it	cc
 80028d4:	2304      	movcc	r3, #4
 80028d6:	e04f      	b.n	8002978 <HAL_I2C_Init+0x1c4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d111      	bne.n	8002904 <HAL_I2C_Init+0x150>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e012      	b.n	800292a <HAL_I2C_Init+0x176>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x17e>
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_I2C_Init+0x1c4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <HAL_I2C_Init+0x1a4>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e58      	subs	r0, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	440b      	add	r3, r1
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Init+0x1c4>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6911      	ldr	r1, [r2, #16]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	000186a0 	.word	0x000186a0
 8002a14:	001e847f 	.word	0x001e847f
 8002a18:	003d08ff 	.word	0x003d08ff
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e128      	b.n	8002c88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a90      	ldr	r2, [pc, #576]	; (8002c90 <HAL_I2S_Init+0x26c>)
 8002a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fe fa17 	bl	8000e84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a6c:	f023 030f 	bic.w	r3, r3, #15
 8002a70:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2202      	movs	r2, #2
 8002a78:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d060      	beq.n	8002b44 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e001      	b.n	8002a94 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d802      	bhi.n	8002aa2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f001 fd20 	bl	80044e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002aa8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab2:	d125      	bne.n	8002b00 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	3305      	adds	r3, #5
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e01f      	b.n	8002b1e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	3305      	adds	r3, #5
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e00e      	b.n	8002b1e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_I2S_Init+0x270>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	08db      	lsrs	r3, r3, #3
 8002b28:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	e003      	b.n	8002b4c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b44:	2302      	movs	r3, #2
 8002b46:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d902      	bls.n	8002b58 <HAL_I2S_Init+0x134>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	2bff      	cmp	r3, #255	; 0xff
 8002b56:	d907      	bls.n	8002b68 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f043 0210 	orr.w	r2, r3, #16
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e08f      	b.n	8002c88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	ea42 0103 	orr.w	r1, r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b86:	f023 030f 	bic.w	r3, r3, #15
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6851      	ldr	r1, [r2, #4]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68d2      	ldr	r2, [r2, #12]
 8002b98:	4311      	orrs	r1, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6992      	ldr	r2, [r2, #24]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002baa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d161      	bne.n	8002c78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <HAL_I2S_Init+0x274>)
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <HAL_I2S_Init+0x278>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2S_Init+0x1a4>
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_I2S_Init+0x27c>)
 8002bc6:	e001      	b.n	8002bcc <HAL_I2S_Init+0x1a8>
 8002bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4932      	ldr	r1, [pc, #200]	; (8002c9c <HAL_I2S_Init+0x278>)
 8002bd4:	428a      	cmp	r2, r1
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2S_Init+0x1b8>
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_I2S_Init+0x27c>)
 8002bda:	e001      	b.n	8002be0 <HAL_I2S_Init+0x1bc>
 8002bdc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002be0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002be4:	f023 030f 	bic.w	r3, r3, #15
 8002be8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <HAL_I2S_Init+0x278>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2S_Init+0x1d4>
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_I2S_Init+0x27c>)
 8002bf6:	e001      	b.n	8002bfc <HAL_I2S_Init+0x1d8>
 8002bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <HAL_I2S_Init+0x278>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_I2S_Init+0x1ea>
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_I2S_Init+0x27c>)
 8002c0c:	e001      	b.n	8002c12 <HAL_I2S_Init+0x1ee>
 8002c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1e:	d003      	beq.n	8002c28 <HAL_I2S_Init+0x204>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	e001      	b.n	8002c34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	b299      	uxth	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002c4a:	4303      	orrs	r3, r0
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002c52:	4313      	orrs	r3, r2
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <HAL_I2S_Init+0x278>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2S_Init+0x24c>
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_I2S_Init+0x27c>)
 8002c6e:	e001      	b.n	8002c74 <HAL_I2S_Init+0x250>
 8002c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c74:	897a      	ldrh	r2, [r7, #10]
 8002c76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	08002db3 	.word	0x08002db3
 8002c94:	cccccccd 	.word	0xcccccccd
 8002c98:	080031dd 	.word	0x080031dd
 8002c9c:	40003800 	.word	0x40003800
 8002ca0:	40003400 	.word	0x40003400

08002ca4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffb8 	bl	8002cbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	b292      	uxth	r2, r2
 8002d68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	1c9a      	adds	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10e      	bne.n	8002daa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff93 	bl	8002cd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d13a      	bne.n	8002e44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d109      	bne.n	8002dec <I2S_IRQHandler+0x3a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d102      	bne.n	8002dec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffb4 	bl	8002d54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d126      	bne.n	8002e44 <I2S_IRQHandler+0x92>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d11f      	bne.n	8002e44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f043 0202 	orr.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff50 	bl	8002ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d136      	bne.n	8002ebe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d109      	bne.n	8002e6e <I2S_IRQHandler+0xbc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d102      	bne.n	8002e6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff45 	bl	8002cf8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d122      	bne.n	8002ebe <I2S_IRQHandler+0x10c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d11b      	bne.n	8002ebe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	f043 0204 	orr.w	r2, r3, #4
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff13 	bl	8002ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ef2:	e160      	b.n	80031b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e15a      	b.n	80031c0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e152      	b.n	80031c0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d002      	beq.n	8002f46 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d114      	bne.n	8002f70 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	865a      	strh	r2, [r3, #50]	; 0x32
 8002f6e:	e00b      	b.n	8002f88 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	887a      	ldrh	r2, [r7, #2]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	887a      	ldrh	r2, [r7, #2]
 8002f86:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2205      	movs	r2, #5
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	4a8b      	ldr	r2, [pc, #556]	; (80031c8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	4a8a      	ldr	r2, [pc, #552]	; (80031cc <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	4a89      	ldr	r2, [pc, #548]	; (80031d0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002fac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	4a85      	ldr	r2, [pc, #532]	; (80031c8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4a84      	ldr	r2, [pc, #528]	; (80031cc <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	4a83      	ldr	r2, [pc, #524]	; (80031d0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002fc4:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd8:	d002      	beq.n	8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d16b      	bne.n	80030b8 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a79      	ldr	r2, [pc, #484]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002ff2:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ff4:	e001      	b.n	8002ffa <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003006:	b29b      	uxth	r3, r3
 8003008:	f7fe ff60 	bl	8001ecc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a70      	ldr	r2, [pc, #448]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003016:	4b70      	ldr	r3, [pc, #448]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003018:	e001      	b.n	800301e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800301a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	496b      	ldr	r1, [pc, #428]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003026:	428b      	cmp	r3, r1
 8003028:	d101      	bne.n	800302e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800302a:	4b6b      	ldr	r3, [pc, #428]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800302c:	e001      	b.n	8003032 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800302e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	461a      	mov	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	b29b      	uxth	r3, r3
 8003054:	f7fe ff3a 	bl	8001ecc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0202 	orr.w	r2, r2, #2
 8003066:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	f000 809e 	beq.w	80031b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a55      	ldr	r2, [pc, #340]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003084:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003086:	e001      	b.n	800308c <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4950      	ldr	r1, [pc, #320]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d101      	bne.n	800309c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800309a:	e001      	b.n	80030a0 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 800309c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a4:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030b4:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80030b6:	e07e      	b.n	80031b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c6:	d10a      	bne.n	80030de <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80030f8:	e001      	b.n	80030fe <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80030fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fe:	330c      	adds	r3, #12
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	b29b      	uxth	r3, r3
 8003108:	f7fe fee0 	bl	8001ecc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003118:	e001      	b.n	800311e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800311a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	492b      	ldr	r1, [pc, #172]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003126:	428b      	cmp	r3, r1
 8003128:	d101      	bne.n	800312e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800312a:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800312c:	e001      	b.n	8003132 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800312e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003132:	f042 0202 	orr.w	r2, r2, #2
 8003136:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	4619      	mov	r1, r3
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003150:	b29b      	uxth	r3, r3
 8003152:	f7fe febb 	bl	8001ecc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	d01e      	beq.n	80031b4 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003182:	e001      	b.n	8003188 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4911      	ldr	r1, [pc, #68]	; (80031d4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d101      	bne.n	8003198 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003196:	e001      	b.n	800319c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031a0:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b0:	61da      	str	r2, [r3, #28]
 80031b2:	e000      	b.n	80031b6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80031b4:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80031be:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	08003485 	.word	0x08003485
 80031cc:	080034a1 	.word	0x080034a1
 80031d0:	080035d9 	.word	0x080035d9
 80031d4:	40003800 	.word	0x40003800
 80031d8:	40003400 	.word	0x40003400

080031dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4aa2      	ldr	r2, [pc, #648]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80031f6:	4ba2      	ldr	r3, [pc, #648]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031f8:	e001      	b.n	80031fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80031fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a9b      	ldr	r2, [pc, #620]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003214:	4b9a      	ldr	r3, [pc, #616]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003216:	e001      	b.n	800321c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003228:	d004      	beq.n	8003234 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8099 	bne.w	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d107      	bne.n	800324e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fa05 	bl	8003658 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 faa8 	bl	80037b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d13a      	bne.n	80032e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d035      	beq.n	80032e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a7e      	ldr	r2, [pc, #504]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003286:	4b7e      	ldr	r3, [pc, #504]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003288:	e001      	b.n	800328e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800328a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4979      	ldr	r1, [pc, #484]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003296:	428b      	cmp	r3, r1
 8003298:	d101      	bne.n	800329e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800329a:	4b79      	ldr	r3, [pc, #484]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800329c:	e001      	b.n	80032a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800329e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fcfe 	bl	8002ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	f040 80be 	bne.w	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80b8 	beq.w	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800330e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a59      	ldr	r2, [pc, #356]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800331a:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800331c:	e001      	b.n	8003322 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800331e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4954      	ldr	r1, [pc, #336]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800332a:	428b      	cmp	r3, r1
 800332c:	d101      	bne.n	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800332e:	4b54      	ldr	r3, [pc, #336]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003330:	e001      	b.n	8003336 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800333a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fcc0 	bl	8002ce4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003364:	e084      	b.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d107      	bne.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f99e 	bl	80036bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f9dd 	bl	8003754 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d12f      	bne.n	8003404 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02a      	beq.n	8003404 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2e      	ldr	r2, [pc, #184]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033ca:	e001      	b.n	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80033cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4929      	ldr	r1, [pc, #164]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d8:	428b      	cmp	r3, r1
 80033da:	d101      	bne.n	80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033de:	e001      	b.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80033e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fc70 	bl	8002ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d131      	bne.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02c      	beq.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003424:	e001      	b.n	800342a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4912      	ldr	r1, [pc, #72]	; (800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003432:	428b      	cmp	r3, r1
 8003434:	d101      	bne.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003438:	e001      	b.n	800343e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003442:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003452:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fc3b 	bl	8002ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800346e:	e000      	b.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003470:	bf00      	nop
}
 8003472:	bf00      	nop
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40003800 	.word	0x40003800
 8003480:	40003400 	.word	0x40003400

08003484 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7fd fbea 	bl	8000c6c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8084 	bne.w	80035c0 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d13c      	bne.n	800353c <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d006      	beq.n	80034e0 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d116      	bne.n	800350e <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <I2SEx_TxRxDMACplt+0x130>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <I2SEx_TxRxDMACplt+0x4e>
 80034ea:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <I2SEx_TxRxDMACplt+0x134>)
 80034ec:	e001      	b.n	80034f2 <I2SEx_TxRxDMACplt+0x52>
 80034ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4935      	ldr	r1, [pc, #212]	; (80035d0 <I2SEx_TxRxDMACplt+0x130>)
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d101      	bne.n	8003502 <I2SEx_TxRxDMACplt+0x62>
 80034fe:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <I2SEx_TxRxDMACplt+0x134>)
 8003500:	e001      	b.n	8003506 <I2SEx_TxRxDMACplt+0x66>
 8003502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e007      	b.n	800351e <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7fd fbc0 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d13c      	bne.n	80035c0 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003554:	d006      	beq.n	8003564 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003560:	2b00      	cmp	r3, #0
 8003562:	d108      	bne.n	8003576 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0202 	bic.w	r2, r2, #2
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	e015      	b.n	80035a2 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <I2SEx_TxRxDMACplt+0x130>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <I2SEx_TxRxDMACplt+0xe4>
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <I2SEx_TxRxDMACplt+0x134>)
 8003582:	e001      	b.n	8003588 <I2SEx_TxRxDMACplt+0xe8>
 8003584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4910      	ldr	r1, [pc, #64]	; (80035d0 <I2SEx_TxRxDMACplt+0x130>)
 8003590:	428b      	cmp	r3, r1
 8003592:	d101      	bne.n	8003598 <I2SEx_TxRxDMACplt+0xf8>
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <I2SEx_TxRxDMACplt+0x134>)
 8003596:	e001      	b.n	800359c <I2SEx_TxRxDMACplt+0xfc>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	f022 0202 	bic.w	r2, r2, #2
 80035a0:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7fd fb7e 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7fd fb7b 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40003800 	.word	0x40003800
 80035d4:	40003400 	.word	0x40003400

080035d8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0203 	bic.w	r2, r2, #3
 80035f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <I2SEx_TxRxDMAError+0x78>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <I2SEx_TxRxDMAError+0x2c>
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <I2SEx_TxRxDMAError+0x7c>)
 8003602:	e001      	b.n	8003608 <I2SEx_TxRxDMAError+0x30>
 8003604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4910      	ldr	r1, [pc, #64]	; (8003650 <I2SEx_TxRxDMAError+0x78>)
 8003610:	428b      	cmp	r3, r1
 8003612:	d101      	bne.n	8003618 <I2SEx_TxRxDMAError+0x40>
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <I2SEx_TxRxDMAError+0x7c>)
 8003616:	e001      	b.n	800361c <I2SEx_TxRxDMAError+0x44>
 8003618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800361c:	f022 0203 	bic.w	r2, r2, #3
 8003620:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0208 	orr.w	r2, r3, #8
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fb4e 	bl	8002ce4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40003800 	.word	0x40003800
 8003654:	40003400 	.word	0x40003400

08003658 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c99      	adds	r1, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6251      	str	r1, [r2, #36]	; 0x24
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d113      	bne.n	80036b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003698:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fd fb05 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c99      	adds	r1, r3, #2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6251      	str	r1, [r2, #36]	; 0x24
 80036ce:	8819      	ldrh	r1, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <I2SEx_TxISR_I2SExt+0x90>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <I2SEx_TxISR_I2SExt+0x22>
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <I2SEx_TxISR_I2SExt+0x94>)
 80036dc:	e001      	b.n	80036e2 <I2SEx_TxISR_I2SExt+0x26>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	460a      	mov	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d121      	bne.n	8003742 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <I2SEx_TxISR_I2SExt+0x90>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <I2SEx_TxISR_I2SExt+0x50>
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <I2SEx_TxISR_I2SExt+0x94>)
 800370a:	e001      	b.n	8003710 <I2SEx_TxISR_I2SExt+0x54>
 800370c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <I2SEx_TxISR_I2SExt+0x90>)
 8003718:	428b      	cmp	r3, r1
 800371a:	d101      	bne.n	8003720 <I2SEx_TxISR_I2SExt+0x64>
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <I2SEx_TxISR_I2SExt+0x94>)
 800371e:	e001      	b.n	8003724 <I2SEx_TxISR_I2SExt+0x68>
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003728:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd fabd 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40003800 	.word	0x40003800
 8003750:	40003400 	.word	0x40003400

08003754 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68d8      	ldr	r0, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	1c99      	adds	r1, r3, #2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800376c:	b282      	uxth	r2, r0
 800376e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003796:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fa86 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <I2SEx_RxISR_I2SExt+0x90>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <I2SEx_RxISR_I2SExt+0x16>
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <I2SEx_RxISR_I2SExt+0x94>)
 80037cc:	e001      	b.n	80037d2 <I2SEx_RxISR_I2SExt+0x1a>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d2:	68d8      	ldr	r0, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	1c99      	adds	r1, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037de:	b282      	uxth	r2, r0
 80037e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d121      	bne.n	800383e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <I2SEx_RxISR_I2SExt+0x90>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <I2SEx_RxISR_I2SExt+0x50>
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <I2SEx_RxISR_I2SExt+0x94>)
 8003806:	e001      	b.n	800380c <I2SEx_RxISR_I2SExt+0x54>
 8003808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <I2SEx_RxISR_I2SExt+0x90>)
 8003814:	428b      	cmp	r3, r1
 8003816:	d101      	bne.n	800381c <I2SEx_RxISR_I2SExt+0x64>
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <I2SEx_RxISR_I2SExt+0x94>)
 800381a:	e001      	b.n	8003820 <I2SEx_RxISR_I2SExt+0x68>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003824:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd fa3f 	bl	8000cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40003800 	.word	0x40003800
 800384c:	40003400 	.word	0x40003400

08003850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b08f      	sub	sp, #60	; 0x3c
 8003854:	af0a      	add	r7, sp, #40	; 0x28
 8003856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e10f      	b.n	8003a82 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fd fcfd 	bl	800127c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 fafe 	bl	8004ea2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	687e      	ldr	r6, [r7, #4]
 80038ae:	466d      	mov	r5, sp
 80038b0:	f106 0410 	add.w	r4, r6, #16
 80038b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038c4:	1d33      	adds	r3, r6, #4
 80038c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c8:	6838      	ldr	r0, [r7, #0]
 80038ca:	f001 fa89 	bl	8004de0 <USB_CoreInit>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0d0      	b.n	8003a82 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 faec 	bl	8004ec4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e04a      	b.n	8003988 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	333d      	adds	r3, #61	; 0x3d
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	333c      	adds	r3, #60	; 0x3c
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	b298      	uxth	r0, r3
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3342      	adds	r3, #66	; 0x42
 800392e:	4602      	mov	r2, r0
 8003930:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	333f      	adds	r3, #63	; 0x3f
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3344      	adds	r3, #68	; 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	3348      	adds	r3, #72	; 0x48
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3350      	adds	r3, #80	; 0x50
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3301      	adds	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d3af      	bcc.n	80038f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e044      	b.n	8003a22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3b5      	bcc.n	8003998 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	687e      	ldr	r6, [r7, #4]
 8003a34:	466d      	mov	r5, sp
 8003a36:	f106 0410 	add.w	r4, r6, #16
 8003a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a4a:	1d33      	adds	r3, r6, #4
 8003a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f001 fa62 	bl	8004f18 <USB_DevInit>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00d      	b.n	8003a82 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 fc11 	bl	80052a2 <USB_DevDisconnect>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e25b      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aaa:	4ba3      	ldr	r3, [pc, #652]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4ba0      	ldr	r3, [pc, #640]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d112      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b9d      	ldr	r3, [pc, #628]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b99      	ldr	r3, [pc, #612]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e236      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x74>
 8003af2:	4b91      	ldr	r3, [pc, #580]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a90      	ldr	r2, [pc, #576]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b8b      	ldr	r3, [pc, #556]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a8a      	ldr	r2, [pc, #552]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a87      	ldr	r2, [pc, #540]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b24:	4b84      	ldr	r3, [pc, #528]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a83      	ldr	r2, [pc, #524]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a80      	ldr	r2, [pc, #512]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fd fd72 	bl	800162c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fd6e 	bl	800162c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1fb      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fd5e 	bl	800162c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd fd5a 	bl	800162c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1e7      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d063      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba2:	4b65      	ldr	r3, [pc, #404]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d11c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d116      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e1bb      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b56      	ldr	r3, [pc, #344]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4952      	ldr	r1, [pc, #328]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	e03a      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfc:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <HAL_RCC_OscConfig+0x2b0>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fd13 	bl	800162c <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fd0f 	bl	800162c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e19c      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1c:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b43      	ldr	r3, [pc, #268]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4940      	ldr	r1, [pc, #256]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <HAL_RCC_OscConfig+0x2b0>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fcf2 	bl	800162c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fcee 	bl	800162c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e17b      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d030      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_RCC_OscConfig+0x2b4>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fd fcd2 	bl	800162c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fd fcce 	bl	800162c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e15b      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x200>
 8003caa:	e015      	b.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_OscConfig+0x2b4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fcbb 	bl	800162c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd fcb7 	bl	800162c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e144      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a0 	beq.w	8003e26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_OscConfig+0x2b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d121      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_RCC_OscConfig+0x2b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <HAL_RCC_OscConfig+0x2b8>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fc7d 	bl	800162c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	e011      	b.n	8003d5a <HAL_RCC_OscConfig+0x2ce>
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	42470000 	.word	0x42470000
 8003d40:	42470e80 	.word	0x42470e80
 8003d44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d48:	f7fd fc70 	bl	800162c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0fd      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
 8003d6e:	4b7d      	ldr	r3, [pc, #500]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a7c      	ldr	r2, [pc, #496]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	e01c      	b.n	8003db6 <HAL_RCC_OscConfig+0x32a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x312>
 8003d84:	4b77      	ldr	r3, [pc, #476]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a76      	ldr	r2, [pc, #472]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	4b74      	ldr	r3, [pc, #464]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a73      	ldr	r2, [pc, #460]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	e00b      	b.n	8003db6 <HAL_RCC_OscConfig+0x32a>
 8003d9e:	4b71      	ldr	r3, [pc, #452]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a70      	ldr	r2, [pc, #448]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
 8003daa:	4b6e      	ldr	r3, [pc, #440]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a6d      	ldr	r2, [pc, #436]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d015      	beq.n	8003dea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd fc35 	bl	800162c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd fc31 	bl	800162c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0bc      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ee      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x33a>
 8003de8:	e014      	b.n	8003e14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fd fc1f 	bl	800162c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd fc1b 	bl	800162c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0a6      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	4b56      	ldr	r3, [pc, #344]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d105      	bne.n	8003e26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1a:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a51      	ldr	r2, [pc, #324]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8092 	beq.w	8003f54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e30:	4b4c      	ldr	r3, [pc, #304]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d05c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d141      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e44:	4b48      	ldr	r3, [pc, #288]	; (8003f68 <HAL_RCC_OscConfig+0x4dc>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fbef 	bl	800162c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e52:	f7fd fbeb 	bl	800162c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e078      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e64:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	019b      	lsls	r3, r3, #6
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	4933      	ldr	r1, [pc, #204]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <HAL_RCC_OscConfig+0x4dc>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fbc4 	bl	800162c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd fbc0 	bl	800162c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04d      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x41c>
 8003ec6:	e045      	b.n	8003f54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <HAL_RCC_OscConfig+0x4dc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fd fbad 	bl	800162c <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fd fba9 	bl	800162c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e036      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x44a>
 8003ef4:	e02e      	b.n	8003f54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e029      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d11c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d115      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40007000 	.word	0x40007000
 8003f64:	40023800 	.word	0x40023800
 8003f68:	42470060 	.word	0x42470060

08003f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0cc      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d90c      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b65      	ldr	r3, [pc, #404]	; (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b8      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc0:	4b59      	ldr	r3, [pc, #356]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd8:	4b53      	ldr	r3, [pc, #332]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b50      	ldr	r3, [pc, #320]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	494d      	ldr	r1, [pc, #308]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d044      	beq.n	800408c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b47      	ldr	r3, [pc, #284]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d119      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d003      	beq.n	800402a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e06f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403a:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e067      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404a:	4b37      	ldr	r3, [pc, #220]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4934      	ldr	r1, [pc, #208]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800405c:	f7fd fae6 	bl	800162c <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fd fae2 	bl	800162c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e04f      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 020c 	and.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d1eb      	bne.n	8004064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d20c      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e032      	b.n	800411a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4916      	ldr	r1, [pc, #88]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	490e      	ldr	r1, [pc, #56]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040f2:	f000 f821 	bl	8004138 <HAL_RCC_GetSysClockFreq>
 80040f6:	4601      	mov	r1, r0
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	5cd3      	ldrb	r3, [r2, r3]
 8004106:	fa21 f303 	lsr.w	r3, r1, r3
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fa46 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023c00 	.word	0x40023c00
 8004128:	40023800 	.word	0x40023800
 800412c:	080053bc 	.word	0x080053bc
 8004130:	20000000 	.word	0x20000000
 8004134:	20000004 	.word	0x20000004

08004138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b04      	cmp	r3, #4
 8004158:	d007      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0x32>
 800415a:	2b08      	cmp	r3, #8
 800415c:	d008      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x38>
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 80b4 	bne.w	80042cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004166:	60bb      	str	r3, [r7, #8]
       break;
 8004168:	e0b3      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800416c:	60bb      	str	r3, [r7, #8]
      break;
 800416e:	e0b0      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004170:	4b5a      	ldr	r3, [pc, #360]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004178:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800417a:	4b58      	ldr	r3, [pc, #352]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d04a      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004186:	4b55      	ldr	r3, [pc, #340]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	099b      	lsrs	r3, r3, #6
 800418c:	f04f 0400 	mov.w	r4, #0
 8004190:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	ea03 0501 	and.w	r5, r3, r1
 800419c:	ea04 0602 	and.w	r6, r4, r2
 80041a0:	4629      	mov	r1, r5
 80041a2:	4632      	mov	r2, r6
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	f04f 0400 	mov.w	r4, #0
 80041ac:	0154      	lsls	r4, r2, #5
 80041ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041b2:	014b      	lsls	r3, r1, #5
 80041b4:	4619      	mov	r1, r3
 80041b6:	4622      	mov	r2, r4
 80041b8:	1b49      	subs	r1, r1, r5
 80041ba:	eb62 0206 	sbc.w	r2, r2, r6
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	0194      	lsls	r4, r2, #6
 80041c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041cc:	018b      	lsls	r3, r1, #6
 80041ce:	1a5b      	subs	r3, r3, r1
 80041d0:	eb64 0402 	sbc.w	r4, r4, r2
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	00e2      	lsls	r2, r4, #3
 80041de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041e2:	00d9      	lsls	r1, r3, #3
 80041e4:	460b      	mov	r3, r1
 80041e6:	4614      	mov	r4, r2
 80041e8:	195b      	adds	r3, r3, r5
 80041ea:	eb44 0406 	adc.w	r4, r4, r6
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	02a2      	lsls	r2, r4, #10
 80041f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041fc:	0299      	lsls	r1, r3, #10
 80041fe:	460b      	mov	r3, r1
 8004200:	4614      	mov	r4, r2
 8004202:	4618      	mov	r0, r3
 8004204:	4621      	mov	r1, r4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f04f 0400 	mov.w	r4, #0
 800420c:	461a      	mov	r2, r3
 800420e:	4623      	mov	r3, r4
 8004210:	f7fb ffda 	bl	80001c8 <__aeabi_uldivmod>
 8004214:	4603      	mov	r3, r0
 8004216:	460c      	mov	r4, r1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e049      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421c:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	f04f 0400 	mov.w	r4, #0
 8004226:	f240 11ff 	movw	r1, #511	; 0x1ff
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	ea03 0501 	and.w	r5, r3, r1
 8004232:	ea04 0602 	and.w	r6, r4, r2
 8004236:	4629      	mov	r1, r5
 8004238:	4632      	mov	r2, r6
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	f04f 0400 	mov.w	r4, #0
 8004242:	0154      	lsls	r4, r2, #5
 8004244:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004248:	014b      	lsls	r3, r1, #5
 800424a:	4619      	mov	r1, r3
 800424c:	4622      	mov	r2, r4
 800424e:	1b49      	subs	r1, r1, r5
 8004250:	eb62 0206 	sbc.w	r2, r2, r6
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	f04f 0400 	mov.w	r4, #0
 800425c:	0194      	lsls	r4, r2, #6
 800425e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004262:	018b      	lsls	r3, r1, #6
 8004264:	1a5b      	subs	r3, r3, r1
 8004266:	eb64 0402 	sbc.w	r4, r4, r2
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	00e2      	lsls	r2, r4, #3
 8004274:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004278:	00d9      	lsls	r1, r3, #3
 800427a:	460b      	mov	r3, r1
 800427c:	4614      	mov	r4, r2
 800427e:	195b      	adds	r3, r3, r5
 8004280:	eb44 0406 	adc.w	r4, r4, r6
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	02a2      	lsls	r2, r4, #10
 800428e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004292:	0299      	lsls	r1, r3, #10
 8004294:	460b      	mov	r3, r1
 8004296:	4614      	mov	r4, r2
 8004298:	4618      	mov	r0, r3
 800429a:	4621      	mov	r1, r4
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f04f 0400 	mov.w	r4, #0
 80042a2:	461a      	mov	r2, r3
 80042a4:	4623      	mov	r3, r4
 80042a6:	f7fb ff8f 	bl	80001c8 <__aeabi_uldivmod>
 80042aa:	4603      	mov	r3, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	60bb      	str	r3, [r7, #8]
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042ce:	60bb      	str	r3, [r7, #8]
      break;
 80042d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d2:	68bb      	ldr	r3, [r7, #8]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000

080042fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004300:	f7ff fff0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004304:	4601      	mov	r1, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4a03      	ldr	r2, [pc, #12]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	080053cc 	.word	0x080053cc

08004324 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004348:	2b00      	cmp	r3, #0
 800434a:	d035      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800434c:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004352:	f7fd f96b 	bl	800162c <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435a:	f7fd f967 	bl	800162c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0b0      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800436c:	4b5b      	ldr	r3, [pc, #364]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	019a      	lsls	r2, r3, #6
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	071b      	lsls	r3, r3, #28
 8004384:	4955      	ldr	r1, [pc, #340]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800438c:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004392:	f7fd f94b 	bl	800162c <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800439a:	f7fd f947 	bl	800162c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e090      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ac:	4b4b      	ldr	r3, [pc, #300]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8083 	beq.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	4b44      	ldr	r3, [pc, #272]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a43      	ldr	r2, [pc, #268]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ee:	f7fd f91d 	bl	800162c <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7fd f919 	bl	800162c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e062      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004414:	4b31      	ldr	r3, [pc, #196]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	429a      	cmp	r2, r3
 8004430:	d028      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004432:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443c:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004442:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004448:	4a24      	ldr	r2, [pc, #144]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d114      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800445a:	f7fd f8e7 	bl	800162c <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	e00a      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fd f8e3 	bl	800162c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e02a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ee      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004490:	d10d      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a6:	490d      	ldr	r1, [pc, #52]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]
 80044ac:	e005      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044b8:	6093      	str	r3, [r2, #8]
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c6:	4905      	ldr	r1, [pc, #20]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	42470068 	.word	0x42470068
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40007000 	.word	0x40007000
 80044e4:	42470e40 	.word	0x42470e40

080044e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d13d      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004516:	2b01      	cmp	r3, #1
 8004518:	d12f      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800451a:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800451c:	617b      	str	r3, [r7, #20]
          break;
 800451e:	e02f      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452c:	d108      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	e007      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004548:	4a13      	ldr	r2, [pc, #76]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
          break;
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
          break;
 800457e:	bf00      	nop
        }
      }
      break;
 8004580:	bf00      	nop
    }
  }
  return frequency;
 8004582:	697b      	ldr	r3, [r7, #20]
}
 8004584:	4618      	mov	r0, r3
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40023800 	.word	0x40023800
 8004594:	00bb8000 	.word	0x00bb8000
 8004598:	00f42400 	.word	0x00f42400

0800459c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e01d      	b.n	80045ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fd48 	bl	8001058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f000 f90e 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	6839      	ldr	r1, [r7, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb48 	bl	8004c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a15      	ldr	r2, [pc, #84]	; (8004668 <HAL_TIM_PWM_Start+0x74>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIM_PWM_Start+0x2c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <HAL_TIM_PWM_Start+0x78>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_TIM_PWM_Start+0x30>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <HAL_TIM_PWM_Start+0x32>
 8004624:	2300      	movs	r3, #0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d007      	beq.n	800465c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400

08004670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004686:	2302      	movs	r3, #2
 8004688:	e0b4      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f200 809f 	bhi.w	80047e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080047e1 	.word	0x080047e1
 80046b0:	080047e1 	.word	0x080047e1
 80046b4:	080047e1 	.word	0x080047e1
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	080047e1 	.word	0x080047e1
 80046c0:	080047e1 	.word	0x080047e1
 80046c4:	080047e1 	.word	0x080047e1
 80046c8:	0800475f 	.word	0x0800475f
 80046cc:	080047e1 	.word	0x080047e1
 80046d0:	080047e1 	.word	0x080047e1
 80046d4:	080047e1 	.word	0x080047e1
 80046d8:	0800479f 	.word	0x0800479f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f92a 	bl	800493c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e062      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f97a 	bl	8004a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e041      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f9cf 	bl	8004b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e021      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fa23 	bl	8004bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e000      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <TIM_Base_SetConfig+0x114>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d00f      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3d      	ldr	r2, [pc, #244]	; (8004914 <TIM_Base_SetConfig+0x118>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00b      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3c      	ldr	r2, [pc, #240]	; (8004918 <TIM_Base_SetConfig+0x11c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3b      	ldr	r2, [pc, #236]	; (800491c <TIM_Base_SetConfig+0x120>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3a      	ldr	r2, [pc, #232]	; (8004920 <TIM_Base_SetConfig+0x124>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d108      	bne.n	800484e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <TIM_Base_SetConfig+0x114>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d02b      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d027      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2c      	ldr	r2, [pc, #176]	; (8004914 <TIM_Base_SetConfig+0x118>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d023      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <TIM_Base_SetConfig+0x11c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01f      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <TIM_Base_SetConfig+0x120>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01b      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a29      	ldr	r2, [pc, #164]	; (8004920 <TIM_Base_SetConfig+0x124>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d017      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a28      	ldr	r2, [pc, #160]	; (8004924 <TIM_Base_SetConfig+0x128>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a27      	ldr	r2, [pc, #156]	; (8004928 <TIM_Base_SetConfig+0x12c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00f      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <TIM_Base_SetConfig+0x130>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <TIM_Base_SetConfig+0x134>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a24      	ldr	r2, [pc, #144]	; (8004934 <TIM_Base_SetConfig+0x138>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a23      	ldr	r2, [pc, #140]	; (8004938 <TIM_Base_SetConfig+0x13c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d108      	bne.n	80048c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <TIM_Base_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0xf8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a0c      	ldr	r2, [pc, #48]	; (8004920 <TIM_Base_SetConfig+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d103      	bne.n	80048fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	615a      	str	r2, [r3, #20]
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40010000 	.word	0x40010000
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40010400 	.word	0x40010400
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800
 8004930:	40001800 	.word	0x40001800
 8004934:	40001c00 	.word	0x40001c00
 8004938:	40002000 	.word	0x40002000

0800493c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0302 	bic.w	r3, r3, #2
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <TIM_OC1_SetConfig+0xd8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_OC1_SetConfig+0x64>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <TIM_OC1_SetConfig+0xdc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10c      	bne.n	80049ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0308 	bic.w	r3, r3, #8
 80049a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <TIM_OC1_SetConfig+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_OC1_SetConfig+0x8e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <TIM_OC1_SetConfig+0xdc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d111      	bne.n	80049ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40010400 	.word	0x40010400

08004a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0320 	bic.w	r3, r3, #32
 8004a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <TIM_OC2_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC2_SetConfig+0x68>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <TIM_OC2_SetConfig+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10d      	bne.n	8004aa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <TIM_OC2_SetConfig+0xe4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC2_SetConfig+0x94>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a16      	ldr	r2, [pc, #88]	; (8004b04 <TIM_OC2_SetConfig+0xe8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d113      	bne.n	8004ad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010400 	.word	0x40010400

08004b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <TIM_OC3_SetConfig+0xe0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC3_SetConfig+0x66>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <TIM_OC3_SetConfig+0xe4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10d      	bne.n	8004b8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <TIM_OC3_SetConfig+0xe0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_OC3_SetConfig+0x92>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <TIM_OC3_SetConfig+0xe4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d113      	bne.n	8004bc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40010400 	.word	0x40010400

08004bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	031b      	lsls	r3, r3, #12
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <TIM_OC4_SetConfig+0xa4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC4_SetConfig+0x68>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <TIM_OC4_SetConfig+0xa8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d109      	bne.n	8004c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	019b      	lsls	r3, r3, #6
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400

08004c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2201      	movs	r2, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e05a      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d022      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d01d      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40001800 	.word	0x40001800

08004de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de0:	b084      	sub	sp, #16
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	f107 001c 	add.w	r0, r7, #28
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d122      	bne.n	8004e3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa56 	bl	80052e4 <USB_CoreReset>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e01a      	b.n	8004e74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa4a 	bl	80052e4 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
 8004e66:	e005      	b.n	8004e74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10b      	bne.n	8004e92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f043 0206 	orr.w	r2, r3, #6
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e9e:	b004      	add	sp, #16
 8004ea0:	4770      	bx	lr

08004ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d106      	bne.n	8004ef0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e00b      	b.n	8004f08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e001      	b.n	8004f08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e003      	b.n	8004f10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f08:	2032      	movs	r0, #50	; 0x32
 8004f0a:	f7fc fb9b 	bl	8001644 <HAL_Delay>

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f18:	b084      	sub	sp, #16
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e009      	b.n	8004f4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	3340      	adds	r3, #64	; 0x40
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0e      	cmp	r3, #14
 8004f50:	d9f2      	bls.n	8004f38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11c      	bne.n	8004f92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f66:	f043 0302 	orr.w	r3, r3, #2
 8004f6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f90:	e00b      	b.n	8004faa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	680b      	ldr	r3, [r1, #0]
 8004fc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10c      	bne.n	8004fea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f949 	bl	8005270 <USB_SetDevSpeed>
 8004fde:	e008      	b.n	8004ff2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f944 	bl	8005270 <USB_SetDevSpeed>
 8004fe8:	e003      	b.n	8004ff2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fea:	2103      	movs	r1, #3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f93f 	bl	8005270 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ff2:	2110      	movs	r1, #16
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8f3 	bl	80051e0 <USB_FlushTxFifo>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f911 	bl	800522c <USB_FlushRxFifo>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	461a      	mov	r2, r3
 8005034:	2300      	movs	r3, #0
 8005036:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e043      	b.n	80050c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005054:	d118      	bne.n	8005088 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	461a      	mov	r2, r3
 800506a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e013      	b.n	800509a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	461a      	mov	r2, r3
 8005080:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e008      	b.n	800509a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3301      	adds	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d3b7      	bcc.n	800503e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e043      	b.n	800515c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ea:	d118      	bne.n	800511e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e013      	b.n	8005130 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e008      	b.n	8005130 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	461a      	mov	r2, r3
 8005150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3301      	adds	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d3b7      	bcc.n	80050d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005176:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f043 0210 	orr.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <USB_DevInit+0x2c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f043 0208 	orr.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d107      	bne.n	80051cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d8:	b004      	add	sp, #16
 80051da:	4770      	bx	lr
 80051dc:	803c3800 	.word	0x803c3800

080051e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <USB_FlushTxFifo+0x48>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b20      	cmp	r3, #32
 8005216:	d0f0      	beq.n	80051fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	00030d40 	.word	0x00030d40

0800522c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2210      	movs	r2, #16
 800523c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <USB_FlushRxFifo+0x40>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e006      	b.n	800525e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d0f0      	beq.n	800523e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052bc:	f023 0303 	bic.w	r3, r3, #3
 80052c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <USB_CoreReset+0x64>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e01b      	b.n	800533a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	daf2      	bge.n	80052f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <USB_CoreReset+0x64>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d0f0      	beq.n	800531a <USB_CoreReset+0x36>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	00030d40 	.word	0x00030d40

0800534c <__libc_init_array>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4e0d      	ldr	r6, [pc, #52]	; (8005384 <__libc_init_array+0x38>)
 8005350:	4c0d      	ldr	r4, [pc, #52]	; (8005388 <__libc_init_array+0x3c>)
 8005352:	1ba4      	subs	r4, r4, r6
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	2500      	movs	r5, #0
 8005358:	42a5      	cmp	r5, r4
 800535a:	d109      	bne.n	8005370 <__libc_init_array+0x24>
 800535c:	4e0b      	ldr	r6, [pc, #44]	; (800538c <__libc_init_array+0x40>)
 800535e:	4c0c      	ldr	r4, [pc, #48]	; (8005390 <__libc_init_array+0x44>)
 8005360:	f000 f820 	bl	80053a4 <_init>
 8005364:	1ba4      	subs	r4, r4, r6
 8005366:	10a4      	asrs	r4, r4, #2
 8005368:	2500      	movs	r5, #0
 800536a:	42a5      	cmp	r5, r4
 800536c:	d105      	bne.n	800537a <__libc_init_array+0x2e>
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005374:	4798      	blx	r3
 8005376:	3501      	adds	r5, #1
 8005378:	e7ee      	b.n	8005358 <__libc_init_array+0xc>
 800537a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800537e:	4798      	blx	r3
 8005380:	3501      	adds	r5, #1
 8005382:	e7f2      	b.n	800536a <__libc_init_array+0x1e>
 8005384:	080053e4 	.word	0x080053e4
 8005388:	080053e4 	.word	0x080053e4
 800538c:	080053e4 	.word	0x080053e4
 8005390:	080053e8 	.word	0x080053e8

08005394 <memset>:
 8005394:	4402      	add	r2, r0
 8005396:	4603      	mov	r3, r0
 8005398:	4293      	cmp	r3, r2
 800539a:	d100      	bne.n	800539e <memset+0xa>
 800539c:	4770      	bx	lr
 800539e:	f803 1b01 	strb.w	r1, [r3], #1
 80053a2:	e7f9      	b.n	8005398 <memset+0x4>

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
