
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007144  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080072d0  080072d0  000172d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c8  080074c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074d0  080074d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080074d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  2000000c  080074e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  080074e4  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002793  00000000  00000000  00033300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  00036d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002266e  00000000  00000000  00037ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef43  00000000  00000000  0005a546  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d17ff  00000000  00000000  00069489  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ac88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  0013ad04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072b4 	.word	0x080072b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080072b4 	.word	0x080072b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <compute_BPF_coeff>:
/*
 * Executes once before entering program loop
 */


void compute_BPF_coeff(biquad_t *bq, float w0, float Q){
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e70:	edc7 0a01 	vstr	s1, [r7, #4]
  float sinw0_over2 = sin(w0)/2;
 8000e74:	68b8      	ldr	r0, [r7, #8]
 8000e76:	f7ff fb0b 	bl	8000490 <__aeabi_f2d>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	ec44 3b10 	vmov	d0, r3, r4
 8000e82:	f005 fa05 	bl	8006290 <sin>
 8000e86:	ec51 0b10 	vmov	r0, r1, d0
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e92:	f7ff fc7f 	bl	8000794 <__aeabi_ddiv>
 8000e96:	4603      	mov	r3, r0
 8000e98:	460c      	mov	r4, r1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	f7ff fe11 	bl	8000ac4 <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	617b      	str	r3, [r7, #20]
  float alpha = sinw0_over2/Q;;
 8000ea6:	edd7 6a05 	vldr	s13, [r7, #20]
 8000eaa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb2:	edc7 7a04 	vstr	s15, [r7, #16]

  bq->ready_coef = 0; //lock
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  bq->shadow_coef.b0 = sinw0_over2;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	619a      	str	r2, [r3, #24]
  bq->shadow_coef.b1 = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  bq->shadow_coef.b2 = -sinw0_over2;
 8000ecc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ed0:	eef1 7a67 	vneg.f32	s15, s15
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	edc3 7a08 	vstr	s15, [r3, #32]

  bq->shadow_coef.a0 = 1+alpha;
 8000eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  bq->shadow_coef.a1 = -2*cos(w0);
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f7ff facf 	bl	8000490 <__aeabi_f2d>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	ec44 3b10 	vmov	d0, r3, r4
 8000efa:	f005 f985 	bl	8006208 <cos>
 8000efe:	ec51 0b10 	vmov	r0, r1, d0
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f0a:	f7ff fb19 	bl	8000540 <__aeabi_dmul>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	4618      	mov	r0, r3
 8000f14:	4621      	mov	r1, r4
 8000f16:	f7ff fdd5 	bl	8000ac4 <__aeabi_d2f>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  bq->shadow_coef.a2 = 1-alpha;
 8000f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f24:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  bq->ready_coef = 1; //unlock
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

}
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}

08000f42 <compute_biquad>:

  //bq->ready_coef = 1; // flag ISR that it's safe to copy the shadows

}

void compute_biquad(biquad_t *bq, float *in, float *out){
 8000f42:	b4b0      	push	{r4, r5, r7}
 8000f44:	b08b      	sub	sp, #44	; 0x2c
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]

  //if shadow coefficients are done
  if(bq->ready_coef == 1) {
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d10e      	bne.n	8000f76 <compute_biquad+0x34>
      bq->coef = bq->shadow_coef;
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4615      	mov	r5, r2
 8000f5e:	f103 0418 	add.w	r4, r3, #24
 8000f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6a:	e885 0003 	stmia.w	r5, {r0, r1}
      bq->ready_coef = 0;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  float b0 = bq->coef.b0;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  float b1 = bq->coef.b1;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	623b      	str	r3, [r7, #32]
  float b2 = bq->coef.b2;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61fb      	str	r3, [r7, #28]

  float a0 = bq->coef.a0;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
  float a1 = bq->coef.a1;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	617b      	str	r3, [r7, #20]
  float a2 = bq->coef.a2;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	613b      	str	r3, [r7, #16]

  *out = (*in)*(b0/a0);
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8000fa4:	edd7 6a06 	vldr	s13, [r7, #24]
 8000fa8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
  *out += bq->xn1*(b1/a0);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8000fc2:	edd7 5a08 	vldr	s11, [r7, #32]
 8000fc6:	ed97 6a06 	vldr	s12, [r7, #24]
 8000fca:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8000fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
  *out += bq->xn2*(b2/a0);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8000fe8:	edd7 5a07 	vldr	s11, [r7, #28]
 8000fec:	ed97 6a06 	vldr	s12, [r7, #24]
 8000ff0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edc3 7a00 	vstr	s15, [r3]
  *out -= bq->yn1*(a1/a0);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800100e:	edd7 5a05 	vldr	s11, [r7, #20]
 8001012:	ed97 6a06 	vldr	s12, [r7, #24]
 8001016:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800101a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edc3 7a00 	vstr	s15, [r3]
  *out -= bq->yn2*(a2/a0);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	ed93 7a00 	vldr	s14, [r3]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001034:	edd7 5a04 	vldr	s11, [r7, #16]
 8001038:	ed97 6a06 	vldr	s12, [r7, #24]
 800103c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edc3 7a00 	vstr	s15, [r3]

  //update struct
  bq->yn2 = bq->yn1;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
  bq->yn1 = *out;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
  bq->xn2 = bq->xn1;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
  bq->xn1 = *in;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800106e:	bf00      	nop
 8001070:	372c      	adds	r7, #44	; 0x2c
 8001072:	46bd      	mov	sp, r7
 8001074:	bcb0      	pop	{r4, r5, r7}
 8001076:	4770      	bx	lr

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b598      	push	{r3, r4, r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f001 f87c 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f884 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fb46 	bl	8001714 <MX_GPIO_Init>
  MX_DMA_Init();
 8001088:	f000 fb24 	bl	80016d4 <MX_DMA_Init>
  MX_ADC1_Init();
 800108c:	f000 f8fc 	bl	8001288 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001090:	f000 f94c 	bl	800132c <MX_I2C1_Init>
  MX_I2S2_Init();
 8001094:	f000 f978 	bl	8001388 <MX_I2S2_Init>
  MX_TIM2_Init();
 8001098:	f000 f9a4 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800109c:	f000 fa04 	bl	80014a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010a0:	f000 fa7c 	bl	800159c <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a4:	f000 fae8 	bl	8001678 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  process_init();
 80010a8:	f000 fbd2 	bl	8001850 <process_init>
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 4);
 80010ac:	2304      	movs	r3, #4
 80010ae:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <main+0xe8>)
 80010b0:	492c      	ldr	r1, [pc, #176]	; (8001164 <main+0xec>)
 80010b2:	482d      	ldr	r0, [pc, #180]	; (8001168 <main+0xf0>)
 80010b4:	f002 fe9e 	bl	8003df4 <HAL_I2SEx_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

      HAL_ADC_Start(&hadc1);
 80010b8:	482c      	ldr	r0, [pc, #176]	; (800116c <main+0xf4>)
 80010ba:	f001 f935 	bl	8002328 <HAL_ADC_Start>

      HAL_ADC_PollForConversion(&hadc1,100);
 80010be:	2164      	movs	r1, #100	; 0x64
 80010c0:	482a      	ldr	r0, [pc, #168]	; (800116c <main+0xf4>)
 80010c2:	f001 fa2a 	bl	800251a <HAL_ADC_PollForConversion>

      //0 to 255
      adc1_ch1_val = 255-HAL_ADC_GetValue(&hadc1);
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <main+0xf4>)
 80010c8:	f001 faab 	bl	8002622 <HAL_ADC_GetValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <main+0xf8>)
 80010d6:	701a      	strb	r2, [r3, #0]

      HAL_ADC_Stop(&hadc1);
 80010d8:	4824      	ldr	r0, [pc, #144]	; (800116c <main+0xf4>)
 80010da:	f001 f9eb 	bl	80024b4 <HAL_ADC_Stop>

      F0 = 1000 + (adc1_ch1_val*10);
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <main+0xf8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <main+0xfc>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]
      w0 = 2*3.14159*(F0/46875);
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <main+0xfc>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001178 <main+0x100>
 8001108:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800110c:	ee16 0a90 	vmov	r0, s13
 8001110:	f7ff f9be 	bl	8000490 <__aeabi_f2d>
 8001114:	a310      	add	r3, pc, #64	; (adr r3, 8001158 <main+0xe0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fa11 	bl	8000540 <__aeabi_dmul>
 800111e:	4603      	mov	r3, r0
 8001120:	460c      	mov	r4, r1
 8001122:	4618      	mov	r0, r3
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff fccd 	bl	8000ac4 <__aeabi_d2f>
 800112a:	4602      	mov	r2, r0
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <main+0x104>)
 800112e:	601a      	str	r2, [r3, #0]
      Q = 6;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <main+0x108>)
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <main+0x10c>)
 8001134:	601a      	str	r2, [r3, #0]

      compute_BPF_coeff(&BPF_biquad, w0, Q);
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <main+0x104>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <main+0x108>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eef0 0a47 	vmov.f32	s1, s14
 8001146:	eeb0 0a67 	vmov.f32	s0, s15
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <main+0x110>)
 800114c:	f7ff fe8a 	bl	8000e64 <compute_BPF_coeff>

      HAL_Delay(25);
 8001150:	2019      	movs	r0, #25
 8001152:	f001 f883 	bl	800225c <HAL_Delay>
      HAL_ADC_Start(&hadc1);
 8001156:	e7af      	b.n	80010b8 <main+0x40>
 8001158:	f01b866e 	.word	0xf01b866e
 800115c:	401921f9 	.word	0x401921f9
 8001160:	200005a8 	.word	0x200005a8
 8001164:	200005bc 	.word	0x200005bc
 8001168:	200006d0 	.word	0x200006d0
 800116c:	20000560 	.word	0x20000560
 8001170:	200006cc 	.word	0x200006cc
 8001174:	2000055c 	.word	0x2000055c
 8001178:	47371b00 	.word	0x47371b00
 800117c:	20000558 	.word	0x20000558
 8001180:	200004d0 	.word	0x200004d0
 8001184:	40c00000 	.word	0x40c00000
 8001188:	200004d4 	.word	0x200004d4

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b098      	sub	sp, #96	; 0x60
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f005 f82c 	bl	80061f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <SystemClock_Config+0xf4>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <SystemClock_Config+0xf4>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <SystemClock_Config+0xf4>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <SystemClock_Config+0xf8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <SystemClock_Config+0xf8>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <SystemClock_Config+0xf8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f6:	2301      	movs	r3, #1
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001204:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800120a:	2308      	movs	r3, #8
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800120e:	23a8      	movs	r3, #168	; 0xa8
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001216:	2307      	movs	r3, #7
 8001218:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fbca 	bl	80049b8 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800122a:	f000 fc15 	bl	8001a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001236:	2390      	movs	r3, #144	; 0x90
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fe25 	bl	8004e98 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001254:	f000 fc00 	bl	8001a58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001258:	2301      	movs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fff1 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001274:	f000 fbf0 	bl	8001a58 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3760      	adds	r7, #96	; 0x60
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_ADC1_Init+0x98>)
 800129c:	4a21      	ldr	r2, [pc, #132]	; (8001324 <MX_ADC1_Init+0x9c>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_ADC1_Init+0x98>)
 80012a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_ADC1_Init+0x98>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_ADC1_Init+0x98>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_ADC1_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_ADC1_Init+0x98>)
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <MX_ADC1_Init+0xa0>)
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_ADC1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_ADC1_Init+0x98>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_ADC1_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_ADC1_Init+0x98>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_ADC1_Init+0x98>)
 80012ea:	f000 ffd9 	bl	80022a0 <HAL_ADC_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 fbb0 	bl	8001a58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_ADC1_Init+0x98>)
 800130a:	f001 f997 	bl	800263c <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001314:	f000 fba0 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000560 	.word	0x20000560
 8001324:	40012000 	.word	0x40012000
 8001328:	0f000001 	.word	0x0f000001

0800132c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f002 f9b9 	bl	80036e0 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fb70 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000074 	.word	0x20000074
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_I2S2_Init+0x54>)
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <MX_I2S2_Init+0x58>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_I2S2_Init+0x54>)
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_I2S2_Init+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_I2S2_Init+0x54>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_I2S2_Init+0x54>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_I2S2_Init+0x54>)
 80013b0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80013b4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_I2S2_Init+0x54>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_I2S2_Init+0x54>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_I2S2_Init+0x54>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_I2S2_Init+0x54>)
 80013ca:	f002 fac1 	bl	8003950 <HAL_I2S_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80013d4:	f000 fb40 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200006d0 	.word	0x200006d0
 80013e0:	40003800 	.word	0x40003800

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_TIM2_Init+0xc0>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800142c:	481d      	ldr	r0, [pc, #116]	; (80014a4 <MX_TIM2_Init+0xc0>)
 800142e:	f004 f84b 	bl	80054c8 <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001438:	f000 fb0e 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4619      	mov	r1, r3
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <MX_TIM2_Init+0xc0>)
 800144c:	f004 fb7e 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001456:	f000 faff 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	; 0x60
 800145c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001472:	f004 f855 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800147c:	f000 faec 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	220c      	movs	r2, #12
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001488:	f004 f84a 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001492:	f000 fae1 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM2_Init+0xc0>)
 8001498:	f000 fcd0 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200005cc 	.word	0x200005cc

080014a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MX_TIM3_Init+0xec>)
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <MX_TIM3_Init+0xf0>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <MX_TIM3_Init+0xec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <MX_TIM3_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_TIM3_Init+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <MX_TIM3_Init+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_TIM3_Init+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ee:	4829      	ldr	r0, [pc, #164]	; (8001594 <MX_TIM3_Init+0xec>)
 80014f0:	f003 ffea 	bl	80054c8 <HAL_TIM_PWM_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80014fa:	f000 faad 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	4619      	mov	r1, r3
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <MX_TIM3_Init+0xec>)
 800150e:	f004 fb1d 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001518:	f000 fa9e 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151c:	2360      	movs	r3, #96	; 0x60
 800151e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	4818      	ldr	r0, [pc, #96]	; (8001594 <MX_TIM3_Init+0xec>)
 8001534:	f003 fff4 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800153e:	f000 fa8b 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2204      	movs	r2, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4812      	ldr	r0, [pc, #72]	; (8001594 <MX_TIM3_Init+0xec>)
 800154a:	f003 ffe9 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001554:	f000 fa80 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2208      	movs	r2, #8
 800155c:	4619      	mov	r1, r3
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <MX_TIM3_Init+0xec>)
 8001560:	f003 ffde 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800156a:	f000 fa75 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	220c      	movs	r2, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <MX_TIM3_Init+0xec>)
 8001576:	f003 ffd3 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001580:	f000 fa6a 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <MX_TIM3_Init+0xec>)
 8001586:	f000 fc59 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000518 	.word	0x20000518
 8001598:	40000400 	.word	0x40000400

0800159c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015c0:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <MX_TIM4_Init+0xd8>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <MX_TIM4_Init+0xd4>)
 80015e4:	f003 ff70 	bl	80054c8 <HAL_TIM_PWM_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80015ee:	f000 fa33 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	4619      	mov	r1, r3
 8001600:	481b      	ldr	r0, [pc, #108]	; (8001670 <MX_TIM4_Init+0xd4>)
 8001602:	f004 faa3 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800160c:	f000 fa24 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001610:	2360      	movs	r3, #96	; 0x60
 8001612:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <MX_TIM4_Init+0xd4>)
 8001628:	f003 ff7a 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001632:	f000 fa11 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2204      	movs	r2, #4
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM4_Init+0xd4>)
 800163e:	f003 ff6f 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001648:	f000 fa06 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2208      	movs	r2, #8
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM4_Init+0xd4>)
 8001654:	f003 ff64 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800165e:	f000 f9fb 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM4_Init+0xd4>)
 8001664:	f000 fbea 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000034 	.word	0x20000034
 8001674:	40000800 	.word	0x40000800

08001678 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001682:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001686:	2204      	movs	r2, #4
 8001688:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168c:	2202      	movs	r2, #2
 800168e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001698:	2202      	movs	r2, #2
 800169a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016bc:	f003 f85e 	bl	800477c <HAL_PCD_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 f9c7 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200000c8 	.word	0x200000c8

080016d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_DMA_Init+0x3c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <MX_DMA_Init+0x3c>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_DMA_Init+0x3c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	200e      	movs	r0, #14
 80016fc:	f001 fa97 	bl	8002c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001700:	200e      	movs	r0, #14
 8001702:	f001 fab0 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <MX_GPIO_Init+0x130>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a44      	ldr	r2, [pc, #272]	; (8001844 <MX_GPIO_Init+0x130>)
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <MX_GPIO_Init+0x130>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <MX_GPIO_Init+0x130>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <MX_GPIO_Init+0x130>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <MX_GPIO_Init+0x130>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <MX_GPIO_Init+0x130>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a36      	ldr	r2, [pc, #216]	; (8001844 <MX_GPIO_Init+0x130>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <MX_GPIO_Init+0x130>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <MX_GPIO_Init+0x130>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <MX_GPIO_Init+0x130>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <MX_GPIO_Init+0x130>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <MX_GPIO_Init+0x130>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a28      	ldr	r2, [pc, #160]	; (8001844 <MX_GPIO_Init+0x130>)
 80017a4:	f043 0310 	orr.w	r3, r3, #16
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <MX_GPIO_Init+0x130>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <MX_GPIO_Init+0x130>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a21      	ldr	r2, [pc, #132]	; (8001844 <MX_GPIO_Init+0x130>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <MX_GPIO_Init+0x130>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017d8:	481b      	ldr	r0, [pc, #108]	; (8001848 <MX_GPIO_Init+0x134>)
 80017da:	f001 ff67 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2107      	movs	r1, #7
 80017e2:	481a      	ldr	r0, [pc, #104]	; (800184c <MX_GPIO_Init+0x138>)
 80017e4:	f001 ff62 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <MX_GPIO_Init+0x134>)
 80017fe:	f001 fdbb 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001802:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	480b      	ldr	r0, [pc, #44]	; (8001848 <MX_GPIO_Init+0x134>)
 800181c:	f001 fdac 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001820:	2307      	movs	r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_GPIO_Init+0x138>)
 8001838:	f001 fd9e 	bl	8003378 <HAL_GPIO_Init>

}
 800183c:	bf00      	nop
 800183e:	3730      	adds	r7, #48	; 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40021000 	.word	0x40021000
 800184c:	40020c00 	.word	0x40020c00

08001850 <process_init>:

/* USER CODE BEGIN 4 */
void process_init()
{
 8001850:	b598      	push	{r3, r4, r7, lr}
 8001852:	af00      	add	r7, sp, #0
  BPF_biquad.yn2 = 0;
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <process_init+0x90>)
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c
  BPF_biquad.yn1 = 0;
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <process_init+0x90>)
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	639a      	str	r2, [r3, #56]	; 0x38
  BPF_biquad.xn2 = 0;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <process_init+0x90>)
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
  BPF_biquad.xn1 = 0;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <process_init+0x90>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	631a      	str	r2, [r3, #48]	; 0x30


  F0 = 1000; // 1500 Hz LPF cutoff;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <process_init+0x94>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <process_init+0x98>)
 8001878:	601a      	str	r2, [r3, #0]
  w0 = 2*3.141592*(F0/46875);
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <process_init+0x94>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018ec <process_init+0x9c>
 8001884:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001888:	ee16 0a90 	vmov	r0, s13
 800188c:	f7fe fe00 	bl	8000490 <__aeabi_f2d>
 8001890:	a311      	add	r3, pc, #68	; (adr r3, 80018d8 <process_init+0x88>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fe53 	bl	8000540 <__aeabi_dmul>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	4618      	mov	r0, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	f7ff f90f 	bl	8000ac4 <__aeabi_d2f>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <process_init+0xa0>)
 80018aa:	601a      	str	r2, [r3, #0]
  Q = 2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <process_init+0xa4>)
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b2:	601a      	str	r2, [r3, #0]

  //with pot, this wil be an inital ADC reading to compute the first set of coeffs
  //compute an initial set of coefficients to avoid Nan
  compute_BPF_coeff(&BPF_biquad, w0, Q);
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <process_init+0xa0>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <process_init+0xa4>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	eef0 0a47 	vmov.f32	s1, s14
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <process_init+0x90>)
 80018ca:	f7ff facb 	bl	8000e64 <compute_BPF_coeff>

}
 80018ce:	bf00      	nop
 80018d0:	bd98      	pop	{r3, r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	fc8b007a 	.word	0xfc8b007a
 80018dc:	401921fa 	.word	0x401921fa
 80018e0:	200004d4 	.word	0x200004d4
 80018e4:	2000055c 	.word	0x2000055c
 80018e8:	447a0000 	.word	0x447a0000
 80018ec:	47371b00 	.word	0x47371b00
 80018f0:	20000558 	.word	0x20000558
 80018f4:	200004d0 	.word	0x200004d0

080018f8 <process>:

void process(int *left_in, int *right_in, int *left_out, int *right_out)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  float in = (float)*left_in;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	edc7 7a05 	vstr	s15, [r7, #20]
  float out = 0;
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	613b      	str	r3, [r7, #16]

  compute_biquad(&BPF_biquad, &in, &out);
 800191c:	f107 0210 	add.w	r2, r7, #16
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4809      	ldr	r0, [pc, #36]	; (800194c <process+0x54>)
 8001928:	f7ff fb0b 	bl	8000f42 <compute_biquad>

  // at 48000 Hz, it takes approx. 200 ms to increase knob_counter by 10000
  //knob_counter ++;

  //output
  *left_out = (int)out;
 800192c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001934:	ee17 2a90 	vmov	r2, s15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	601a      	str	r2, [r3, #0]
  *right_out = *left_out;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	601a      	str	r2, [r3, #0]

}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200004d4 	.word	0x200004d4

08001950 <HAL_I2SEx_TxRxHalfCpltCallback>:
//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  //shift right by 8 to right justify the 24 bit sample that had been xfered on a 32 bit frame
  left_in  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8001960:	8852      	ldrh	r2, [r2, #2]
 8001962:	4313      	orrs	r3, r2
 8001964:	121b      	asrs	r3, r3, #8
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001968:	6013      	str	r3, [r2, #0]
  right_in = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8001972:	88d2      	ldrh	r2, [r2, #6]
 8001974:	4313      	orrs	r3, r2
 8001976:	121b      	asrs	r3, r3, #8
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 800197a:	6013      	str	r3, [r2, #0]

  // does the audio processing
  process(&left_in, &right_in, &left_out, &right_out);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8001980:	4910      	ldr	r1, [pc, #64]	; (80019c4 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001984:	f7ff ffb8 	bl	80018f8 <process>

  tx_buf[0] = (left_out>>8) & 0xFFFF;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	121b      	asrs	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8001992:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = left_out & 0xFFFF;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 800199c:	805a      	strh	r2, [r3, #2]
  tx_buf[2] = (right_out>>8) & 0xFFFF;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	121b      	asrs	r3, r3, #8
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 80019a8:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = right_out & 0xFFFF;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 80019b2:	80da      	strh	r2, [r3, #6]

}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200005a8 	.word	0x200005a8
 80019c0:	20000030 	.word	0x20000030
 80019c4:	2000002c 	.word	0x2000002c
 80019c8:	20000028 	.word	0x20000028
 80019cc:	200005b8 	.word	0x200005b8
 80019d0:	200005bc 	.word	0x200005bc

080019d4 <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  //shift right by 8 to right justify the 24 bit sample that had been xfered on a 32 bit frame
  left_in  = (((int)rx_buf[4]<<16)|rx_buf[5])>>8;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 80019de:	891b      	ldrh	r3, [r3, #8]
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 80019e4:	8952      	ldrh	r2, [r2, #10]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	121b      	asrs	r3, r3, #8
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 80019ec:	6013      	str	r3, [r2, #0]
  right_in = (((int)rx_buf[6]<<16)|rx_buf[7])>>8;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 80019f0:	899b      	ldrh	r3, [r3, #12]
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 80019f6:	89d2      	ldrh	r2, [r2, #14]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	121b      	asrs	r3, r3, #8
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_I2SEx_TxRxCpltCallback+0x74>)
 80019fe:	6013      	str	r3, [r2, #0]

  // does the audio processing
  process(&left_in, &right_in, &left_out, &right_out);
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8001a04:	4910      	ldr	r1, [pc, #64]	; (8001a48 <HAL_I2SEx_TxRxCpltCallback+0x74>)
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8001a08:	f7ff ff76 	bl	80018f8 <process>

  tx_buf[4] = (left_out>>8) & 0xFFFF;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	121b      	asrs	r3, r3, #8
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8001a16:	811a      	strh	r2, [r3, #8]
  tx_buf[5] = left_out & 0xFFFF;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8001a20:	815a      	strh	r2, [r3, #10]
  tx_buf[6] = (right_out>>8) & 0xFFFF;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	121b      	asrs	r3, r3, #8
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8001a2c:	819a      	strh	r2, [r3, #12]
  tx_buf[7] = right_out & 0xFFFF;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8001a36:	81da      	strh	r2, [r3, #14]

}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200005a8 	.word	0x200005a8
 8001a44:	20000030 	.word	0x20000030
 8001a48:	2000002c 	.word	0x2000002c
 8001a4c:	20000028 	.word	0x20000028
 8001a50:	200005b8 	.word	0x200005b8
 8001a54:	200005bc 	.word	0x200005bc

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_ADC_MspInit+0x7c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d127      	bne.n	8001b2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_ADC_MspInit+0x80>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <HAL_ADC_MspInit+0x80>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_ADC_MspInit+0x80>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_ADC_MspInit+0x80>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_ADC_MspInit+0x80>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_ADC_MspInit+0x80>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b12:	230e      	movs	r3, #14
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_ADC_MspInit+0x84>)
 8001b26:	f001 fc27 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40012000 	.word	0x40012000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_I2C_MspInit+0x84>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12b      	bne.n	8001bba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b82:	2312      	movs	r3, #18
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <HAL_I2C_MspInit+0x8c>)
 8001b9a:	f001 fbed 	bl	8003378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	; (8001d84 <HAL_I2S_MspInit+0x1b4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	f040 80c4 	bne.w	8001d7c <HAL_I2S_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a62      	ldr	r2, [pc, #392]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <HAL_I2S_MspInit+0x1b8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	484a      	ldr	r0, [pc, #296]	; (8001d8c <HAL_I2S_MspInit+0x1bc>)
 8001c64:	f001 fb88 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001c68:	2348      	movs	r3, #72	; 0x48
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4842      	ldr	r0, [pc, #264]	; (8001d8c <HAL_I2S_MspInit+0x1bc>)
 8001c84:	f001 fb78 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	483a      	ldr	r0, [pc, #232]	; (8001d90 <HAL_I2S_MspInit+0x1c0>)
 8001ca6:	f001 fb67 	bl	8003378 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <HAL_I2S_MspInit+0x1c8>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001cb0:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cb2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001cb6:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbe:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cca:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd2:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce2:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001cf0:	4828      	ldr	r0, [pc, #160]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001cf2:	f000 ffd3 	bl	8002c9c <HAL_DMA_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8001cfc:	f7ff feac 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_I2S_MspInit+0x1c4>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d0e:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <HAL_I2S_MspInit+0x1d0>)
 8001d10:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d18:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d42:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d50:	4812      	ldr	r0, [pc, #72]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d52:	f000 ffa3 	bl	8002c9c <HAL_DMA_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 8001d5c:	f7ff fe7c 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_I2S_MspInit+0x1cc>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2024      	movs	r0, #36	; 0x24
 8001d72:	f000 ff5c 	bl	8002c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d76:	2024      	movs	r0, #36	; 0x24
 8001d78:	f000 ff75 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40003800 	.word	0x40003800
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020400 	.word	0x40020400
 8001d94:	2000060c 	.word	0x2000060c
 8001d98:	40026058 	.word	0x40026058
 8001d9c:	2000066c 	.word	0x2000066c
 8001da0:	40026070 	.word	0x40026070

08001da4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dd2:	e026      	b.n	8001e22 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_TIM_PWM_MspInit+0x90>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	e012      	b.n	8001e22 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <HAL_TIM_PWM_MspInit+0x94>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10d      	bne.n	8001e22 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800

08001e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5c:	d13d      	bne.n	8001eda <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4840      	ldr	r0, [pc, #256]	; (8001fb4 <HAL_TIM_MspPostInit+0x178>)
 8001eb2:	f001 fa61 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4839      	ldr	r0, [pc, #228]	; (8001fb8 <HAL_TIM_MspPostInit+0x17c>)
 8001ed4:	f001 fa50 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ed8:	e065      	b.n	8001fa6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a37      	ldr	r2, [pc, #220]	; (8001fbc <HAL_TIM_MspPostInit+0x180>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d13c      	bne.n	8001f5e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a30      	ldr	r2, [pc, #192]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f1c:	23c0      	movs	r3, #192	; 0xc0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	481f      	ldr	r0, [pc, #124]	; (8001fb4 <HAL_TIM_MspPostInit+0x178>)
 8001f38:	f001 fa1e 	bl	8003378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4818      	ldr	r0, [pc, #96]	; (8001fb8 <HAL_TIM_MspPostInit+0x17c>)
 8001f58:	f001 fa0e 	bl	8003378 <HAL_GPIO_Init>
}
 8001f5c:	e023      	b.n	8001fa6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_TIM_MspPostInit+0x184>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d11e      	bne.n	8001fa6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_MspPostInit+0x174>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f84:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f96:	2302      	movs	r3, #2
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <HAL_TIM_MspPostInit+0x188>)
 8001fa2:	f001 f9e9 	bl	8003378 <HAL_GPIO_Init>
}
 8001fa6:	bf00      	nop
 8001fa8:	3730      	adds	r7, #48	; 0x30
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40020c00 	.word	0x40020c00

08001fc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe8:	d132      	bne.n	8002050 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_PCD_MspInit+0x90>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a19      	ldr	r2, [pc, #100]	; (8002058 <HAL_PCD_MspInit+0x90>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_PCD_MspInit+0x90>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002018:	230a      	movs	r3, #10
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	480e      	ldr	r0, [pc, #56]	; (800205c <HAL_PCD_MspInit+0x94>)
 8002024:	f001 f9a8 	bl	8003378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_PCD_MspInit+0x90>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_PCD_MspInit+0x90>)
 800202e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002032:	6353      	str	r3, [r2, #52]	; 0x34
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_PCD_MspInit+0x90>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_PCD_MspInit+0x90>)
 800203e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002042:	6453      	str	r3, [r2, #68]	; 0x44
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <HAL_PCD_MspInit+0x90>)
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f000 f8b2 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Stream3_IRQHandler+0x10>)
 80020c2:	f000 fef1 	bl	8002ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000060c 	.word	0x2000060c

080020d0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA1_Stream4_IRQHandler+0x10>)
 80020d6:	f000 fee7 	bl	8002ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000066c 	.word	0x2000066c

080020e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <SPI2_IRQHandler+0x10>)
 80020ea:	f001 fd71 	bl	8003bd0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200006d0 	.word	0x200006d0

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <SystemInit+0x28>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <SystemInit+0x28>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SystemInit+0x28>)
 800210e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002112:	609a      	str	r2, [r3, #8]
#endif
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800212a:	e003      	b.n	8002134 <LoopCopyDataInit>

0800212c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800212e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002132:	3104      	adds	r1, #4

08002134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002134:	480b      	ldr	r0, [pc, #44]	; (8002164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800213a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800213c:	d3f6      	bcc.n	800212c <CopyDataInit>
  ldr  r2, =_sbss
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002140:	e002      	b.n	8002148 <LoopFillZerobss>

08002142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002144:	f842 3b04 	str.w	r3, [r2], #4

08002148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800214a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800214c:	d3f9      	bcc.n	8002142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800214e:	f7ff ffd3 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002152:	f004 f82d 	bl	80061b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7fe ff8f 	bl	8001078 <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800215c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002160:	080074d8 	.word	0x080074d8
  ldr  r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002168:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800216c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002170:	2000071c 	.word	0x2000071c

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 fd39 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fc5c 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fd51 	bl	8002c82 <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f8:	f000 fd19 	bl	8002c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000000 	.word	0x20000000
 8002214:	20000008 	.word	0x20000008
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008
 8002240:	20000718 	.word	0x20000718

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000718 	.word	0x20000718

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_Delay+0x40>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e033      	b.n	800231e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fbfa 	bl	8001ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fac4 	bl	8002880 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Start+0x1a>
 800233e:	2302      	movs	r3, #2
 8002340:	e0a5      	b.n	800248e <HAL_ADC_Start+0x166>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d018      	beq.n	800238a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_ADC_Start+0x174>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_ADC_Start+0x178>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0c9a      	lsrs	r2, r3, #18
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d179      	bne.n	800248c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d106      	bne.n	80023e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f023 0206 	bic.w	r2, r3, #6
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
 80023e4:	e002      	b.n	80023ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_ADC_Start+0x17c>)
 80023f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12a      	bne.n	8002464 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <HAL_ADC_Start+0x180>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d015      	beq.n	8002444 <HAL_ADC_Start+0x11c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_ADC_Start+0x184>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d105      	bne.n	800242e <HAL_ADC_Start+0x106>
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_ADC_Start+0x17c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <HAL_ADC_Start+0x188>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d129      	bne.n	800248c <HAL_ADC_Start+0x164>
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_ADC_Start+0x17c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d823      	bhi.n	800248c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11c      	bne.n	800248c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	e013      	b.n	800248c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_ADC_Start+0x180>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10e      	bne.n	800248c <HAL_ADC_Start+0x164>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800248a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000
 80024a0:	431bde83 	.word	0x431bde83
 80024a4:	40012300 	.word	0x40012300
 80024a8:	40012000 	.word	0x40012000
 80024ac:	40012100 	.word	0x40012100
 80024b0:	40012200 	.word	0x40012200

080024b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Stop+0x16>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e021      	b.n	800250e <HAL_ADC_Stop+0x5a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002536:	d113      	bne.n	8002560 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002546:	d10b      	bne.n	8002560 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e05c      	b.n	800261a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002560:	f7ff fe70 	bl	8002244 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002566:	e01a      	b.n	800259e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256e:	d016      	beq.n	800259e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_ADC_PollForConversion+0x6c>
 8002576:	f7ff fe65 	bl	8002244 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d20b      	bcs.n	800259e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0204 	orr.w	r2, r3, #4
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03d      	b.n	800261a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d1dd      	bne.n	8002568 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0212 	mvn.w	r2, #18
 80025b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d123      	bne.n	8002618 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11f      	bne.n	8002618 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1c>
 8002654:	2302      	movs	r3, #2
 8002656:	e105      	b.n	8002864 <HAL_ADC_ConfigChannel+0x228>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b09      	cmp	r3, #9
 8002666:	d925      	bls.n	80026b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68d9      	ldr	r1, [r3, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	3b1e      	subs	r3, #30
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4403      	add	r3, r0
 80026a6:	3b1e      	subs	r3, #30
 80026a8:	409a      	lsls	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	e022      	b.n	80026fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	2207      	movs	r2, #7
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	400a      	ands	r2, r1
 80026d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4403      	add	r3, r0
 80026f0:	409a      	lsls	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d824      	bhi.n	800274c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b05      	subs	r3, #5
 8002714:	221f      	movs	r2, #31
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b05      	subs	r3, #5
 800273e:	fa00 f203 	lsl.w	r2, r0, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
 800274a:	e04c      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d824      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b23      	subs	r3, #35	; 0x23
 8002766:	221f      	movs	r2, #31
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b23      	subs	r3, #35	; 0x23
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
 800279c:	e023      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b41      	subs	r3, #65	; 0x41
 80027b0:	221f      	movs	r2, #31
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b41      	subs	r3, #65	; 0x41
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_ADC_ConfigChannel+0x234>)
 80027e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_ADC_ConfigChannel+0x238>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1cc>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d105      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_ADC_ConfigChannel+0x238>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d123      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b10      	cmp	r3, #16
 8002818:	d003      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x1e6>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b11      	cmp	r3, #17
 8002820:	d11b      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d111      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_ADC_ConfigChannel+0x23c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_ADC_ConfigChannel+0x240>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9a      	lsrs	r2, r3, #18
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800284c:	e002      	b.n	8002854 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	40012000 	.word	0x40012000
 8002878:	20000000 	.word	0x20000000
 800287c:	431bde83 	.word	0x431bde83

08002880 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002888:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <ADC_Init+0x1f0>)
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <ADC_Init+0x1f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002926:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e00f      	b.n	800297e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800296c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800297c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0202 	bic.w	r2, r2, #2
 800298c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6899      	ldr	r1, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7e1b      	ldrb	r3, [r3, #24]
 8002998:	005a      	lsls	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01b      	beq.n	80029e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	3b01      	subs	r3, #1
 80029d8:	035a      	lsls	r2, r3, #13
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	e007      	b.n	80029f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	051a      	lsls	r2, r3, #20
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a36:	025a      	lsls	r2, r3, #9
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	029a      	lsls	r2, r3, #10
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40012300 	.word	0x40012300
 8002a74:	0f000001 	.word	0x0f000001

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4907      	ldr	r1, [pc, #28]	; (8002b14 <__NVIC_EnableIRQ+0x38>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db0a      	blt.n	8002b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	490c      	ldr	r1, [pc, #48]	; (8002b64 <__NVIC_SetPriority+0x4c>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b40:	e00a      	b.n	8002b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4908      	ldr	r1, [pc, #32]	; (8002b68 <__NVIC_SetPriority+0x50>)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	440b      	add	r3, r1
 8002b56:	761a      	strb	r2, [r3, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf28      	it	cs
 8002b8a:	2304      	movcs	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d902      	bls.n	8002b9c <NVIC_EncodePriority+0x30>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b03      	subs	r3, #3
 8002b9a:	e000      	b.n	8002b9e <NVIC_EncodePriority+0x32>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	4313      	orrs	r3, r2
         );
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d301      	bcc.n	8002bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <SysTick_Config+0x40>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf8:	f7ff ff8e 	bl	8002b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <SysTick_Config+0x40>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <SysTick_Config+0x40>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff29 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff3e 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff8e 	bl	8002b6c <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5d 	bl	8002b18 <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff31 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa2 	bl	8002bd4 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff facc 	bl	8002244 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e099      	b.n	8002dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd8:	e00f      	b.n	8002cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cda:	f7ff fab3 	bl	8002244 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d908      	bls.n	8002cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e078      	b.n	8002dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e8      	bne.n	8002cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_DMA_Init+0x158>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d107      	bne.n	8002d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0307 	bic.w	r3, r3, #7
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d117      	bne.n	8002dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fa6f 	bl	8003284 <DMA_CheckFifoParam>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e016      	b.n	8002dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa26 	bl	8003218 <DMA_CalcBaseAndBitshift>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	223f      	movs	r2, #63	; 0x3f
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	f010803f 	.word	0xf010803f

08002df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_Start_IT+0x26>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e040      	b.n	8002ea0 <HAL_DMA_Start_IT+0xa8>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d12f      	bne.n	8002e92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f9b8 	bl	80031bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	223f      	movs	r2, #63	; 0x3f
 8002e52:	409a      	lsls	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0216 	orr.w	r2, r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0208 	orr.w	r2, r2, #8
 8002e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e005      	b.n	8002e9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eb4:	4b92      	ldr	r3, [pc, #584]	; (8003100 <HAL_DMA_IRQHandler+0x258>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a92      	ldr	r2, [pc, #584]	; (8003104 <HAL_DMA_IRQHandler+0x25c>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01a      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0204 	bic.w	r2, r2, #4
 8002efa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	2208      	movs	r2, #8
 8002f02:	409a      	lsls	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2201      	movs	r2, #1
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2201      	movs	r2, #1
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f043 0202 	orr.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2204      	movs	r2, #4
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2210      	movs	r2, #16
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d043      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d03c      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d018      	beq.n	8002fea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d108      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d024      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
 8002fd6:	e01f      	b.n	8003018 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
 8002fe8:	e016      	b.n	8003018 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0208 	bic.w	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	2220      	movs	r2, #32
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 808e 	beq.w	8003146 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8086 	beq.w	8003146 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2220      	movs	r2, #32
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b05      	cmp	r3, #5
 8003050:	d136      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0216 	bic.w	r2, r2, #22
 8003060:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003070:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_DMA_IRQHandler+0x1da>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0208 	bic.w	r2, r2, #8
 8003090:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	223f      	movs	r2, #63	; 0x3f
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d07d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
        }
        return;
 80030be:	e078      	b.n	80031b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d030      	beq.n	8003146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
 80030ec:	e02b      	b.n	8003146 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e022      	b.n	8003146 <HAL_DMA_IRQHandler+0x29e>
 8003100:	20000000 	.word	0x20000000
 8003104:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0210 	bic.w	r2, r2, #16
 8003124:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	2b00      	cmp	r3, #0
 800314c:	d032      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	429a      	cmp	r2, r3
 800317c:	d307      	bcc.n	800318e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f2      	bne.n	8003172 <HAL_DMA_IRQHandler+0x2ca>
 800318c:	e000      	b.n	8003190 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800318e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e000      	b.n	80031b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031b2:	bf00      	nop
    }
  }
}
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d108      	bne.n	80031fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031fa:	e007      	b.n	800320c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	60da      	str	r2, [r3, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3b10      	subs	r3, #16
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <DMA_CalcBaseAndBitshift+0x64>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <DMA_CalcBaseAndBitshift+0x68>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d909      	bls.n	800325a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	659a      	str	r2, [r3, #88]	; 0x58
 8003258:	e007      	b.n	800326a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	aaaaaaab 	.word	0xaaaaaaab
 8003280:	080072e8 	.word	0x080072e8

08003284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d855      	bhi.n	8003350 <DMA_CheckFifoParam+0xcc>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <DMA_CheckFifoParam+0x28>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cf 	.word	0x080032cf
 80032b4:	080032bd 	.word	0x080032bd
 80032b8:	08003351 	.word	0x08003351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d045      	beq.n	8003354 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032cc:	e042      	b.n	8003354 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032d6:	d13f      	bne.n	8003358 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032dc:	e03c      	b.n	8003358 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d121      	bne.n	800332c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d836      	bhi.n	800335c <DMA_CheckFifoParam+0xd8>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <DMA_CheckFifoParam+0x70>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003305 	.word	0x08003305
 80032f8:	0800330b 	.word	0x0800330b
 80032fc:	08003305 	.word	0x08003305
 8003300:	0800331d 	.word	0x0800331d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e02f      	b.n	800336a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331a:	e021      	b.n	8003360 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003324:	d11e      	bne.n	8003364 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800332a:	e01b      	b.n	8003364 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d902      	bls.n	8003338 <DMA_CheckFifoParam+0xb4>
 8003332:	2b03      	cmp	r3, #3
 8003334:	d003      	beq.n	800333e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003336:	e018      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e015      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      break;
 800334e:	e00b      	b.n	8003368 <DMA_CheckFifoParam+0xe4>
      break;
 8003350:	bf00      	nop
 8003352:	e00a      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003354:	bf00      	nop
 8003356:	e008      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003358:	bf00      	nop
 800335a:	e006      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e004      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e002      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;   
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003368:	bf00      	nop
    }
  } 
  
  return status; 
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e16b      	b.n	800366c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 815a 	bne.w	8003666 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d00b      	beq.n	80033d2 <HAL_GPIO_Init+0x5a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d007      	beq.n	80033d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c6:	2b11      	cmp	r3, #17
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b12      	cmp	r3, #18
 80033d0:	d130      	bne.n	8003434 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 0201 	and.w	r2, r3, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0xfc>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b12      	cmp	r3, #18
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80b4 	beq.w	8003666 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <HAL_GPIO_Init+0x308>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_GPIO_Init+0x308>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_GPIO_Init+0x308>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_GPIO_Init+0x30c>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a51      	ldr	r2, [pc, #324]	; (8003688 <HAL_GPIO_Init+0x310>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02b      	beq.n	800359e <HAL_GPIO_Init+0x226>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_GPIO_Init+0x314>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d025      	beq.n	800359a <HAL_GPIO_Init+0x222>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_GPIO_Init+0x318>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01f      	beq.n	8003596 <HAL_GPIO_Init+0x21e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_GPIO_Init+0x31c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d019      	beq.n	8003592 <HAL_GPIO_Init+0x21a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <HAL_GPIO_Init+0x320>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_GPIO_Init+0x216>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4c      	ldr	r2, [pc, #304]	; (800369c <HAL_GPIO_Init+0x324>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00d      	beq.n	800358a <HAL_GPIO_Init+0x212>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4b      	ldr	r2, [pc, #300]	; (80036a0 <HAL_GPIO_Init+0x328>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x20e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_GPIO_Init+0x32c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_GPIO_Init+0x20a>
 800357e:	2307      	movs	r3, #7
 8003580:	e00e      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 8003582:	2308      	movs	r3, #8
 8003584:	e00c      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 8003586:	2306      	movs	r3, #6
 8003588:	e00a      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 800358a:	2305      	movs	r3, #5
 800358c:	e008      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 800358e:	2304      	movs	r3, #4
 8003590:	e006      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 8003592:	2303      	movs	r3, #3
 8003594:	e004      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 8003596:	2302      	movs	r3, #2
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_GPIO_Init+0x228>
 800359e:	2300      	movs	r3, #0
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	f002 0203 	and.w	r2, r2, #3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4093      	lsls	r3, r2
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b0:	4934      	ldr	r1, [pc, #208]	; (8003684 <HAL_GPIO_Init+0x30c>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_GPIO_Init+0x330>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e2:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_GPIO_Init+0x330>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035e8:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_GPIO_Init+0x330>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360c:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <HAL_GPIO_Init+0x330>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003612:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_GPIO_Init+0x330>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_GPIO_Init+0x330>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363c:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <HAL_GPIO_Init+0x330>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_GPIO_Init+0x330>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3301      	adds	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	f67f ae90 	bls.w	8003394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3724      	adds	r7, #36	; 0x24
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40023800 	.word	0x40023800
 8003684:	40013800 	.word	0x40013800
 8003688:	40020000 	.word	0x40020000
 800368c:	40020400 	.word	0x40020400
 8003690:	40020800 	.word	0x40020800
 8003694:	40020c00 	.word	0x40020c00
 8003698:	40021000 	.word	0x40021000
 800369c:	40021400 	.word	0x40021400
 80036a0:	40021800 	.word	0x40021800
 80036a4:	40021c00 	.word	0x40021c00
 80036a8:	40013c00 	.word	0x40013c00

080036ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
 80036b8:	4613      	mov	r3, r2
 80036ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036bc:	787b      	ldrb	r3, [r7, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c8:	e003      	b.n	80036d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	041a      	lsls	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	619a      	str	r2, [r3, #24]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e11f      	b.n	8003932 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fe fa1a 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003744:	f001 fd70 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 8003748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a7b      	ldr	r2, [pc, #492]	; (800393c <HAL_I2C_Init+0x25c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d807      	bhi.n	8003764 <HAL_I2C_Init+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <HAL_I2C_Init+0x260>)
 8003758:	4293      	cmp	r3, r2
 800375a:	bf94      	ite	ls
 800375c:	2301      	movls	r3, #1
 800375e:	2300      	movhi	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e006      	b.n	8003772 <HAL_I2C_Init+0x92>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a77      	ldr	r2, [pc, #476]	; (8003944 <HAL_I2C_Init+0x264>)
 8003768:	4293      	cmp	r3, r2
 800376a:	bf94      	ite	ls
 800376c:	2301      	movls	r3, #1
 800376e:	2300      	movhi	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0db      	b.n	8003932 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a72      	ldr	r2, [pc, #456]	; (8003948 <HAL_I2C_Init+0x268>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a64      	ldr	r2, [pc, #400]	; (800393c <HAL_I2C_Init+0x25c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d802      	bhi.n	80037b4 <HAL_I2C_Init+0xd4>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3301      	adds	r3, #1
 80037b2:	e009      	b.n	80037c8 <HAL_I2C_Init+0xe8>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_I2C_Init+0x26c>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	3301      	adds	r3, #1
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4956      	ldr	r1, [pc, #344]	; (800393c <HAL_I2C_Init+0x25c>)
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d80d      	bhi.n	8003804 <HAL_I2C_Init+0x124>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e59      	subs	r1, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	bf38      	it	cc
 8003800:	2304      	movcc	r3, #4
 8003802:	e04f      	b.n	80038a4 <HAL_I2C_Init+0x1c4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <HAL_I2C_Init+0x150>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e012      	b.n	8003856 <HAL_I2C_Init+0x176>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Init+0x17e>
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_I2C_Init+0x1c4>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10e      	bne.n	8003884 <HAL_I2C_Init+0x1a4>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e58      	subs	r0, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	440b      	add	r3, r1
 8003874:	fbb0 f3f3 	udiv	r3, r0, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003882:	e00f      	b.n	80038a4 <HAL_I2C_Init+0x1c4>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	0099      	lsls	r1, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	6809      	ldr	r1, [r1, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6911      	ldr	r1, [r2, #16]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68d2      	ldr	r2, [r2, #12]
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	000186a0 	.word	0x000186a0
 8003940:	001e847f 	.word	0x001e847f
 8003944:	003d08ff 	.word	0x003d08ff
 8003948:	431bde83 	.word	0x431bde83
 800394c:	10624dd3 	.word	0x10624dd3

08003950 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e128      	b.n	8003bb4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a90      	ldr	r2, [pc, #576]	; (8003bbc <HAL_I2S_Init+0x26c>)
 800397a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fe f927 	bl	8001bd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003998:	f023 030f 	bic.w	r3, r3, #15
 800399c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2202      	movs	r2, #2
 80039a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d060      	beq.n	8003a70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039b6:	2310      	movs	r3, #16
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e001      	b.n	80039c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039bc:	2320      	movs	r3, #32
 80039be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d802      	bhi.n	80039ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f001 fd20 	bl	8005414 <HAL_RCCEx_GetPeriphCLKFreq>
 80039d4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039de:	d125      	bne.n	8003a2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	3305      	adds	r3, #5
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	e01f      	b.n	8003a4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	3305      	adds	r3, #5
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e00e      	b.n	8003a4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	3305      	adds	r3, #5
 8003a48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4a5c      	ldr	r2, [pc, #368]	; (8003bc0 <HAL_I2S_Init+0x270>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a70:	2302      	movs	r3, #2
 8003a72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d902      	bls.n	8003a84 <HAL_I2S_Init+0x134>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2bff      	cmp	r3, #255	; 0xff
 8003a82:	d907      	bls.n	8003a94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f043 0210 	orr.w	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e08f      	b.n	8003bb4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	ea42 0103 	orr.w	r1, r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ab2:	f023 030f 	bic.w	r3, r3, #15
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6851      	ldr	r1, [r2, #4]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6892      	ldr	r2, [r2, #8]
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	4311      	orrs	r1, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6992      	ldr	r2, [r2, #24]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d161      	bne.n	8003ba4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a38      	ldr	r2, [pc, #224]	; (8003bc4 <HAL_I2S_Init+0x274>)
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a37      	ldr	r2, [pc, #220]	; (8003bc8 <HAL_I2S_Init+0x278>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_I2S_Init+0x1a4>
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_I2S_Init+0x27c>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2S_Init+0x1a8>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	4932      	ldr	r1, [pc, #200]	; (8003bc8 <HAL_I2S_Init+0x278>)
 8003b00:	428a      	cmp	r2, r1
 8003b02:	d101      	bne.n	8003b08 <HAL_I2S_Init+0x1b8>
 8003b04:	4a31      	ldr	r2, [pc, #196]	; (8003bcc <HAL_I2S_Init+0x27c>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2S_Init+0x1bc>
 8003b08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b10:	f023 030f 	bic.w	r3, r3, #15
 8003b14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1d4>
 8003b20:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1d8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	2202      	movs	r2, #2
 8003b2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_I2S_Init+0x278>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_I2S_Init+0x1ea>
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_I2S_Init+0x27c>)
 8003b38:	e001      	b.n	8003b3e <HAL_I2S_Init+0x1ee>
 8003b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4a:	d003      	beq.n	8003b54 <HAL_I2S_Init+0x204>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	e001      	b.n	8003b60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	b299      	uxth	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b76:	4303      	orrs	r3, r0
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_I2S_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_I2S_Init+0x24c>
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_I2S_Init+0x27c>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2S_Init+0x250>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba0:	897a      	ldrh	r2, [r7, #10]
 8003ba2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08003cdf 	.word	0x08003cdf
 8003bc0:	cccccccd 	.word	0xcccccccd
 8003bc4:	08004109 	.word	0x08004109
 8003bc8:	40003800 	.word	0x40003800
 8003bcc:	40003400 	.word	0x40003400

08003bd0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffb8 	bl	8003be8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	b292      	uxth	r2, r2
 8003c94:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10e      	bne.n	8003cd6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff93 	bl	8003bfc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d13a      	bne.n	8003d70 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <I2S_IRQHandler+0x3a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d102      	bne.n	8003d18 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffb4 	bl	8003c80 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d126      	bne.n	8003d70 <I2S_IRQHandler+0x92>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d11f      	bne.n	8003d70 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0202 	orr.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff50 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d136      	bne.n	8003dea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d109      	bne.n	8003d9a <I2S_IRQHandler+0xbc>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d102      	bne.n	8003d9a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff45 	bl	8003c24 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d122      	bne.n	8003dea <I2S_IRQHandler+0x10c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d11b      	bne.n	8003dea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff13 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d002      	beq.n	8003e20 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e1e:	e160      	b.n	80040e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e15a      	b.n	80040ec <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e152      	b.n	80040ec <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d002      	beq.n	8003e72 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d114      	bne.n	8003e9c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003e7c:	887b      	ldrh	r3, [r7, #2]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	865a      	strh	r2, [r3, #50]	; 0x32
 8003e9a:	e00b      	b.n	8003eb4 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	887a      	ldrh	r2, [r7, #2]
 8003eb2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	4a8b      	ldr	r2, [pc, #556]	; (80040f4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	4a8a      	ldr	r2, [pc, #552]	; (80040f8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	4a89      	ldr	r2, [pc, #548]	; (80040fc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003ed8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	4a85      	ldr	r2, [pc, #532]	; (80040f4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4a84      	ldr	r2, [pc, #528]	; (80040f8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4a83      	ldr	r2, [pc, #524]	; (80040fc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003ef0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efc:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f04:	d002      	beq.n	8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d16b      	bne.n	8003fe4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a79      	ldr	r2, [pc, #484]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003f1e:	4b79      	ldr	r3, [pc, #484]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003f20:	e001      	b.n	8003f26 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f26:	330c      	adds	r3, #12
 8003f28:	4619      	mov	r1, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f7fe ff60 	bl	8002df8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a70      	ldr	r2, [pc, #448]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003f42:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003f44:	e001      	b.n	8003f4a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	496b      	ldr	r1, [pc, #428]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003f52:	428b      	cmp	r3, r1
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003f56:	4b6b      	ldr	r3, [pc, #428]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003f64:	f107 0308 	add.w	r3, r7, #8
 8003f68:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f7fe ff3a 	bl	8002df8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0202 	orr.w	r2, r2, #2
 8003f92:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	f000 809e 	beq.w	80040e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a55      	ldr	r2, [pc, #340]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003fb0:	4b54      	ldr	r3, [pc, #336]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003fb2:	e001      	b.n	8003fb8 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4950      	ldr	r1, [pc, #320]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003fc6:	e001      	b.n	8003fcc <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fd0:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003fe2:	e07e      	b.n	80040e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff2:	d10a      	bne.n	800400a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8004022:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004024:	e001      	b.n	800402a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8004026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402a:	330c      	adds	r3, #12
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	b29b      	uxth	r3, r3
 8004034:	f7fe fee0 	bl	8002df8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a30      	ldr	r2, [pc, #192]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004044:	e001      	b.n	800404a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8004046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	492b      	ldr	r1, [pc, #172]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004052:	428b      	cmp	r3, r1
 8004054:	d101      	bne.n	800405a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8004056:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004058:	e001      	b.n	800405e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405e:	f042 0202 	orr.w	r2, r2, #2
 8004062:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	4619      	mov	r1, r3
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800407c:	b29b      	uxth	r3, r3
 800407e:	f7fe febb 	bl	8002df8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d01e      	beq.n	80040e0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040ae:	e001      	b.n	80040b4 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80040b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4911      	ldr	r1, [pc, #68]	; (8004100 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80040bc:	428b      	cmp	r3, r1
 80040be:	d101      	bne.n	80040c4 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040c2:	e001      	b.n	80040c8 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040cc:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040dc:	61da      	str	r2, [r3, #28]
 80040de:	e000      	b.n	80040e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80040e0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80040ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	080043b1 	.word	0x080043b1
 80040f8:	080043cd 	.word	0x080043cd
 80040fc:	08004505 	.word	0x08004505
 8004100:	40003800 	.word	0x40003800
 8004104:	40003400 	.word	0x40003400

08004108 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4aa2      	ldr	r2, [pc, #648]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004122:	4ba2      	ldr	r3, [pc, #648]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004124:	e001      	b.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a9b      	ldr	r2, [pc, #620]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004140:	4b9a      	ldr	r3, [pc, #616]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004142:	e001      	b.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d004      	beq.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 8099 	bne.w	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d107      	bne.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fa05 	bl	8004584 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 faa8 	bl	80046e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d13a      	bne.n	8004214 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d035      	beq.n	8004214 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7e      	ldr	r2, [pc, #504]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041b2:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041b4:	e001      	b.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4979      	ldr	r1, [pc, #484]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041c2:	428b      	cmp	r3, r1
 80041c4:	d101      	bne.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041c6:	4b79      	ldr	r3, [pc, #484]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c8:	e001      	b.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fcfe 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b08      	cmp	r3, #8
 800421c:	f040 80be 	bne.w	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80b8 	beq.w	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800423a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a59      	ldr	r2, [pc, #356]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004248:	e001      	b.n	800424e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800424a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4954      	ldr	r1, [pc, #336]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004256:	428b      	cmp	r3, r1
 8004258:	d101      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800425a:	4b54      	ldr	r3, [pc, #336]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800425c:	e001      	b.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800425e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004262:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004266:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fcc0 	bl	8003c10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004290:	e084      	b.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d107      	bne.n	80042ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f99e 	bl	80045e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f9dd 	bl	8004680 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d12f      	bne.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d02a      	beq.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2e      	ldr	r2, [pc, #184]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042f6:	e001      	b.n	80042fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80042f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4929      	ldr	r1, [pc, #164]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004304:	428b      	cmp	r3, r1
 8004306:	d101      	bne.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800430a:	e001      	b.n	8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800430c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004314:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fc70 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d131      	bne.n	800439e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02c      	beq.n	800439e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004350:	e001      	b.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4912      	ldr	r1, [pc, #72]	; (80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800435e:	428b      	cmp	r3, r1
 8004360:	d101      	bne.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004364:	e001      	b.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800436e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800437e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	f043 0204 	orr.w	r2, r3, #4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fc3b 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800439a:	e000      	b.n	800439e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800439c:	bf00      	nop
}
 800439e:	bf00      	nop
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40003800 	.word	0x40003800
 80043ac:	40003400 	.word	0x40003400

080043b0 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7fd fac6 	bl	8001950 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 8084 	bne.w	80044ec <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d13c      	bne.n	8004468 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d006      	beq.n	800440c <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004408:	2b00      	cmp	r3, #0
 800440a:	d116      	bne.n	800443a <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3a      	ldr	r2, [pc, #232]	; (80044fc <I2SEx_TxRxDMACplt+0x130>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <I2SEx_TxRxDMACplt+0x4e>
 8004416:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <I2SEx_TxRxDMACplt+0x134>)
 8004418:	e001      	b.n	800441e <I2SEx_TxRxDMACplt+0x52>
 800441a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4935      	ldr	r1, [pc, #212]	; (80044fc <I2SEx_TxRxDMACplt+0x130>)
 8004426:	428b      	cmp	r3, r1
 8004428:	d101      	bne.n	800442e <I2SEx_TxRxDMACplt+0x62>
 800442a:	4b35      	ldr	r3, [pc, #212]	; (8004500 <I2SEx_TxRxDMACplt+0x134>)
 800442c:	e001      	b.n	8004432 <I2SEx_TxRxDMACplt+0x66>
 800442e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	e007      	b.n	800444a <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7fd fab6 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d13c      	bne.n	80044ec <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004480:	d006      	beq.n	8004490 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800448c:	2b00      	cmp	r3, #0
 800448e:	d108      	bne.n	80044a2 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0202 	bic.w	r2, r2, #2
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	e015      	b.n	80044ce <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <I2SEx_TxRxDMACplt+0x130>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <I2SEx_TxRxDMACplt+0xe4>
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <I2SEx_TxRxDMACplt+0x134>)
 80044ae:	e001      	b.n	80044b4 <I2SEx_TxRxDMACplt+0xe8>
 80044b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4910      	ldr	r1, [pc, #64]	; (80044fc <I2SEx_TxRxDMACplt+0x130>)
 80044bc:	428b      	cmp	r3, r1
 80044be:	d101      	bne.n	80044c4 <I2SEx_TxRxDMACplt+0xf8>
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <I2SEx_TxRxDMACplt+0x134>)
 80044c2:	e001      	b.n	80044c8 <I2SEx_TxRxDMACplt+0xfc>
 80044c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c8:	f022 0202 	bic.w	r2, r2, #2
 80044cc:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7fd fa74 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7fd fa71 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40003800 	.word	0x40003800
 8004500:	40003400 	.word	0x40003400

08004504 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0203 	bic.w	r2, r2, #3
 8004520:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a15      	ldr	r2, [pc, #84]	; (800457c <I2SEx_TxRxDMAError+0x78>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <I2SEx_TxRxDMAError+0x2c>
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <I2SEx_TxRxDMAError+0x7c>)
 800452e:	e001      	b.n	8004534 <I2SEx_TxRxDMAError+0x30>
 8004530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4910      	ldr	r1, [pc, #64]	; (800457c <I2SEx_TxRxDMAError+0x78>)
 800453c:	428b      	cmp	r3, r1
 800453e:	d101      	bne.n	8004544 <I2SEx_TxRxDMAError+0x40>
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <I2SEx_TxRxDMAError+0x7c>)
 8004542:	e001      	b.n	8004548 <I2SEx_TxRxDMAError+0x44>
 8004544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004548:	f022 0203 	bic.w	r2, r2, #3
 800454c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f043 0208 	orr.w	r2, r3, #8
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff fb4e 	bl	8003c10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40003800 	.word	0x40003800
 8004580:	40003400 	.word	0x40003400

08004584 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	1c99      	adds	r1, r3, #2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6251      	str	r1, [r2, #36]	; 0x24
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d113      	bne.n	80045de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fd f9fb 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	1c99      	adds	r1, r3, #2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6251      	str	r1, [r2, #36]	; 0x24
 80045fa:	8819      	ldrh	r1, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <I2SEx_TxISR_I2SExt+0x90>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <I2SEx_TxISR_I2SExt+0x22>
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <I2SEx_TxISR_I2SExt+0x94>)
 8004608:	e001      	b.n	800460e <I2SEx_TxISR_I2SExt+0x26>
 800460a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800460e:	460a      	mov	r2, r1
 8004610:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d121      	bne.n	800466e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <I2SEx_TxISR_I2SExt+0x90>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <I2SEx_TxISR_I2SExt+0x50>
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <I2SEx_TxISR_I2SExt+0x94>)
 8004636:	e001      	b.n	800463c <I2SEx_TxISR_I2SExt+0x54>
 8004638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	490d      	ldr	r1, [pc, #52]	; (8004678 <I2SEx_TxISR_I2SExt+0x90>)
 8004644:	428b      	cmp	r3, r1
 8004646:	d101      	bne.n	800464c <I2SEx_TxISR_I2SExt+0x64>
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <I2SEx_TxISR_I2SExt+0x94>)
 800464a:	e001      	b.n	8004650 <I2SEx_TxISR_I2SExt+0x68>
 800464c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004654:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fd f9b3 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40003800 	.word	0x40003800
 800467c:	40003400 	.word	0x40003400

08004680 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68d8      	ldr	r0, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	1c99      	adds	r1, r3, #2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004698:	b282      	uxth	r2, r0
 800469a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d113      	bne.n	80046dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fd f97c 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a20      	ldr	r2, [pc, #128]	; (8004774 <I2SEx_RxISR_I2SExt+0x90>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <I2SEx_RxISR_I2SExt+0x16>
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <I2SEx_RxISR_I2SExt+0x94>)
 80046f8:	e001      	b.n	80046fe <I2SEx_RxISR_I2SExt+0x1a>
 80046fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046fe:	68d8      	ldr	r0, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	1c99      	adds	r1, r3, #2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	62d1      	str	r1, [r2, #44]	; 0x2c
 800470a:	b282      	uxth	r2, r0
 800470c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d121      	bne.n	800476a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <I2SEx_RxISR_I2SExt+0x90>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <I2SEx_RxISR_I2SExt+0x50>
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <I2SEx_RxISR_I2SExt+0x94>)
 8004732:	e001      	b.n	8004738 <I2SEx_RxISR_I2SExt+0x54>
 8004734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	490d      	ldr	r1, [pc, #52]	; (8004774 <I2SEx_RxISR_I2SExt+0x90>)
 8004740:	428b      	cmp	r3, r1
 8004742:	d101      	bne.n	8004748 <I2SEx_RxISR_I2SExt+0x64>
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <I2SEx_RxISR_I2SExt+0x94>)
 8004746:	e001      	b.n	800474c <I2SEx_RxISR_I2SExt+0x68>
 8004748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800474c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004750:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d106      	bne.n	800476a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fd f935 	bl	80019d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40003800 	.word	0x40003800
 8004778:	40003400 	.word	0x40003400

0800477c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b08f      	sub	sp, #60	; 0x3c
 8004780:	af0a      	add	r7, sp, #40	; 0x28
 8004782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e10f      	b.n	80049ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fd fc0d 	bl	8001fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 fa9a 	bl	8005d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	687e      	ldr	r6, [r7, #4]
 80047da:	466d      	mov	r5, sp
 80047dc:	f106 0410 	add.w	r4, r6, #16
 80047e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80047f0:	1d33      	adds	r3, r6, #4
 80047f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047f4:	6838      	ldr	r0, [r7, #0]
 80047f6:	f001 fa25 	bl	8005c44 <USB_CoreInit>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0d0      	b.n	80049ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fa88 	bl	8005d28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e04a      	b.n	80048b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800481e:	7bfa      	ldrb	r2, [r7, #15]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	333d      	adds	r3, #61	; 0x3d
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004832:	7bfa      	ldrb	r2, [r7, #15]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	333c      	adds	r3, #60	; 0x3c
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004846:	7bfa      	ldrb	r2, [r7, #15]
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	b298      	uxth	r0, r3
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3342      	adds	r3, #66	; 0x42
 800485a:	4602      	mov	r2, r0
 800485c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800485e:	7bfa      	ldrb	r2, [r7, #15]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	333f      	adds	r3, #63	; 0x3f
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3344      	adds	r3, #68	; 0x44
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3348      	adds	r3, #72	; 0x48
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3350      	adds	r3, #80	; 0x50
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	3301      	adds	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3af      	bcc.n	800481e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	e044      	b.n	800494e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004906:	7bfa      	ldrb	r2, [r7, #15]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800491c:	7bfa      	ldrb	r2, [r7, #15]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	3301      	adds	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3b5      	bcc.n	80048c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	687e      	ldr	r6, [r7, #4]
 8004960:	466d      	mov	r5, sp
 8004962:	f106 0410 	add.w	r4, r6, #16
 8004966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800496a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800496c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800496e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004972:	e885 0003 	stmia.w	r5, {r0, r1}
 8004976:	1d33      	adds	r3, r6, #4
 8004978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800497a:	6838      	ldr	r0, [r7, #0]
 800497c:	f001 f9fe 	bl	8005d7c <USB_DevInit>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e00d      	b.n	80049ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fbad 	bl	8006106 <USB_DevDisconnect>

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080049b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e25b      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d075      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d6:	4ba3      	ldr	r3, [pc, #652]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00c      	beq.n	80049fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e2:	4ba0      	ldr	r3, [pc, #640]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d112      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ee:	4b9d      	ldr	r3, [pc, #628]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	4b99      	ldr	r3, [pc, #612]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05b      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x108>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d157      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e236      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCC_OscConfig+0x74>
 8004a1e:	4b91      	ldr	r3, [pc, #580]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a90      	ldr	r2, [pc, #576]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e01d      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x98>
 8004a36:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a8a      	ldr	r2, [pc, #552]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a87      	ldr	r2, [pc, #540]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a50:	4b84      	ldr	r3, [pc, #528]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a83      	ldr	r2, [pc, #524]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b81      	ldr	r3, [pc, #516]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a80      	ldr	r2, [pc, #512]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fd fbe8 	bl	8002244 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fd fbe4 	bl	8002244 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1fb      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	4b76      	ldr	r3, [pc, #472]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0xc0>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fd fbd4 	bl	8002244 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd fbd0 	bl	8002244 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e1e7      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab2:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xe8>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d063      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ace:	4b65      	ldr	r3, [pc, #404]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b62      	ldr	r3, [pc, #392]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b5f      	ldr	r3, [pc, #380]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x152>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e1bb      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4952      	ldr	r1, [pc, #328]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	e03a      	b.n	8004b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b28:	4b4f      	ldr	r3, [pc, #316]	; (8004c68 <HAL_RCC_OscConfig+0x2b0>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fd fb89 	bl	8002244 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b36:	f7fd fb85 	bl	8002244 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e19c      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b43      	ldr	r3, [pc, #268]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4940      	ldr	r1, [pc, #256]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
 8004b68:	e015      	b.n	8004b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	4b3f      	ldr	r3, [pc, #252]	; (8004c68 <HAL_RCC_OscConfig+0x2b0>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd fb68 	bl	8002244 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fd fb64 	bl	8002244 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e17b      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8a:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d030      	beq.n	8004c04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d016      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004baa:	4b30      	ldr	r3, [pc, #192]	; (8004c6c <HAL_RCC_OscConfig+0x2b4>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd fb48 	bl	8002244 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7fd fb44 	bl	8002244 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e15b      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x200>
 8004bd6:	e015      	b.n	8004c04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_RCC_OscConfig+0x2b4>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bde:	f7fd fb31 	bl	8002244 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fd fb2d 	bl	8002244 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e144      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80a0 	beq.w	8004d52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_OscConfig+0x2b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d121      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_RCC_OscConfig+0x2b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <HAL_RCC_OscConfig+0x2b8>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd faf3 	bl	8002244 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	e011      	b.n	8004c86 <HAL_RCC_OscConfig+0x2ce>
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	42470000 	.word	0x42470000
 8004c6c:	42470e80 	.word	0x42470e80
 8004c70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c74:	f7fd fae6 	bl	8002244 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0fd      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	4b81      	ldr	r3, [pc, #516]	; (8004e8c <HAL_RCC_OscConfig+0x4d4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2f0>
 8004c9a:	4b7d      	ldr	r3, [pc, #500]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a7c      	ldr	r2, [pc, #496]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	e01c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x32a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d10c      	bne.n	8004cca <HAL_RCC_OscConfig+0x312>
 8004cb0:	4b77      	ldr	r3, [pc, #476]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	4a76      	ldr	r2, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cb6:	f043 0304 	orr.w	r3, r3, #4
 8004cba:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbc:	4b74      	ldr	r3, [pc, #464]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a73      	ldr	r2, [pc, #460]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCC_OscConfig+0x32a>
 8004cca:	4b71      	ldr	r3, [pc, #452]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a70      	ldr	r2, [pc, #448]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd6:	4b6e      	ldr	r3, [pc, #440]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a6d      	ldr	r2, [pc, #436]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cea:	f7fd faab 	bl	8002244 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fd faa7 	bl	8002244 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0bc      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	4b61      	ldr	r3, [pc, #388]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ee      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x33a>
 8004d14:	e014      	b.n	8004d40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d16:	f7fd fa95 	bl	8002244 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7fd fa91 	bl	8002244 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0a6      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d34:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ee      	bne.n	8004d1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4b52      	ldr	r3, [pc, #328]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a51      	ldr	r2, [pc, #324]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8092 	beq.w	8004e80 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d5c:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d05c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d141      	bne.n	8004df4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d70:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_RCC_OscConfig+0x4dc>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d76:	f7fd fa65 	bl	8002244 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7e:	f7fd fa61 	bl	8002244 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e078      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d90:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	019b      	lsls	r3, r3, #6
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	3b01      	subs	r3, #1
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	4933      	ldr	r1, [pc, #204]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc6:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <HAL_RCC_OscConfig+0x4dc>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fa3a 	bl	8002244 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fd fa36 	bl	8002244 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e04d      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x41c>
 8004df2:	e045      	b.n	8004e80 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <HAL_RCC_OscConfig+0x4dc>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fd fa23 	bl	8002244 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fd fa1f 	bl	8002244 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e036      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e14:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x44a>
 8004e20:	e02e      	b.n	8004e80 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e029      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e2e:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <HAL_RCC_OscConfig+0x4d8>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d11c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d115      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	40023800 	.word	0x40023800
 8004e94:	42470060 	.word	0x42470060

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0cc      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eac:	4b68      	ldr	r3, [pc, #416]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90c      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b65      	ldr	r3, [pc, #404]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b63      	ldr	r3, [pc, #396]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0b8      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eec:	4b59      	ldr	r3, [pc, #356]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a58      	ldr	r2, [pc, #352]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f04:	4b53      	ldr	r3, [pc, #332]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a52      	ldr	r2, [pc, #328]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b50      	ldr	r3, [pc, #320]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	494d      	ldr	r1, [pc, #308]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d044      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b47      	ldr	r3, [pc, #284]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e067      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f76:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4934      	ldr	r1, [pc, #208]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f88:	f7fd f95c 	bl	8002244 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fd f958 	bl	8002244 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e04f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 020c 	and.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1eb      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b25      	ldr	r3, [pc, #148]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20c      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e032      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4916      	ldr	r1, [pc, #88]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	490e      	ldr	r1, [pc, #56]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800501e:	f000 f821 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8005022:	4601      	mov	r1, r0
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	fa21 f303 	lsr.w	r3, r1, r3
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd f8bc 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023c00 	.word	0x40023c00
 8005054:	40023800 	.word	0x40023800
 8005058:	080072d0 	.word	0x080072d0
 800505c:	20000000 	.word	0x20000000
 8005060:	20000004 	.word	0x20000004

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	2300      	movs	r3, #0
 8005074:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800507a:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b04      	cmp	r3, #4
 8005084:	d007      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x32>
 8005086:	2b08      	cmp	r3, #8
 8005088:	d008      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x38>
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 80b4 	bne.w	80051f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b5e      	ldr	r3, [pc, #376]	; (800520c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005092:	60bb      	str	r3, [r7, #8]
       break;
 8005094:	e0b3      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005096:	4b5d      	ldr	r3, [pc, #372]	; (800520c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005098:	60bb      	str	r3, [r7, #8]
      break;
 800509a:	e0b0      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050a6:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04a      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b2:	4b55      	ldr	r3, [pc, #340]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	ea03 0501 	and.w	r5, r3, r1
 80050c8:	ea04 0602 	and.w	r6, r4, r2
 80050cc:	4629      	mov	r1, r5
 80050ce:	4632      	mov	r2, r6
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	f04f 0400 	mov.w	r4, #0
 80050d8:	0154      	lsls	r4, r2, #5
 80050da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050de:	014b      	lsls	r3, r1, #5
 80050e0:	4619      	mov	r1, r3
 80050e2:	4622      	mov	r2, r4
 80050e4:	1b49      	subs	r1, r1, r5
 80050e6:	eb62 0206 	sbc.w	r2, r2, r6
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	0194      	lsls	r4, r2, #6
 80050f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050f8:	018b      	lsls	r3, r1, #6
 80050fa:	1a5b      	subs	r3, r3, r1
 80050fc:	eb64 0402 	sbc.w	r4, r4, r2
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	00e2      	lsls	r2, r4, #3
 800510a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800510e:	00d9      	lsls	r1, r3, #3
 8005110:	460b      	mov	r3, r1
 8005112:	4614      	mov	r4, r2
 8005114:	195b      	adds	r3, r3, r5
 8005116:	eb44 0406 	adc.w	r4, r4, r6
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	02a2      	lsls	r2, r4, #10
 8005124:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005128:	0299      	lsls	r1, r3, #10
 800512a:	460b      	mov	r3, r1
 800512c:	4614      	mov	r4, r2
 800512e:	4618      	mov	r0, r3
 8005130:	4621      	mov	r1, r4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	f7fb fd12 	bl	8000b64 <__aeabi_uldivmod>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e049      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005148:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	ea03 0501 	and.w	r5, r3, r1
 800515e:	ea04 0602 	and.w	r6, r4, r2
 8005162:	4629      	mov	r1, r5
 8005164:	4632      	mov	r2, r6
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	0154      	lsls	r4, r2, #5
 8005170:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005174:	014b      	lsls	r3, r1, #5
 8005176:	4619      	mov	r1, r3
 8005178:	4622      	mov	r2, r4
 800517a:	1b49      	subs	r1, r1, r5
 800517c:	eb62 0206 	sbc.w	r2, r2, r6
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	0194      	lsls	r4, r2, #6
 800518a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800518e:	018b      	lsls	r3, r1, #6
 8005190:	1a5b      	subs	r3, r3, r1
 8005192:	eb64 0402 	sbc.w	r4, r4, r2
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051a4:	00d9      	lsls	r1, r3, #3
 80051a6:	460b      	mov	r3, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	195b      	adds	r3, r3, r5
 80051ac:	eb44 0406 	adc.w	r4, r4, r6
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	02a2      	lsls	r2, r4, #10
 80051ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051be:	0299      	lsls	r1, r3, #10
 80051c0:	460b      	mov	r3, r1
 80051c2:	4614      	mov	r4, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	4621      	mov	r1, r4
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	461a      	mov	r2, r3
 80051d0:	4623      	mov	r3, r4
 80051d2:	f7fb fcc7 	bl	8000b64 <__aeabi_uldivmod>
 80051d6:	4603      	mov	r3, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	3301      	adds	r3, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	60bb      	str	r3, [r7, #8]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051fa:	60bb      	str	r3, [r7, #8]
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	68bb      	ldr	r3, [r7, #8]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	00f42400 	.word	0x00f42400

08005210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_RCC_GetHCLKFreq+0x14>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000000 	.word	0x20000000

08005228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800522c:	f7ff fff0 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8005230:	4601      	mov	r1, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0a9b      	lsrs	r3, r3, #10
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4a03      	ldr	r2, [pc, #12]	; (800524c <HAL_RCC_GetPCLK1Freq+0x24>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	080072e0 	.word	0x080072e0

08005250 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005274:	2b00      	cmp	r3, #0
 8005276:	d035      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005278:	4b62      	ldr	r3, [pc, #392]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800527e:	f7fc ffe1 	bl	8002244 <HAL_GetTick>
 8005282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005286:	f7fc ffdd 	bl	8002244 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0b0      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005298:	4b5b      	ldr	r3, [pc, #364]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	019a      	lsls	r2, r3, #6
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	071b      	lsls	r3, r3, #28
 80052b0:	4955      	ldr	r1, [pc, #340]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052b8:	4b52      	ldr	r3, [pc, #328]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052be:	f7fc ffc1 	bl	8002244 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052c6:	f7fc ffbd 	bl	8002244 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e090      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8083 	beq.w	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	4b44      	ldr	r3, [pc, #272]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4a43      	ldr	r2, [pc, #268]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005300:	6413      	str	r3, [r2, #64]	; 0x40
 8005302:	4b41      	ldr	r3, [pc, #260]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800530e:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3e      	ldr	r2, [pc, #248]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800531a:	f7fc ff93 	bl	8002244 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005322:	f7fc ff8f 	bl	8002244 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e062      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005334:	4b35      	ldr	r3, [pc, #212]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005340:	4b31      	ldr	r3, [pc, #196]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02f      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	d028      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800535e:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005368:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536e:	4b28      	ldr	r3, [pc, #160]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005374:	4a24      	ldr	r2, [pc, #144]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800537a:	4b23      	ldr	r3, [pc, #140]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d114      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005386:	f7fc ff5d 	bl	8002244 <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538c:	e00a      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7fc ff59 	bl	8002244 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f241 3288 	movw	r2, #5000	; 0x1388
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e02a      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a4:	4b18      	ldr	r3, [pc, #96]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ee      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053bc:	d10d      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d2:	490d      	ldr	r1, [pc, #52]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	608b      	str	r3, [r1, #8]
 80053d8:	e005      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f2:	4905      	ldr	r1, [pc, #20]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	42470068 	.word	0x42470068
 8005408:	40023800 	.word	0x40023800
 800540c:	40007000 	.word	0x40007000
 8005410:	42470e40 	.word	0x42470e40

08005414 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d13d      	bne.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800543a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005442:	2b01      	cmp	r3, #1
 8005444:	d12f      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005446:	4b1e      	ldr	r3, [pc, #120]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005448:	617b      	str	r3, [r7, #20]
          break;
 800544a:	e02f      	b.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005458:	d108      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	e007      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800546c:	4b13      	ldr	r3, [pc, #76]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005474:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005482:	099b      	lsrs	r3, r3, #6
 8005484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005496:	0f1b      	lsrs	r3, r3, #28
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	617b      	str	r3, [r7, #20]
          break;
 80054a4:	e002      	b.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
          break;
 80054aa:	bf00      	nop
        }
      }
      break;
 80054ac:	bf00      	nop
    }
  }
  return frequency;
 80054ae:	697b      	ldr	r3, [r7, #20]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40023800 	.word	0x40023800
 80054c0:	00bb8000 	.word	0x00bb8000
 80054c4:	00f42400 	.word	0x00f42400

080054c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e01d      	b.n	8005516 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fc fc58 	bl	8001da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f000 f8d0 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005536:	2302      	movs	r3, #2
 8005538:	e0b4      	b.n	80056a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b0c      	cmp	r3, #12
 800554e:	f200 809f 	bhi.w	8005690 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005552:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	0800558d 	.word	0x0800558d
 800555c:	08005691 	.word	0x08005691
 8005560:	08005691 	.word	0x08005691
 8005564:	08005691 	.word	0x08005691
 8005568:	080055cd 	.word	0x080055cd
 800556c:	08005691 	.word	0x08005691
 8005570:	08005691 	.word	0x08005691
 8005574:	08005691 	.word	0x08005691
 8005578:	0800560f 	.word	0x0800560f
 800557c:	08005691 	.word	0x08005691
 8005580:	08005691 	.word	0x08005691
 8005584:	08005691 	.word	0x08005691
 8005588:	0800564f 	.word	0x0800564f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f92a 	bl	80057ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0208 	orr.w	r2, r2, #8
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0204 	bic.w	r2, r2, #4
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
      break;
 80055ca:	e062      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f97a 	bl	80058cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	619a      	str	r2, [r3, #24]
      break;
 800560c:	e041      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f9cf 	bl	80059b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0208 	orr.w	r2, r2, #8
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0204 	bic.w	r2, r2, #4
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]
      break;
 800564c:	e021      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fa23 	bl	8005aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	021a      	lsls	r2, r3, #8
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	61da      	str	r2, [r3, #28]
      break;
 800568e:	e000      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005690:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a40      	ldr	r2, [pc, #256]	; (80057c0 <TIM_Base_SetConfig+0x114>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d00f      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a3d      	ldr	r2, [pc, #244]	; (80057c4 <TIM_Base_SetConfig+0x118>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a3c      	ldr	r2, [pc, #240]	; (80057c8 <TIM_Base_SetConfig+0x11c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a3b      	ldr	r2, [pc, #236]	; (80057cc <TIM_Base_SetConfig+0x120>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3a      	ldr	r2, [pc, #232]	; (80057d0 <TIM_Base_SetConfig+0x124>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d108      	bne.n	80056fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2f      	ldr	r2, [pc, #188]	; (80057c0 <TIM_Base_SetConfig+0x114>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02b      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570c:	d027      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2c      	ldr	r2, [pc, #176]	; (80057c4 <TIM_Base_SetConfig+0x118>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d023      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2b      	ldr	r2, [pc, #172]	; (80057c8 <TIM_Base_SetConfig+0x11c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01f      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2a      	ldr	r2, [pc, #168]	; (80057cc <TIM_Base_SetConfig+0x120>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <TIM_Base_SetConfig+0x124>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a28      	ldr	r2, [pc, #160]	; (80057d4 <TIM_Base_SetConfig+0x128>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a27      	ldr	r2, [pc, #156]	; (80057d8 <TIM_Base_SetConfig+0x12c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a26      	ldr	r2, [pc, #152]	; (80057dc <TIM_Base_SetConfig+0x130>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <TIM_Base_SetConfig+0x134>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a24      	ldr	r2, [pc, #144]	; (80057e4 <TIM_Base_SetConfig+0x138>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <TIM_Base_SetConfig+0x13c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <TIM_Base_SetConfig+0x114>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0xf8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <TIM_Base_SetConfig+0x124>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d103      	bne.n	80057ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	615a      	str	r2, [r3, #20]
}
 80057b2:	bf00      	nop
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800
 80057e0:	40001800 	.word	0x40001800
 80057e4:	40001c00 	.word	0x40001c00
 80057e8:	40002000 	.word	0x40002000

080057ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0201 	bic.w	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 0302 	bic.w	r3, r3, #2
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <TIM_OC1_SetConfig+0xd8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC1_SetConfig+0x64>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <TIM_OC1_SetConfig+0xdc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10c      	bne.n	800586a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0308 	bic.w	r3, r3, #8
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 0304 	bic.w	r3, r3, #4
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <TIM_OC1_SetConfig+0xd8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC1_SetConfig+0x8e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <TIM_OC1_SetConfig+0xdc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400

080058cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0210 	bic.w	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0320 	bic.w	r3, r3, #32
 8005916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <TIM_OC2_SetConfig+0xe4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0x68>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <TIM_OC2_SetConfig+0xe8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10d      	bne.n	8005950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <TIM_OC2_SetConfig+0xe4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC2_SetConfig+0x94>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC2_SetConfig+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d113      	bne.n	8005988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010400 	.word	0x40010400

080059b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <TIM_OC3_SetConfig+0xe0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC3_SetConfig+0x66>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <TIM_OC3_SetConfig+0xe4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d10d      	bne.n	8005a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <TIM_OC3_SetConfig+0xe0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_OC3_SetConfig+0x92>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <TIM_OC3_SetConfig+0xe4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d113      	bne.n	8005a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40010400 	.word	0x40010400

08005aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <TIM_OC4_SetConfig+0xa4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC4_SetConfig+0x68>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <TIM_OC4_SetConfig+0xa8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d109      	bne.n	8005b1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e05a      	b.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb0:	d01d      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10c      	bne.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40001800 	.word	0x40001800

08005c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c44:	b084      	sub	sp, #16
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	f107 001c 	add.w	r0, r7, #28
 8005c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d122      	bne.n	8005ca2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d105      	bne.n	8005c96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa56 	bl	8006148 <USB_CoreReset>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
 8005ca0:	e01a      	b.n	8005cd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa4a 	bl	8006148 <USB_CoreReset>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8005cca:	e005      	b.n	8005cd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10b      	bne.n	8005cf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f043 0206 	orr.w	r2, r3, #6
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f043 0220 	orr.w	r2, r3, #32
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d02:	b004      	add	sp, #16
 8005d04:	4770      	bx	lr

08005d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 0201 	bic.w	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d106      	bne.n	8005d54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e00b      	b.n	8005d6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	e001      	b.n	8005d6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e003      	b.n	8005d74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d6c:	2032      	movs	r0, #50	; 0x32
 8005d6e:	f7fc fa75 	bl	800225c <HAL_Delay>

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e009      	b.n	8005db0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	3340      	adds	r3, #64	; 0x40
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	3301      	adds	r3, #1
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b0e      	cmp	r3, #14
 8005db4:	d9f2      	bls.n	8005d9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d11c      	bne.n	8005df6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dca:	f043 0302 	orr.w	r3, r3, #2
 8005dce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
 8005df4:	e00b      	b.n	8005e0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e14:	461a      	mov	r2, r3
 8005e16:	2300      	movs	r3, #0
 8005e18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e20:	4619      	mov	r1, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e28:	461a      	mov	r2, r3
 8005e2a:	680b      	ldr	r3, [r1, #0]
 8005e2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10c      	bne.n	8005e4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f949 	bl	80060d4 <USB_SetDevSpeed>
 8005e42:	e008      	b.n	8005e56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e44:	2101      	movs	r1, #1
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f944 	bl	80060d4 <USB_SetDevSpeed>
 8005e4c:	e003      	b.n	8005e56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e4e:	2103      	movs	r1, #3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f93f 	bl	80060d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e56:	2110      	movs	r1, #16
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f8f3 	bl	8006044 <USB_FlushTxFifo>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f911 	bl	8006090 <USB_FlushRxFifo>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	461a      	mov	r2, r3
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	e043      	b.n	8005f2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb8:	d118      	bne.n	8005eec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e013      	b.n	8005efe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e008      	b.n	8005efe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	3301      	adds	r3, #1
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3b7      	bcc.n	8005ea2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	e043      	b.n	8005fc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4e:	d118      	bne.n	8005f82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	e013      	b.n	8005f94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e008      	b.n	8005f94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2300      	movs	r3, #0
 8005f92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d3b7      	bcc.n	8005f38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fe8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f043 0210 	orr.w	r2, r3, #16
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <USB_DevInit+0x2c4>)
 8006002:	4313      	orrs	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f043 0208 	orr.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800601a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d107      	bne.n	8006030 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006028:	f043 0304 	orr.w	r3, r3, #4
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800603c:	b004      	add	sp, #16
 800603e:	4770      	bx	lr
 8006040:	803c3800 	.word	0x803c3800

08006044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	019b      	lsls	r3, r3, #6
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_FlushTxFifo+0x48>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b20      	cmp	r3, #32
 800607a:	d0f0      	beq.n	800605e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2210      	movs	r2, #16
 80060a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <USB_FlushRxFifo+0x40>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e006      	b.n	80060c2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d0f0      	beq.n	80060a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	00030d40 	.word	0x00030d40

080060d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a13      	ldr	r2, [pc, #76]	; (80061ac <USB_CoreReset+0x64>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e01b      	b.n	800619e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	daf2      	bge.n	8006154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a09      	ldr	r2, [pc, #36]	; (80061ac <USB_CoreReset+0x64>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e006      	b.n	800619e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b01      	cmp	r3, #1
 800619a:	d0f0      	beq.n	800617e <USB_CoreReset+0x36>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	00030d40 	.word	0x00030d40

080061b0 <__libc_init_array>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	4e0d      	ldr	r6, [pc, #52]	; (80061e8 <__libc_init_array+0x38>)
 80061b4:	4c0d      	ldr	r4, [pc, #52]	; (80061ec <__libc_init_array+0x3c>)
 80061b6:	1ba4      	subs	r4, r4, r6
 80061b8:	10a4      	asrs	r4, r4, #2
 80061ba:	2500      	movs	r5, #0
 80061bc:	42a5      	cmp	r5, r4
 80061be:	d109      	bne.n	80061d4 <__libc_init_array+0x24>
 80061c0:	4e0b      	ldr	r6, [pc, #44]	; (80061f0 <__libc_init_array+0x40>)
 80061c2:	4c0c      	ldr	r4, [pc, #48]	; (80061f4 <__libc_init_array+0x44>)
 80061c4:	f001 f876 	bl	80072b4 <_init>
 80061c8:	1ba4      	subs	r4, r4, r6
 80061ca:	10a4      	asrs	r4, r4, #2
 80061cc:	2500      	movs	r5, #0
 80061ce:	42a5      	cmp	r5, r4
 80061d0:	d105      	bne.n	80061de <__libc_init_array+0x2e>
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061d8:	4798      	blx	r3
 80061da:	3501      	adds	r5, #1
 80061dc:	e7ee      	b.n	80061bc <__libc_init_array+0xc>
 80061de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061e2:	4798      	blx	r3
 80061e4:	3501      	adds	r5, #1
 80061e6:	e7f2      	b.n	80061ce <__libc_init_array+0x1e>
 80061e8:	080074d0 	.word	0x080074d0
 80061ec:	080074d0 	.word	0x080074d0
 80061f0:	080074d0 	.word	0x080074d0
 80061f4:	080074d4 	.word	0x080074d4

080061f8 <memset>:
 80061f8:	4402      	add	r2, r0
 80061fa:	4603      	mov	r3, r0
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d100      	bne.n	8006202 <memset+0xa>
 8006200:	4770      	bx	lr
 8006202:	f803 1b01 	strb.w	r1, [r3], #1
 8006206:	e7f9      	b.n	80061fc <memset+0x4>

08006208 <cos>:
 8006208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800620a:	ec51 0b10 	vmov	r0, r1, d0
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <cos+0x80>)
 8006210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006214:	4293      	cmp	r3, r2
 8006216:	dc06      	bgt.n	8006226 <cos+0x1e>
 8006218:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006280 <cos+0x78>
 800621c:	f000 fa74 	bl	8006708 <__kernel_cos>
 8006220:	ec51 0b10 	vmov	r0, r1, d0
 8006224:	e007      	b.n	8006236 <cos+0x2e>
 8006226:	4a19      	ldr	r2, [pc, #100]	; (800628c <cos+0x84>)
 8006228:	4293      	cmp	r3, r2
 800622a:	dd09      	ble.n	8006240 <cos+0x38>
 800622c:	ee10 2a10 	vmov	r2, s0
 8006230:	460b      	mov	r3, r1
 8006232:	f7f9 ffcd 	bl	80001d0 <__aeabi_dsub>
 8006236:	ec41 0b10 	vmov	d0, r0, r1
 800623a:	b005      	add	sp, #20
 800623c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006240:	4668      	mov	r0, sp
 8006242:	f000 f86d 	bl	8006320 <__ieee754_rem_pio2>
 8006246:	f000 0003 	and.w	r0, r0, #3
 800624a:	2801      	cmp	r0, #1
 800624c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006250:	ed9d 0b00 	vldr	d0, [sp]
 8006254:	d007      	beq.n	8006266 <cos+0x5e>
 8006256:	2802      	cmp	r0, #2
 8006258:	d00e      	beq.n	8006278 <cos+0x70>
 800625a:	2800      	cmp	r0, #0
 800625c:	d0de      	beq.n	800621c <cos+0x14>
 800625e:	2001      	movs	r0, #1
 8006260:	f000 fe5a 	bl	8006f18 <__kernel_sin>
 8006264:	e7dc      	b.n	8006220 <cos+0x18>
 8006266:	f000 fe57 	bl	8006f18 <__kernel_sin>
 800626a:	ec53 2b10 	vmov	r2, r3, d0
 800626e:	ee10 0a10 	vmov	r0, s0
 8006272:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006276:	e7de      	b.n	8006236 <cos+0x2e>
 8006278:	f000 fa46 	bl	8006708 <__kernel_cos>
 800627c:	e7f5      	b.n	800626a <cos+0x62>
 800627e:	bf00      	nop
	...
 8006288:	3fe921fb 	.word	0x3fe921fb
 800628c:	7fefffff 	.word	0x7fefffff

08006290 <sin>:
 8006290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006292:	ec51 0b10 	vmov	r0, r1, d0
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <sin+0x88>)
 8006298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800629c:	4293      	cmp	r3, r2
 800629e:	dc07      	bgt.n	80062b0 <sin+0x20>
 80062a0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006310 <sin+0x80>
 80062a4:	2000      	movs	r0, #0
 80062a6:	f000 fe37 	bl	8006f18 <__kernel_sin>
 80062aa:	ec51 0b10 	vmov	r0, r1, d0
 80062ae:	e007      	b.n	80062c0 <sin+0x30>
 80062b0:	4a1a      	ldr	r2, [pc, #104]	; (800631c <sin+0x8c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	dd09      	ble.n	80062ca <sin+0x3a>
 80062b6:	ee10 2a10 	vmov	r2, s0
 80062ba:	460b      	mov	r3, r1
 80062bc:	f7f9 ff88 	bl	80001d0 <__aeabi_dsub>
 80062c0:	ec41 0b10 	vmov	d0, r0, r1
 80062c4:	b005      	add	sp, #20
 80062c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80062ca:	4668      	mov	r0, sp
 80062cc:	f000 f828 	bl	8006320 <__ieee754_rem_pio2>
 80062d0:	f000 0003 	and.w	r0, r0, #3
 80062d4:	2801      	cmp	r0, #1
 80062d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062da:	ed9d 0b00 	vldr	d0, [sp]
 80062de:	d004      	beq.n	80062ea <sin+0x5a>
 80062e0:	2802      	cmp	r0, #2
 80062e2:	d005      	beq.n	80062f0 <sin+0x60>
 80062e4:	b970      	cbnz	r0, 8006304 <sin+0x74>
 80062e6:	2001      	movs	r0, #1
 80062e8:	e7dd      	b.n	80062a6 <sin+0x16>
 80062ea:	f000 fa0d 	bl	8006708 <__kernel_cos>
 80062ee:	e7dc      	b.n	80062aa <sin+0x1a>
 80062f0:	2001      	movs	r0, #1
 80062f2:	f000 fe11 	bl	8006f18 <__kernel_sin>
 80062f6:	ec53 2b10 	vmov	r2, r3, d0
 80062fa:	ee10 0a10 	vmov	r0, s0
 80062fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006302:	e7dd      	b.n	80062c0 <sin+0x30>
 8006304:	f000 fa00 	bl	8006708 <__kernel_cos>
 8006308:	e7f5      	b.n	80062f6 <sin+0x66>
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w
	...
 8006318:	3fe921fb 	.word	0x3fe921fb
 800631c:	7fefffff 	.word	0x7fefffff

08006320 <__ieee754_rem_pio2>:
 8006320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	ec57 6b10 	vmov	r6, r7, d0
 8006328:	4bc3      	ldr	r3, [pc, #780]	; (8006638 <__ieee754_rem_pio2+0x318>)
 800632a:	b08d      	sub	sp, #52	; 0x34
 800632c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006330:	4598      	cmp	r8, r3
 8006332:	4604      	mov	r4, r0
 8006334:	9704      	str	r7, [sp, #16]
 8006336:	dc07      	bgt.n	8006348 <__ieee754_rem_pio2+0x28>
 8006338:	2200      	movs	r2, #0
 800633a:	2300      	movs	r3, #0
 800633c:	ed84 0b00 	vstr	d0, [r4]
 8006340:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006344:	2500      	movs	r5, #0
 8006346:	e027      	b.n	8006398 <__ieee754_rem_pio2+0x78>
 8006348:	4bbc      	ldr	r3, [pc, #752]	; (800663c <__ieee754_rem_pio2+0x31c>)
 800634a:	4598      	cmp	r8, r3
 800634c:	dc75      	bgt.n	800643a <__ieee754_rem_pio2+0x11a>
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	4dbb      	ldr	r5, [pc, #748]	; (8006640 <__ieee754_rem_pio2+0x320>)
 8006352:	2b00      	cmp	r3, #0
 8006354:	ee10 0a10 	vmov	r0, s0
 8006358:	a3a9      	add	r3, pc, #676	; (adr r3, 8006600 <__ieee754_rem_pio2+0x2e0>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	4639      	mov	r1, r7
 8006360:	dd36      	ble.n	80063d0 <__ieee754_rem_pio2+0xb0>
 8006362:	f7f9 ff35 	bl	80001d0 <__aeabi_dsub>
 8006366:	45a8      	cmp	r8, r5
 8006368:	4606      	mov	r6, r0
 800636a:	460f      	mov	r7, r1
 800636c:	d018      	beq.n	80063a0 <__ieee754_rem_pio2+0x80>
 800636e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006608 <__ieee754_rem_pio2+0x2e8>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7f9 ff2c 	bl	80001d0 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9c4 2300 	strd	r2, r3, [r4]
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7f9 ff24 	bl	80001d0 <__aeabi_dsub>
 8006388:	a39f      	add	r3, pc, #636	; (adr r3, 8006608 <__ieee754_rem_pio2+0x2e8>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7f9 ff1f 	bl	80001d0 <__aeabi_dsub>
 8006392:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006396:	2501      	movs	r5, #1
 8006398:	4628      	mov	r0, r5
 800639a:	b00d      	add	sp, #52	; 0x34
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	a39b      	add	r3, pc, #620	; (adr r3, 8006610 <__ieee754_rem_pio2+0x2f0>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff13 	bl	80001d0 <__aeabi_dsub>
 80063aa:	a39b      	add	r3, pc, #620	; (adr r3, 8006618 <__ieee754_rem_pio2+0x2f8>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	4606      	mov	r6, r0
 80063b2:	460f      	mov	r7, r1
 80063b4:	f7f9 ff0c 	bl	80001d0 <__aeabi_dsub>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	e9c4 2300 	strd	r2, r3, [r4]
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	f7f9 ff04 	bl	80001d0 <__aeabi_dsub>
 80063c8:	a393      	add	r3, pc, #588	; (adr r3, 8006618 <__ieee754_rem_pio2+0x2f8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	e7de      	b.n	800638e <__ieee754_rem_pio2+0x6e>
 80063d0:	f7f9 ff00 	bl	80001d4 <__adddf3>
 80063d4:	45a8      	cmp	r8, r5
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	d016      	beq.n	800640a <__ieee754_rem_pio2+0xea>
 80063dc:	a38a      	add	r3, pc, #552	; (adr r3, 8006608 <__ieee754_rem_pio2+0x2e8>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f7f9 fef7 	bl	80001d4 <__adddf3>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9c4 2300 	strd	r2, r3, [r4]
 80063ee:	4630      	mov	r0, r6
 80063f0:	4639      	mov	r1, r7
 80063f2:	f7f9 feed 	bl	80001d0 <__aeabi_dsub>
 80063f6:	a384      	add	r3, pc, #528	; (adr r3, 8006608 <__ieee754_rem_pio2+0x2e8>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 feea 	bl	80001d4 <__adddf3>
 8006400:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006404:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006408:	e7c6      	b.n	8006398 <__ieee754_rem_pio2+0x78>
 800640a:	a381      	add	r3, pc, #516	; (adr r3, 8006610 <__ieee754_rem_pio2+0x2f0>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7f9 fee0 	bl	80001d4 <__adddf3>
 8006414:	a380      	add	r3, pc, #512	; (adr r3, 8006618 <__ieee754_rem_pio2+0x2f8>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7f9 fed9 	bl	80001d4 <__adddf3>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	e9c4 2300 	strd	r2, r3, [r4]
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7f9 fecf 	bl	80001d0 <__aeabi_dsub>
 8006432:	a379      	add	r3, pc, #484	; (adr r3, 8006618 <__ieee754_rem_pio2+0x2f8>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	e7e0      	b.n	80063fc <__ieee754_rem_pio2+0xdc>
 800643a:	4b82      	ldr	r3, [pc, #520]	; (8006644 <__ieee754_rem_pio2+0x324>)
 800643c:	4598      	cmp	r8, r3
 800643e:	f300 80d0 	bgt.w	80065e2 <__ieee754_rem_pio2+0x2c2>
 8006442:	f000 fe23 	bl	800708c <fabs>
 8006446:	ec57 6b10 	vmov	r6, r7, d0
 800644a:	ee10 0a10 	vmov	r0, s0
 800644e:	a374      	add	r3, pc, #464	; (adr r3, 8006620 <__ieee754_rem_pio2+0x300>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	4639      	mov	r1, r7
 8006456:	f7fa f873 	bl	8000540 <__aeabi_dmul>
 800645a:	2200      	movs	r2, #0
 800645c:	4b7a      	ldr	r3, [pc, #488]	; (8006648 <__ieee754_rem_pio2+0x328>)
 800645e:	f7f9 feb9 	bl	80001d4 <__adddf3>
 8006462:	f7fa fb07 	bl	8000a74 <__aeabi_d2iz>
 8006466:	4605      	mov	r5, r0
 8006468:	f7fa f800 	bl	800046c <__aeabi_i2d>
 800646c:	a364      	add	r3, pc, #400	; (adr r3, 8006600 <__ieee754_rem_pio2+0x2e0>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006476:	f7fa f863 	bl	8000540 <__aeabi_dmul>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4630      	mov	r0, r6
 8006480:	4639      	mov	r1, r7
 8006482:	f7f9 fea5 	bl	80001d0 <__aeabi_dsub>
 8006486:	a360      	add	r3, pc, #384	; (adr r3, 8006608 <__ieee754_rem_pio2+0x2e8>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	4682      	mov	sl, r0
 800648e:	468b      	mov	fp, r1
 8006490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006494:	f7fa f854 	bl	8000540 <__aeabi_dmul>
 8006498:	2d1f      	cmp	r5, #31
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	dc0c      	bgt.n	80064ba <__ieee754_rem_pio2+0x19a>
 80064a0:	1e6a      	subs	r2, r5, #1
 80064a2:	4b6a      	ldr	r3, [pc, #424]	; (800664c <__ieee754_rem_pio2+0x32c>)
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	4543      	cmp	r3, r8
 80064aa:	d006      	beq.n	80064ba <__ieee754_rem_pio2+0x19a>
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	4650      	mov	r0, sl
 80064b2:	4659      	mov	r1, fp
 80064b4:	f7f9 fe8c 	bl	80001d0 <__aeabi_dsub>
 80064b8:	e00e      	b.n	80064d8 <__ieee754_rem_pio2+0x1b8>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	4650      	mov	r0, sl
 80064c0:	4659      	mov	r1, fp
 80064c2:	f7f9 fe85 	bl	80001d0 <__aeabi_dsub>
 80064c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80064ca:	9305      	str	r3, [sp, #20]
 80064cc:	9a05      	ldr	r2, [sp, #20]
 80064ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	dc02      	bgt.n	80064de <__ieee754_rem_pio2+0x1be>
 80064d8:	e9c4 0100 	strd	r0, r1, [r4]
 80064dc:	e039      	b.n	8006552 <__ieee754_rem_pio2+0x232>
 80064de:	a34c      	add	r3, pc, #304	; (adr r3, 8006610 <__ieee754_rem_pio2+0x2f0>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e8:	f7fa f82a 	bl	8000540 <__aeabi_dmul>
 80064ec:	4606      	mov	r6, r0
 80064ee:	460f      	mov	r7, r1
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4650      	mov	r0, sl
 80064f6:	4659      	mov	r1, fp
 80064f8:	f7f9 fe6a 	bl	80001d0 <__aeabi_dsub>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4680      	mov	r8, r0
 8006502:	4689      	mov	r9, r1
 8006504:	4650      	mov	r0, sl
 8006506:	4659      	mov	r1, fp
 8006508:	f7f9 fe62 	bl	80001d0 <__aeabi_dsub>
 800650c:	4632      	mov	r2, r6
 800650e:	463b      	mov	r3, r7
 8006510:	f7f9 fe5e 	bl	80001d0 <__aeabi_dsub>
 8006514:	a340      	add	r3, pc, #256	; (adr r3, 8006618 <__ieee754_rem_pio2+0x2f8>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	4606      	mov	r6, r0
 800651c:	460f      	mov	r7, r1
 800651e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006522:	f7fa f80d 	bl	8000540 <__aeabi_dmul>
 8006526:	4632      	mov	r2, r6
 8006528:	463b      	mov	r3, r7
 800652a:	f7f9 fe51 	bl	80001d0 <__aeabi_dsub>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4606      	mov	r6, r0
 8006534:	460f      	mov	r7, r1
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f7f9 fe49 	bl	80001d0 <__aeabi_dsub>
 800653e:	9a05      	ldr	r2, [sp, #20]
 8006540:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b31      	cmp	r3, #49	; 0x31
 8006548:	dc20      	bgt.n	800658c <__ieee754_rem_pio2+0x26c>
 800654a:	e9c4 0100 	strd	r0, r1, [r4]
 800654e:	46c2      	mov	sl, r8
 8006550:	46cb      	mov	fp, r9
 8006552:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006556:	4650      	mov	r0, sl
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	4659      	mov	r1, fp
 800655e:	f7f9 fe37 	bl	80001d0 <__aeabi_dsub>
 8006562:	463b      	mov	r3, r7
 8006564:	4632      	mov	r2, r6
 8006566:	f7f9 fe33 	bl	80001d0 <__aeabi_dsub>
 800656a:	9b04      	ldr	r3, [sp, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006572:	f6bf af11 	bge.w	8006398 <__ieee754_rem_pio2+0x78>
 8006576:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800657a:	6063      	str	r3, [r4, #4]
 800657c:	f8c4 8000 	str.w	r8, [r4]
 8006580:	60a0      	str	r0, [r4, #8]
 8006582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006586:	60e3      	str	r3, [r4, #12]
 8006588:	426d      	negs	r5, r5
 800658a:	e705      	b.n	8006398 <__ieee754_rem_pio2+0x78>
 800658c:	a326      	add	r3, pc, #152	; (adr r3, 8006628 <__ieee754_rem_pio2+0x308>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006596:	f7f9 ffd3 	bl	8000540 <__aeabi_dmul>
 800659a:	4606      	mov	r6, r0
 800659c:	460f      	mov	r7, r1
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f7f9 fe13 	bl	80001d0 <__aeabi_dsub>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4682      	mov	sl, r0
 80065b0:	468b      	mov	fp, r1
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7f9 fe0b 	bl	80001d0 <__aeabi_dsub>
 80065ba:	4632      	mov	r2, r6
 80065bc:	463b      	mov	r3, r7
 80065be:	f7f9 fe07 	bl	80001d0 <__aeabi_dsub>
 80065c2:	a31b      	add	r3, pc, #108	; (adr r3, 8006630 <__ieee754_rem_pio2+0x310>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d0:	f7f9 ffb6 	bl	8000540 <__aeabi_dmul>
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	f7f9 fdfa 	bl	80001d0 <__aeabi_dsub>
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	e764      	b.n	80064ac <__ieee754_rem_pio2+0x18c>
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <__ieee754_rem_pio2+0x330>)
 80065e4:	4598      	cmp	r8, r3
 80065e6:	dd35      	ble.n	8006654 <__ieee754_rem_pio2+0x334>
 80065e8:	ee10 2a10 	vmov	r2, s0
 80065ec:	463b      	mov	r3, r7
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7f9 fded 	bl	80001d0 <__aeabi_dsub>
 80065f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065fa:	e9c4 0100 	strd	r0, r1, [r4]
 80065fe:	e6a1      	b.n	8006344 <__ieee754_rem_pio2+0x24>
 8006600:	54400000 	.word	0x54400000
 8006604:	3ff921fb 	.word	0x3ff921fb
 8006608:	1a626331 	.word	0x1a626331
 800660c:	3dd0b461 	.word	0x3dd0b461
 8006610:	1a600000 	.word	0x1a600000
 8006614:	3dd0b461 	.word	0x3dd0b461
 8006618:	2e037073 	.word	0x2e037073
 800661c:	3ba3198a 	.word	0x3ba3198a
 8006620:	6dc9c883 	.word	0x6dc9c883
 8006624:	3fe45f30 	.word	0x3fe45f30
 8006628:	2e000000 	.word	0x2e000000
 800662c:	3ba3198a 	.word	0x3ba3198a
 8006630:	252049c1 	.word	0x252049c1
 8006634:	397b839a 	.word	0x397b839a
 8006638:	3fe921fb 	.word	0x3fe921fb
 800663c:	4002d97b 	.word	0x4002d97b
 8006640:	3ff921fb 	.word	0x3ff921fb
 8006644:	413921fb 	.word	0x413921fb
 8006648:	3fe00000 	.word	0x3fe00000
 800664c:	080072f0 	.word	0x080072f0
 8006650:	7fefffff 	.word	0x7fefffff
 8006654:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006658:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800665c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006660:	4630      	mov	r0, r6
 8006662:	460f      	mov	r7, r1
 8006664:	f7fa fa06 	bl	8000a74 <__aeabi_d2iz>
 8006668:	f7f9 ff00 	bl	800046c <__aeabi_i2d>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006678:	f7f9 fdaa 	bl	80001d0 <__aeabi_dsub>
 800667c:	2200      	movs	r2, #0
 800667e:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <__ieee754_rem_pio2+0x3dc>)
 8006680:	f7f9 ff5e 	bl	8000540 <__aeabi_dmul>
 8006684:	460f      	mov	r7, r1
 8006686:	4606      	mov	r6, r0
 8006688:	f7fa f9f4 	bl	8000a74 <__aeabi_d2iz>
 800668c:	f7f9 feee 	bl	800046c <__aeabi_i2d>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800669c:	f7f9 fd98 	bl	80001d0 <__aeabi_dsub>
 80066a0:	2200      	movs	r2, #0
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <__ieee754_rem_pio2+0x3dc>)
 80066a4:	f7f9 ff4c 	bl	8000540 <__aeabi_dmul>
 80066a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066ac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80066b0:	f04f 0803 	mov.w	r8, #3
 80066b4:	2600      	movs	r6, #0
 80066b6:	2700      	movs	r7, #0
 80066b8:	4632      	mov	r2, r6
 80066ba:	463b      	mov	r3, r7
 80066bc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80066c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80066c4:	f7fa f9a4 	bl	8000a10 <__aeabi_dcmpeq>
 80066c8:	b9b0      	cbnz	r0, 80066f8 <__ieee754_rem_pio2+0x3d8>
 80066ca:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <__ieee754_rem_pio2+0x3e0>)
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	2302      	movs	r3, #2
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	462a      	mov	r2, r5
 80066d4:	4643      	mov	r3, r8
 80066d6:	4621      	mov	r1, r4
 80066d8:	a806      	add	r0, sp, #24
 80066da:	f000 f8dd 	bl	8006898 <__kernel_rem_pio2>
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	4605      	mov	r5, r0
 80066e4:	f6bf ae58 	bge.w	8006398 <__ieee754_rem_pio2+0x78>
 80066e8:	6863      	ldr	r3, [r4, #4]
 80066ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	68e3      	ldr	r3, [r4, #12]
 80066f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066f6:	e746      	b.n	8006586 <__ieee754_rem_pio2+0x266>
 80066f8:	46d0      	mov	r8, sl
 80066fa:	e7dd      	b.n	80066b8 <__ieee754_rem_pio2+0x398>
 80066fc:	41700000 	.word	0x41700000
 8006700:	08007370 	.word	0x08007370
 8006704:	00000000 	.word	0x00000000

08006708 <__kernel_cos>:
 8006708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	ec59 8b10 	vmov	r8, r9, d0
 8006710:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006714:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006718:	ed2d 8b02 	vpush	{d8}
 800671c:	eeb0 8a41 	vmov.f32	s16, s2
 8006720:	eef0 8a61 	vmov.f32	s17, s3
 8006724:	da07      	bge.n	8006736 <__kernel_cos+0x2e>
 8006726:	ee10 0a10 	vmov	r0, s0
 800672a:	4649      	mov	r1, r9
 800672c:	f7fa f9a2 	bl	8000a74 <__aeabi_d2iz>
 8006730:	2800      	cmp	r0, #0
 8006732:	f000 8089 	beq.w	8006848 <__kernel_cos+0x140>
 8006736:	4642      	mov	r2, r8
 8006738:	464b      	mov	r3, r9
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 feff 	bl	8000540 <__aeabi_dmul>
 8006742:	2200      	movs	r2, #0
 8006744:	4b4e      	ldr	r3, [pc, #312]	; (8006880 <__kernel_cos+0x178>)
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	f7f9 fef9 	bl	8000540 <__aeabi_dmul>
 800674e:	a340      	add	r3, pc, #256	; (adr r3, 8006850 <__kernel_cos+0x148>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	f7f9 fef0 	bl	8000540 <__aeabi_dmul>
 8006760:	a33d      	add	r3, pc, #244	; (adr r3, 8006858 <__kernel_cos+0x150>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd35 	bl	80001d4 <__adddf3>
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f7f9 fee7 	bl	8000540 <__aeabi_dmul>
 8006772:	a33b      	add	r3, pc, #236	; (adr r3, 8006860 <__kernel_cos+0x158>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd2a 	bl	80001d0 <__aeabi_dsub>
 800677c:	4622      	mov	r2, r4
 800677e:	462b      	mov	r3, r5
 8006780:	f7f9 fede 	bl	8000540 <__aeabi_dmul>
 8006784:	a338      	add	r3, pc, #224	; (adr r3, 8006868 <__kernel_cos+0x160>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fd23 	bl	80001d4 <__adddf3>
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f7f9 fed5 	bl	8000540 <__aeabi_dmul>
 8006796:	a336      	add	r3, pc, #216	; (adr r3, 8006870 <__kernel_cos+0x168>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fd18 	bl	80001d0 <__aeabi_dsub>
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	f7f9 fecc 	bl	8000540 <__aeabi_dmul>
 80067a8:	a333      	add	r3, pc, #204	; (adr r3, 8006878 <__kernel_cos+0x170>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd11 	bl	80001d4 <__adddf3>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 fec3 	bl	8000540 <__aeabi_dmul>
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f7f9 febf 	bl	8000540 <__aeabi_dmul>
 80067c2:	ec53 2b18 	vmov	r2, r3, d8
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f7f9 feb7 	bl	8000540 <__aeabi_dmul>
 80067d2:	460b      	mov	r3, r1
 80067d4:	4602      	mov	r2, r0
 80067d6:	4629      	mov	r1, r5
 80067d8:	4620      	mov	r0, r4
 80067da:	f7f9 fcf9 	bl	80001d0 <__aeabi_dsub>
 80067de:	4b29      	ldr	r3, [pc, #164]	; (8006884 <__kernel_cos+0x17c>)
 80067e0:	429e      	cmp	r6, r3
 80067e2:	4680      	mov	r8, r0
 80067e4:	4689      	mov	r9, r1
 80067e6:	dc11      	bgt.n	800680c <__kernel_cos+0x104>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4650      	mov	r0, sl
 80067ee:	4659      	mov	r1, fp
 80067f0:	f7f9 fcee 	bl	80001d0 <__aeabi_dsub>
 80067f4:	460b      	mov	r3, r1
 80067f6:	4924      	ldr	r1, [pc, #144]	; (8006888 <__kernel_cos+0x180>)
 80067f8:	4602      	mov	r2, r0
 80067fa:	2000      	movs	r0, #0
 80067fc:	f7f9 fce8 	bl	80001d0 <__aeabi_dsub>
 8006800:	ecbd 8b02 	vpop	{d8}
 8006804:	ec41 0b10 	vmov	d0, r0, r1
 8006808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680c:	4b1f      	ldr	r3, [pc, #124]	; (800688c <__kernel_cos+0x184>)
 800680e:	491e      	ldr	r1, [pc, #120]	; (8006888 <__kernel_cos+0x180>)
 8006810:	429e      	cmp	r6, r3
 8006812:	bfcc      	ite	gt
 8006814:	4d1e      	ldrgt	r5, [pc, #120]	; (8006890 <__kernel_cos+0x188>)
 8006816:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800681a:	2400      	movs	r4, #0
 800681c:	4622      	mov	r2, r4
 800681e:	462b      	mov	r3, r5
 8006820:	2000      	movs	r0, #0
 8006822:	f7f9 fcd5 	bl	80001d0 <__aeabi_dsub>
 8006826:	4622      	mov	r2, r4
 8006828:	4606      	mov	r6, r0
 800682a:	460f      	mov	r7, r1
 800682c:	462b      	mov	r3, r5
 800682e:	4650      	mov	r0, sl
 8006830:	4659      	mov	r1, fp
 8006832:	f7f9 fccd 	bl	80001d0 <__aeabi_dsub>
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	f7f9 fcc9 	bl	80001d0 <__aeabi_dsub>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	e7d9      	b.n	80067fc <__kernel_cos+0xf4>
 8006848:	2000      	movs	r0, #0
 800684a:	490f      	ldr	r1, [pc, #60]	; (8006888 <__kernel_cos+0x180>)
 800684c:	e7d8      	b.n	8006800 <__kernel_cos+0xf8>
 800684e:	bf00      	nop
 8006850:	be8838d4 	.word	0xbe8838d4
 8006854:	bda8fae9 	.word	0xbda8fae9
 8006858:	bdb4b1c4 	.word	0xbdb4b1c4
 800685c:	3e21ee9e 	.word	0x3e21ee9e
 8006860:	809c52ad 	.word	0x809c52ad
 8006864:	3e927e4f 	.word	0x3e927e4f
 8006868:	19cb1590 	.word	0x19cb1590
 800686c:	3efa01a0 	.word	0x3efa01a0
 8006870:	16c15177 	.word	0x16c15177
 8006874:	3f56c16c 	.word	0x3f56c16c
 8006878:	5555554c 	.word	0x5555554c
 800687c:	3fa55555 	.word	0x3fa55555
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	3fd33332 	.word	0x3fd33332
 8006888:	3ff00000 	.word	0x3ff00000
 800688c:	3fe90000 	.word	0x3fe90000
 8006890:	3fd20000 	.word	0x3fd20000
 8006894:	00000000 	.word	0x00000000

08006898 <__kernel_rem_pio2>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	ed2d 8b02 	vpush	{d8}
 80068a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80068a4:	1ed4      	subs	r4, r2, #3
 80068a6:	9308      	str	r3, [sp, #32]
 80068a8:	9101      	str	r1, [sp, #4]
 80068aa:	4bc5      	ldr	r3, [pc, #788]	; (8006bc0 <__kernel_rem_pio2+0x328>)
 80068ac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80068ae:	9009      	str	r0, [sp, #36]	; 0x24
 80068b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	9307      	str	r3, [sp, #28]
 80068bc:	2318      	movs	r3, #24
 80068be:	fb94 f4f3 	sdiv	r4, r4, r3
 80068c2:	f06f 0317 	mvn.w	r3, #23
 80068c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80068ca:	fb04 3303 	mla	r3, r4, r3, r3
 80068ce:	eb03 0a02 	add.w	sl, r3, r2
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	9a07      	ldr	r2, [sp, #28]
 80068d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006bb0 <__kernel_rem_pio2+0x318>
 80068da:	eb03 0802 	add.w	r8, r3, r2
 80068de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80068e0:	1aa7      	subs	r7, r4, r2
 80068e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80068e6:	ae22      	add	r6, sp, #136	; 0x88
 80068e8:	2500      	movs	r5, #0
 80068ea:	4545      	cmp	r5, r8
 80068ec:	dd13      	ble.n	8006916 <__kernel_rem_pio2+0x7e>
 80068ee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006bb0 <__kernel_rem_pio2+0x318>
 80068f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80068f6:	2600      	movs	r6, #0
 80068f8:	9b04      	ldr	r3, [sp, #16]
 80068fa:	429e      	cmp	r6, r3
 80068fc:	dc32      	bgt.n	8006964 <__kernel_rem_pio2+0xcc>
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	199d      	adds	r5, r3, r6
 8006906:	ab22      	add	r3, sp, #136	; 0x88
 8006908:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800690c:	9306      	str	r3, [sp, #24]
 800690e:	ec59 8b18 	vmov	r8, r9, d8
 8006912:	2700      	movs	r7, #0
 8006914:	e01f      	b.n	8006956 <__kernel_rem_pio2+0xbe>
 8006916:	42ef      	cmn	r7, r5
 8006918:	d407      	bmi.n	800692a <__kernel_rem_pio2+0x92>
 800691a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800691e:	f7f9 fda5 	bl	800046c <__aeabi_i2d>
 8006922:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006926:	3501      	adds	r5, #1
 8006928:	e7df      	b.n	80068ea <__kernel_rem_pio2+0x52>
 800692a:	ec51 0b18 	vmov	r0, r1, d8
 800692e:	e7f8      	b.n	8006922 <__kernel_rem_pio2+0x8a>
 8006930:	9906      	ldr	r1, [sp, #24]
 8006932:	9d02      	ldr	r5, [sp, #8]
 8006934:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006938:	9106      	str	r1, [sp, #24]
 800693a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800693e:	9502      	str	r5, [sp, #8]
 8006940:	f7f9 fdfe 	bl	8000540 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4640      	mov	r0, r8
 800694a:	4649      	mov	r1, r9
 800694c:	f7f9 fc42 	bl	80001d4 <__adddf3>
 8006950:	3701      	adds	r7, #1
 8006952:	4680      	mov	r8, r0
 8006954:	4689      	mov	r9, r1
 8006956:	9b07      	ldr	r3, [sp, #28]
 8006958:	429f      	cmp	r7, r3
 800695a:	dde9      	ble.n	8006930 <__kernel_rem_pio2+0x98>
 800695c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006960:	3601      	adds	r6, #1
 8006962:	e7c9      	b.n	80068f8 <__kernel_rem_pio2+0x60>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	aa0e      	add	r2, sp, #56	; 0x38
 8006968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800696c:	930c      	str	r3, [sp, #48]	; 0x30
 800696e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006970:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006974:	9c04      	ldr	r4, [sp, #16]
 8006976:	930b      	str	r3, [sp, #44]	; 0x2c
 8006978:	ab9a      	add	r3, sp, #616	; 0x268
 800697a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800697e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006982:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006986:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800698a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800698e:	ab9a      	add	r3, sp, #616	; 0x268
 8006990:	445b      	add	r3, fp
 8006992:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006996:	2500      	movs	r5, #0
 8006998:	1b63      	subs	r3, r4, r5
 800699a:	2b00      	cmp	r3, #0
 800699c:	dc78      	bgt.n	8006a90 <__kernel_rem_pio2+0x1f8>
 800699e:	4650      	mov	r0, sl
 80069a0:	ec49 8b10 	vmov	d0, r8, r9
 80069a4:	f000 fc00 	bl	80071a8 <scalbn>
 80069a8:	ec57 6b10 	vmov	r6, r7, d0
 80069ac:	2200      	movs	r2, #0
 80069ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80069b2:	ee10 0a10 	vmov	r0, s0
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7f9 fdc2 	bl	8000540 <__aeabi_dmul>
 80069bc:	ec41 0b10 	vmov	d0, r0, r1
 80069c0:	f000 fb6e 	bl	80070a0 <floor>
 80069c4:	2200      	movs	r2, #0
 80069c6:	ec51 0b10 	vmov	r0, r1, d0
 80069ca:	4b7e      	ldr	r3, [pc, #504]	; (8006bc4 <__kernel_rem_pio2+0x32c>)
 80069cc:	f7f9 fdb8 	bl	8000540 <__aeabi_dmul>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7f9 fbfa 	bl	80001d0 <__aeabi_dsub>
 80069dc:	460f      	mov	r7, r1
 80069de:	4606      	mov	r6, r0
 80069e0:	f7fa f848 	bl	8000a74 <__aeabi_d2iz>
 80069e4:	9006      	str	r0, [sp, #24]
 80069e6:	f7f9 fd41 	bl	800046c <__aeabi_i2d>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4630      	mov	r0, r6
 80069f0:	4639      	mov	r1, r7
 80069f2:	f7f9 fbed 	bl	80001d0 <__aeabi_dsub>
 80069f6:	f1ba 0f00 	cmp.w	sl, #0
 80069fa:	4606      	mov	r6, r0
 80069fc:	460f      	mov	r7, r1
 80069fe:	dd6c      	ble.n	8006ada <__kernel_rem_pio2+0x242>
 8006a00:	1e62      	subs	r2, r4, #1
 8006a02:	ab0e      	add	r3, sp, #56	; 0x38
 8006a04:	f1ca 0118 	rsb	r1, sl, #24
 8006a08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006a0c:	9d06      	ldr	r5, [sp, #24]
 8006a0e:	fa40 f301 	asr.w	r3, r0, r1
 8006a12:	441d      	add	r5, r3
 8006a14:	408b      	lsls	r3, r1
 8006a16:	1ac0      	subs	r0, r0, r3
 8006a18:	ab0e      	add	r3, sp, #56	; 0x38
 8006a1a:	9506      	str	r5, [sp, #24]
 8006a1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006a20:	f1ca 0317 	rsb	r3, sl, #23
 8006a24:	fa40 f303 	asr.w	r3, r0, r3
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	9b02      	ldr	r3, [sp, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd62      	ble.n	8006af6 <__kernel_rem_pio2+0x25e>
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	2200      	movs	r2, #0
 8006a34:	3301      	adds	r3, #1
 8006a36:	9306      	str	r3, [sp, #24]
 8006a38:	4615      	mov	r5, r2
 8006a3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006a3e:	4294      	cmp	r4, r2
 8006a40:	f300 8095 	bgt.w	8006b6e <__kernel_rem_pio2+0x2d6>
 8006a44:	f1ba 0f00 	cmp.w	sl, #0
 8006a48:	dd07      	ble.n	8006a5a <__kernel_rem_pio2+0x1c2>
 8006a4a:	f1ba 0f01 	cmp.w	sl, #1
 8006a4e:	f000 80a2 	beq.w	8006b96 <__kernel_rem_pio2+0x2fe>
 8006a52:	f1ba 0f02 	cmp.w	sl, #2
 8006a56:	f000 80c1 	beq.w	8006bdc <__kernel_rem_pio2+0x344>
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d14a      	bne.n	8006af6 <__kernel_rem_pio2+0x25e>
 8006a60:	4632      	mov	r2, r6
 8006a62:	463b      	mov	r3, r7
 8006a64:	2000      	movs	r0, #0
 8006a66:	4958      	ldr	r1, [pc, #352]	; (8006bc8 <__kernel_rem_pio2+0x330>)
 8006a68:	f7f9 fbb2 	bl	80001d0 <__aeabi_dsub>
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	d040      	beq.n	8006af6 <__kernel_rem_pio2+0x25e>
 8006a74:	4650      	mov	r0, sl
 8006a76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006bb8 <__kernel_rem_pio2+0x320>
 8006a7a:	f000 fb95 	bl	80071a8 <scalbn>
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4639      	mov	r1, r7
 8006a82:	ec53 2b10 	vmov	r2, r3, d0
 8006a86:	f7f9 fba3 	bl	80001d0 <__aeabi_dsub>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	e032      	b.n	8006af6 <__kernel_rem_pio2+0x25e>
 8006a90:	2200      	movs	r2, #0
 8006a92:	4b4e      	ldr	r3, [pc, #312]	; (8006bcc <__kernel_rem_pio2+0x334>)
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7f9 fd52 	bl	8000540 <__aeabi_dmul>
 8006a9c:	f7f9 ffea 	bl	8000a74 <__aeabi_d2iz>
 8006aa0:	f7f9 fce4 	bl	800046c <__aeabi_i2d>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4b4a      	ldr	r3, [pc, #296]	; (8006bd0 <__kernel_rem_pio2+0x338>)
 8006aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aac:	f7f9 fd48 	bl	8000540 <__aeabi_dmul>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7f9 fb8a 	bl	80001d0 <__aeabi_dsub>
 8006abc:	f7f9 ffda 	bl	8000a74 <__aeabi_d2iz>
 8006ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8006ac2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006ac6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ace:	f7f9 fb81 	bl	80001d4 <__adddf3>
 8006ad2:	3501      	adds	r5, #1
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4689      	mov	r9, r1
 8006ad8:	e75e      	b.n	8006998 <__kernel_rem_pio2+0x100>
 8006ada:	d105      	bne.n	8006ae8 <__kernel_rem_pio2+0x250>
 8006adc:	1e63      	subs	r3, r4, #1
 8006ade:	aa0e      	add	r2, sp, #56	; 0x38
 8006ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ae4:	15c3      	asrs	r3, r0, #23
 8006ae6:	e79f      	b.n	8006a28 <__kernel_rem_pio2+0x190>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4b3a      	ldr	r3, [pc, #232]	; (8006bd4 <__kernel_rem_pio2+0x33c>)
 8006aec:	f7f9 ffae 	bl	8000a4c <__aeabi_dcmpge>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d139      	bne.n	8006b68 <__kernel_rem_pio2+0x2d0>
 8006af4:	9002      	str	r0, [sp, #8]
 8006af6:	2200      	movs	r2, #0
 8006af8:	2300      	movs	r3, #0
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 ff87 	bl	8000a10 <__aeabi_dcmpeq>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f000 80c7 	beq.w	8006c96 <__kernel_rem_pio2+0x3fe>
 8006b08:	1e65      	subs	r5, r4, #1
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	9904      	ldr	r1, [sp, #16]
 8006b10:	428b      	cmp	r3, r1
 8006b12:	da6a      	bge.n	8006bea <__kernel_rem_pio2+0x352>
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	f000 8088 	beq.w	8006c2a <__kernel_rem_pio2+0x392>
 8006b1a:	ab0e      	add	r3, sp, #56	; 0x38
 8006b1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006b20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80b4 	beq.w	8006c92 <__kernel_rem_pio2+0x3fa>
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006bb8 <__kernel_rem_pio2+0x320>
 8006b30:	f000 fb3a 	bl	80071a8 <scalbn>
 8006b34:	00ec      	lsls	r4, r5, #3
 8006b36:	ab72      	add	r3, sp, #456	; 0x1c8
 8006b38:	191e      	adds	r6, r3, r4
 8006b3a:	ec59 8b10 	vmov	r8, r9, d0
 8006b3e:	f106 0a08 	add.w	sl, r6, #8
 8006b42:	462f      	mov	r7, r5
 8006b44:	2f00      	cmp	r7, #0
 8006b46:	f280 80df 	bge.w	8006d08 <__kernel_rem_pio2+0x470>
 8006b4a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006bb0 <__kernel_rem_pio2+0x318>
 8006b4e:	f04f 0a00 	mov.w	sl, #0
 8006b52:	eba5 030a 	sub.w	r3, r5, sl
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f2c0 810a 	blt.w	8006d70 <__kernel_rem_pio2+0x4d8>
 8006b5c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006bd8 <__kernel_rem_pio2+0x340>
 8006b60:	ec59 8b18 	vmov	r8, r9, d8
 8006b64:	2700      	movs	r7, #0
 8006b66:	e0f5      	b.n	8006d54 <__kernel_rem_pio2+0x4bc>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	9302      	str	r3, [sp, #8]
 8006b6c:	e760      	b.n	8006a30 <__kernel_rem_pio2+0x198>
 8006b6e:	ab0e      	add	r3, sp, #56	; 0x38
 8006b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b74:	b94d      	cbnz	r5, 8006b8a <__kernel_rem_pio2+0x2f2>
 8006b76:	b12b      	cbz	r3, 8006b84 <__kernel_rem_pio2+0x2ec>
 8006b78:	a80e      	add	r0, sp, #56	; 0x38
 8006b7a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006b7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006b82:	2301      	movs	r3, #1
 8006b84:	3201      	adds	r2, #1
 8006b86:	461d      	mov	r5, r3
 8006b88:	e759      	b.n	8006a3e <__kernel_rem_pio2+0x1a6>
 8006b8a:	a80e      	add	r0, sp, #56	; 0x38
 8006b8c:	1acb      	subs	r3, r1, r3
 8006b8e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006b92:	462b      	mov	r3, r5
 8006b94:	e7f6      	b.n	8006b84 <__kernel_rem_pio2+0x2ec>
 8006b96:	1e62      	subs	r2, r4, #1
 8006b98:	ab0e      	add	r3, sp, #56	; 0x38
 8006b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006ba2:	a90e      	add	r1, sp, #56	; 0x38
 8006ba4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ba8:	e757      	b.n	8006a5a <__kernel_rem_pio2+0x1c2>
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
	...
 8006bbc:	3ff00000 	.word	0x3ff00000
 8006bc0:	080074b8 	.word	0x080074b8
 8006bc4:	40200000 	.word	0x40200000
 8006bc8:	3ff00000 	.word	0x3ff00000
 8006bcc:	3e700000 	.word	0x3e700000
 8006bd0:	41700000 	.word	0x41700000
 8006bd4:	3fe00000 	.word	0x3fe00000
 8006bd8:	08007478 	.word	0x08007478
 8006bdc:	1e62      	subs	r2, r4, #1
 8006bde:	ab0e      	add	r3, sp, #56	; 0x38
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006be8:	e7db      	b.n	8006ba2 <__kernel_rem_pio2+0x30a>
 8006bea:	a90e      	add	r1, sp, #56	; 0x38
 8006bec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	e78b      	b.n	8006b0e <__kernel_rem_pio2+0x276>
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d0fa      	beq.n	8006bf6 <__kernel_rem_pio2+0x35e>
 8006c00:	9a08      	ldr	r2, [sp, #32]
 8006c02:	4422      	add	r2, r4
 8006c04:	00d2      	lsls	r2, r2, #3
 8006c06:	a922      	add	r1, sp, #136	; 0x88
 8006c08:	18e3      	adds	r3, r4, r3
 8006c0a:	9206      	str	r2, [sp, #24]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	f10b 0108 	add.w	r1, fp, #8
 8006c14:	f102 0308 	add.w	r3, r2, #8
 8006c18:	1c66      	adds	r6, r4, #1
 8006c1a:	910a      	str	r1, [sp, #40]	; 0x28
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	42b3      	cmp	r3, r6
 8006c24:	da04      	bge.n	8006c30 <__kernel_rem_pio2+0x398>
 8006c26:	461c      	mov	r4, r3
 8006c28:	e6a6      	b.n	8006978 <__kernel_rem_pio2+0xe0>
 8006c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e7e3      	b.n	8006bf8 <__kernel_rem_pio2+0x360>
 8006c30:	9b06      	ldr	r3, [sp, #24]
 8006c32:	18ef      	adds	r7, r5, r3
 8006c34:	ab22      	add	r3, sp, #136	; 0x88
 8006c36:	441f      	add	r7, r3
 8006c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c3a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c3e:	f7f9 fc15 	bl	800046c <__aeabi_i2d>
 8006c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c44:	461c      	mov	r4, r3
 8006c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c48:	e9c7 0100 	strd	r0, r1, [r7]
 8006c4c:	eb03 0b05 	add.w	fp, r3, r5
 8006c50:	2700      	movs	r7, #0
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	f04f 0900 	mov.w	r9, #0
 8006c5a:	9b07      	ldr	r3, [sp, #28]
 8006c5c:	429f      	cmp	r7, r3
 8006c5e:	dd08      	ble.n	8006c72 <__kernel_rem_pio2+0x3da>
 8006c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c62:	aa72      	add	r2, sp, #456	; 0x1c8
 8006c64:	18eb      	adds	r3, r5, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	3508      	adds	r5, #8
 8006c70:	e7d6      	b.n	8006c20 <__kernel_rem_pio2+0x388>
 8006c72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006c76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006c7a:	f7f9 fc61 	bl	8000540 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 faa5 	bl	80001d4 <__adddf3>
 8006c8a:	3701      	adds	r7, #1
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4689      	mov	r9, r1
 8006c90:	e7e3      	b.n	8006c5a <__kernel_rem_pio2+0x3c2>
 8006c92:	3d01      	subs	r5, #1
 8006c94:	e741      	b.n	8006b1a <__kernel_rem_pio2+0x282>
 8006c96:	f1ca 0000 	rsb	r0, sl, #0
 8006c9a:	ec47 6b10 	vmov	d0, r6, r7
 8006c9e:	f000 fa83 	bl	80071a8 <scalbn>
 8006ca2:	ec57 6b10 	vmov	r6, r7, d0
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4b99      	ldr	r3, [pc, #612]	; (8006f10 <__kernel_rem_pio2+0x678>)
 8006caa:	ee10 0a10 	vmov	r0, s0
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 fecc 	bl	8000a4c <__aeabi_dcmpge>
 8006cb4:	b1f8      	cbz	r0, 8006cf6 <__kernel_rem_pio2+0x45e>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4b96      	ldr	r3, [pc, #600]	; (8006f14 <__kernel_rem_pio2+0x67c>)
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 fc3f 	bl	8000540 <__aeabi_dmul>
 8006cc2:	f7f9 fed7 	bl	8000a74 <__aeabi_d2iz>
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	f7f9 fbd0 	bl	800046c <__aeabi_i2d>
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4b90      	ldr	r3, [pc, #576]	; (8006f10 <__kernel_rem_pio2+0x678>)
 8006cd0:	f7f9 fc36 	bl	8000540 <__aeabi_dmul>
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7f9 fa78 	bl	80001d0 <__aeabi_dsub>
 8006ce0:	f7f9 fec8 	bl	8000a74 <__aeabi_d2iz>
 8006ce4:	1c65      	adds	r5, r4, #1
 8006ce6:	ab0e      	add	r3, sp, #56	; 0x38
 8006ce8:	f10a 0a18 	add.w	sl, sl, #24
 8006cec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006cf0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006cf4:	e719      	b.n	8006b2a <__kernel_rem_pio2+0x292>
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	f7f9 febb 	bl	8000a74 <__aeabi_d2iz>
 8006cfe:	ab0e      	add	r3, sp, #56	; 0x38
 8006d00:	4625      	mov	r5, r4
 8006d02:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d06:	e710      	b.n	8006b2a <__kernel_rem_pio2+0x292>
 8006d08:	ab0e      	add	r3, sp, #56	; 0x38
 8006d0a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006d0e:	f7f9 fbad 	bl	800046c <__aeabi_i2d>
 8006d12:	4642      	mov	r2, r8
 8006d14:	464b      	mov	r3, r9
 8006d16:	f7f9 fc13 	bl	8000540 <__aeabi_dmul>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006d20:	4b7c      	ldr	r3, [pc, #496]	; (8006f14 <__kernel_rem_pio2+0x67c>)
 8006d22:	4640      	mov	r0, r8
 8006d24:	4649      	mov	r1, r9
 8006d26:	f7f9 fc0b 	bl	8000540 <__aeabi_dmul>
 8006d2a:	3f01      	subs	r7, #1
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	4689      	mov	r9, r1
 8006d30:	e708      	b.n	8006b44 <__kernel_rem_pio2+0x2ac>
 8006d32:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006d3e:	f7f9 fbff 	bl	8000540 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 fa43 	bl	80001d4 <__adddf3>
 8006d4e:	3701      	adds	r7, #1
 8006d50:	4680      	mov	r8, r0
 8006d52:	4689      	mov	r9, r1
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	429f      	cmp	r7, r3
 8006d58:	dc01      	bgt.n	8006d5e <__kernel_rem_pio2+0x4c6>
 8006d5a:	45ba      	cmp	sl, r7
 8006d5c:	dae9      	bge.n	8006d32 <__kernel_rem_pio2+0x49a>
 8006d5e:	ab4a      	add	r3, sp, #296	; 0x128
 8006d60:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d64:	e9c3 8900 	strd	r8, r9, [r3]
 8006d68:	f10a 0a01 	add.w	sl, sl, #1
 8006d6c:	3e08      	subs	r6, #8
 8006d6e:	e6f0      	b.n	8006b52 <__kernel_rem_pio2+0x2ba>
 8006d70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d85b      	bhi.n	8006e2e <__kernel_rem_pio2+0x596>
 8006d76:	e8df f003 	tbb	[pc, r3]
 8006d7a:	264a      	.short	0x264a
 8006d7c:	0226      	.short	0x0226
 8006d7e:	ab9a      	add	r3, sp, #616	; 0x268
 8006d80:	441c      	add	r4, r3
 8006d82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006d86:	46a2      	mov	sl, r4
 8006d88:	46ab      	mov	fp, r5
 8006d8a:	f1bb 0f00 	cmp.w	fp, #0
 8006d8e:	dc6c      	bgt.n	8006e6a <__kernel_rem_pio2+0x5d2>
 8006d90:	46a2      	mov	sl, r4
 8006d92:	46ab      	mov	fp, r5
 8006d94:	f1bb 0f01 	cmp.w	fp, #1
 8006d98:	f300 8086 	bgt.w	8006ea8 <__kernel_rem_pio2+0x610>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	2d01      	cmp	r5, #1
 8006da2:	f300 80a0 	bgt.w	8006ee6 <__kernel_rem_pio2+0x64e>
 8006da6:	9b02      	ldr	r3, [sp, #8]
 8006da8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006dac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 809e 	bne.w	8006ef2 <__kernel_rem_pio2+0x65a>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	e9c3 7800 	strd	r7, r8, [r3]
 8006dbc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006dc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006dc4:	e033      	b.n	8006e2e <__kernel_rem_pio2+0x596>
 8006dc6:	3408      	adds	r4, #8
 8006dc8:	ab4a      	add	r3, sp, #296	; 0x128
 8006dca:	441c      	add	r4, r3
 8006dcc:	462e      	mov	r6, r5
 8006dce:	2000      	movs	r0, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	da3a      	bge.n	8006e4c <__kernel_rem_pio2+0x5b4>
 8006dd6:	9b02      	ldr	r3, [sp, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d03d      	beq.n	8006e58 <__kernel_rem_pio2+0x5c0>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006de2:	9c01      	ldr	r4, [sp, #4]
 8006de4:	e9c4 2300 	strd	r2, r3, [r4]
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006df0:	f7f9 f9ee 	bl	80001d0 <__aeabi_dsub>
 8006df4:	ae4c      	add	r6, sp, #304	; 0x130
 8006df6:	2401      	movs	r4, #1
 8006df8:	42a5      	cmp	r5, r4
 8006dfa:	da30      	bge.n	8006e5e <__kernel_rem_pio2+0x5c6>
 8006dfc:	9b02      	ldr	r3, [sp, #8]
 8006dfe:	b113      	cbz	r3, 8006e06 <__kernel_rem_pio2+0x56e>
 8006e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e04:	4619      	mov	r1, r3
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e0c:	e00f      	b.n	8006e2e <__kernel_rem_pio2+0x596>
 8006e0e:	ab9a      	add	r3, sp, #616	; 0x268
 8006e10:	441c      	add	r4, r3
 8006e12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006e16:	2000      	movs	r0, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	2d00      	cmp	r5, #0
 8006e1c:	da10      	bge.n	8006e40 <__kernel_rem_pio2+0x5a8>
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	b113      	cbz	r3, 8006e28 <__kernel_rem_pio2+0x590>
 8006e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e26:	4619      	mov	r1, r3
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	e9c3 0100 	strd	r0, r1, [r3]
 8006e2e:	9b06      	ldr	r3, [sp, #24]
 8006e30:	f003 0007 	and.w	r0, r3, #7
 8006e34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006e38:	ecbd 8b02 	vpop	{d8}
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e44:	f7f9 f9c6 	bl	80001d4 <__adddf3>
 8006e48:	3d01      	subs	r5, #1
 8006e4a:	e7e6      	b.n	8006e1a <__kernel_rem_pio2+0x582>
 8006e4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e50:	f7f9 f9c0 	bl	80001d4 <__adddf3>
 8006e54:	3e01      	subs	r6, #1
 8006e56:	e7bc      	b.n	8006dd2 <__kernel_rem_pio2+0x53a>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	e7c1      	b.n	8006de2 <__kernel_rem_pio2+0x54a>
 8006e5e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006e62:	f7f9 f9b7 	bl	80001d4 <__adddf3>
 8006e66:	3401      	adds	r4, #1
 8006e68:	e7c6      	b.n	8006df8 <__kernel_rem_pio2+0x560>
 8006e6a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006e6e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006e72:	4640      	mov	r0, r8
 8006e74:	ec53 2b17 	vmov	r2, r3, d7
 8006e78:	4649      	mov	r1, r9
 8006e7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e7e:	f7f9 f9a9 	bl	80001d4 <__adddf3>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4606      	mov	r6, r0
 8006e88:	460f      	mov	r7, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 f99f 	bl	80001d0 <__aeabi_dsub>
 8006e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e96:	f7f9 f99d 	bl	80001d4 <__adddf3>
 8006e9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006e9e:	e9ca 0100 	strd	r0, r1, [sl]
 8006ea2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006ea6:	e770      	b.n	8006d8a <__kernel_rem_pio2+0x4f2>
 8006ea8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006eac:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	ec53 2b17 	vmov	r2, r3, d7
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ebc:	f7f9 f98a 	bl	80001d4 <__adddf3>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	4630      	mov	r0, r6
 8006eca:	4639      	mov	r1, r7
 8006ecc:	f7f9 f980 	bl	80001d0 <__aeabi_dsub>
 8006ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed4:	f7f9 f97e 	bl	80001d4 <__adddf3>
 8006ed8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006edc:	e9ca 0100 	strd	r0, r1, [sl]
 8006ee0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006ee4:	e756      	b.n	8006d94 <__kernel_rem_pio2+0x4fc>
 8006ee6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006eea:	f7f9 f973 	bl	80001d4 <__adddf3>
 8006eee:	3d01      	subs	r5, #1
 8006ef0:	e756      	b.n	8006da0 <__kernel_rem_pio2+0x508>
 8006ef2:	9b01      	ldr	r3, [sp, #4]
 8006ef4:	9a01      	ldr	r2, [sp, #4]
 8006ef6:	601f      	str	r7, [r3, #0]
 8006ef8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006efc:	605c      	str	r4, [r3, #4]
 8006efe:	609d      	str	r5, [r3, #8]
 8006f00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f04:	60d3      	str	r3, [r2, #12]
 8006f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f0a:	6110      	str	r0, [r2, #16]
 8006f0c:	6153      	str	r3, [r2, #20]
 8006f0e:	e78e      	b.n	8006e2e <__kernel_rem_pio2+0x596>
 8006f10:	41700000 	.word	0x41700000
 8006f14:	3e700000 	.word	0x3e700000

08006f18 <__kernel_sin>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	ec55 4b10 	vmov	r4, r5, d0
 8006f20:	b085      	sub	sp, #20
 8006f22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f26:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f2a:	ed8d 1b00 	vstr	d1, [sp]
 8006f2e:	9002      	str	r0, [sp, #8]
 8006f30:	da06      	bge.n	8006f40 <__kernel_sin+0x28>
 8006f32:	ee10 0a10 	vmov	r0, s0
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 fd9c 	bl	8000a74 <__aeabi_d2iz>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d051      	beq.n	8006fe4 <__kernel_sin+0xcc>
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fafa 	bl	8000540 <__aeabi_dmul>
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	468b      	mov	fp, r1
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 faf2 	bl	8000540 <__aeabi_dmul>
 8006f5c:	a341      	add	r3, pc, #260	; (adr r3, 8007064 <__kernel_sin+0x14c>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	4680      	mov	r8, r0
 8006f64:	4689      	mov	r9, r1
 8006f66:	4650      	mov	r0, sl
 8006f68:	4659      	mov	r1, fp
 8006f6a:	f7f9 fae9 	bl	8000540 <__aeabi_dmul>
 8006f6e:	a33f      	add	r3, pc, #252	; (adr r3, 800706c <__kernel_sin+0x154>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 f92c 	bl	80001d0 <__aeabi_dsub>
 8006f78:	4652      	mov	r2, sl
 8006f7a:	465b      	mov	r3, fp
 8006f7c:	f7f9 fae0 	bl	8000540 <__aeabi_dmul>
 8006f80:	a33c      	add	r3, pc, #240	; (adr r3, 8007074 <__kernel_sin+0x15c>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 f925 	bl	80001d4 <__adddf3>
 8006f8a:	4652      	mov	r2, sl
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	f7f9 fad7 	bl	8000540 <__aeabi_dmul>
 8006f92:	a33a      	add	r3, pc, #232	; (adr r3, 800707c <__kernel_sin+0x164>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 f91a 	bl	80001d0 <__aeabi_dsub>
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	465b      	mov	r3, fp
 8006fa0:	f7f9 face 	bl	8000540 <__aeabi_dmul>
 8006fa4:	a337      	add	r3, pc, #220	; (adr r3, 8007084 <__kernel_sin+0x16c>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 f913 	bl	80001d4 <__adddf3>
 8006fae:	9b02      	ldr	r3, [sp, #8]
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	460f      	mov	r7, r1
 8006fb4:	b9db      	cbnz	r3, 8006fee <__kernel_sin+0xd6>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4650      	mov	r0, sl
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	f7f9 fabf 	bl	8000540 <__aeabi_dmul>
 8006fc2:	a325      	add	r3, pc, #148	; (adr r3, 8007058 <__kernel_sin+0x140>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f902 	bl	80001d0 <__aeabi_dsub>
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	f7f9 fab6 	bl	8000540 <__aeabi_dmul>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7f9 f8fa 	bl	80001d4 <__adddf3>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	460d      	mov	r5, r1
 8006fe4:	ec45 4b10 	vmov	d0, r4, r5
 8006fe8:	b005      	add	sp, #20
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <__kernel_sin+0x148>)
 8006ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ff6:	f7f9 faa3 	bl	8000540 <__aeabi_dmul>
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007000:	463b      	mov	r3, r7
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 fa9b 	bl	8000540 <__aeabi_dmul>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007012:	f7f9 f8dd 	bl	80001d0 <__aeabi_dsub>
 8007016:	4652      	mov	r2, sl
 8007018:	465b      	mov	r3, fp
 800701a:	f7f9 fa91 	bl	8000540 <__aeabi_dmul>
 800701e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007022:	f7f9 f8d5 	bl	80001d0 <__aeabi_dsub>
 8007026:	a30c      	add	r3, pc, #48	; (adr r3, 8007058 <__kernel_sin+0x140>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	4606      	mov	r6, r0
 800702e:	460f      	mov	r7, r1
 8007030:	4640      	mov	r0, r8
 8007032:	4649      	mov	r1, r9
 8007034:	f7f9 fa84 	bl	8000540 <__aeabi_dmul>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 f8c8 	bl	80001d4 <__adddf3>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4620      	mov	r0, r4
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 f8c0 	bl	80001d0 <__aeabi_dsub>
 8007050:	e7c6      	b.n	8006fe0 <__kernel_sin+0xc8>
 8007052:	bf00      	nop
 8007054:	f3af 8000 	nop.w
 8007058:	55555549 	.word	0x55555549
 800705c:	3fc55555 	.word	0x3fc55555
 8007060:	3fe00000 	.word	0x3fe00000
 8007064:	5acfd57c 	.word	0x5acfd57c
 8007068:	3de5d93a 	.word	0x3de5d93a
 800706c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007070:	3e5ae5e6 	.word	0x3e5ae5e6
 8007074:	57b1fe7d 	.word	0x57b1fe7d
 8007078:	3ec71de3 	.word	0x3ec71de3
 800707c:	19c161d5 	.word	0x19c161d5
 8007080:	3f2a01a0 	.word	0x3f2a01a0
 8007084:	1110f8a6 	.word	0x1110f8a6
 8007088:	3f811111 	.word	0x3f811111

0800708c <fabs>:
 800708c:	ec51 0b10 	vmov	r0, r1, d0
 8007090:	ee10 2a10 	vmov	r2, s0
 8007094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007098:	ec43 2b10 	vmov	d0, r2, r3
 800709c:	4770      	bx	lr
	...

080070a0 <floor>:
 80070a0:	ec51 0b10 	vmov	r0, r1, d0
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80070ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80070b0:	2e13      	cmp	r6, #19
 80070b2:	460c      	mov	r4, r1
 80070b4:	ee10 5a10 	vmov	r5, s0
 80070b8:	4680      	mov	r8, r0
 80070ba:	dc34      	bgt.n	8007126 <floor+0x86>
 80070bc:	2e00      	cmp	r6, #0
 80070be:	da16      	bge.n	80070ee <floor+0x4e>
 80070c0:	a335      	add	r3, pc, #212	; (adr r3, 8007198 <floor+0xf8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 f885 	bl	80001d4 <__adddf3>
 80070ca:	2200      	movs	r2, #0
 80070cc:	2300      	movs	r3, #0
 80070ce:	f7f9 fcc7 	bl	8000a60 <__aeabi_dcmpgt>
 80070d2:	b148      	cbz	r0, 80070e8 <floor+0x48>
 80070d4:	2c00      	cmp	r4, #0
 80070d6:	da59      	bge.n	800718c <floor+0xec>
 80070d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80070dc:	4a30      	ldr	r2, [pc, #192]	; (80071a0 <floor+0x100>)
 80070de:	432b      	orrs	r3, r5
 80070e0:	2500      	movs	r5, #0
 80070e2:	42ab      	cmp	r3, r5
 80070e4:	bf18      	it	ne
 80070e6:	4614      	movne	r4, r2
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	e025      	b.n	800713a <floor+0x9a>
 80070ee:	4f2d      	ldr	r7, [pc, #180]	; (80071a4 <floor+0x104>)
 80070f0:	4137      	asrs	r7, r6
 80070f2:	ea01 0307 	and.w	r3, r1, r7
 80070f6:	4303      	orrs	r3, r0
 80070f8:	d01f      	beq.n	800713a <floor+0x9a>
 80070fa:	a327      	add	r3, pc, #156	; (adr r3, 8007198 <floor+0xf8>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 f868 	bl	80001d4 <__adddf3>
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fcaa 	bl	8000a60 <__aeabi_dcmpgt>
 800710c:	2800      	cmp	r0, #0
 800710e:	d0eb      	beq.n	80070e8 <floor+0x48>
 8007110:	2c00      	cmp	r4, #0
 8007112:	bfbe      	ittt	lt
 8007114:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007118:	fa43 f606 	asrlt.w	r6, r3, r6
 800711c:	19a4      	addlt	r4, r4, r6
 800711e:	ea24 0407 	bic.w	r4, r4, r7
 8007122:	2500      	movs	r5, #0
 8007124:	e7e0      	b.n	80070e8 <floor+0x48>
 8007126:	2e33      	cmp	r6, #51	; 0x33
 8007128:	dd0b      	ble.n	8007142 <floor+0xa2>
 800712a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800712e:	d104      	bne.n	800713a <floor+0x9a>
 8007130:	ee10 2a10 	vmov	r2, s0
 8007134:	460b      	mov	r3, r1
 8007136:	f7f9 f84d 	bl	80001d4 <__adddf3>
 800713a:	ec41 0b10 	vmov	d0, r0, r1
 800713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007142:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800714a:	fa23 f707 	lsr.w	r7, r3, r7
 800714e:	4207      	tst	r7, r0
 8007150:	d0f3      	beq.n	800713a <floor+0x9a>
 8007152:	a311      	add	r3, pc, #68	; (adr r3, 8007198 <floor+0xf8>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f7f9 f83c 	bl	80001d4 <__adddf3>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	f7f9 fc7e 	bl	8000a60 <__aeabi_dcmpgt>
 8007164:	2800      	cmp	r0, #0
 8007166:	d0bf      	beq.n	80070e8 <floor+0x48>
 8007168:	2c00      	cmp	r4, #0
 800716a:	da02      	bge.n	8007172 <floor+0xd2>
 800716c:	2e14      	cmp	r6, #20
 800716e:	d103      	bne.n	8007178 <floor+0xd8>
 8007170:	3401      	adds	r4, #1
 8007172:	ea25 0507 	bic.w	r5, r5, r7
 8007176:	e7b7      	b.n	80070e8 <floor+0x48>
 8007178:	2301      	movs	r3, #1
 800717a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800717e:	fa03 f606 	lsl.w	r6, r3, r6
 8007182:	4435      	add	r5, r6
 8007184:	4545      	cmp	r5, r8
 8007186:	bf38      	it	cc
 8007188:	18e4      	addcc	r4, r4, r3
 800718a:	e7f2      	b.n	8007172 <floor+0xd2>
 800718c:	2500      	movs	r5, #0
 800718e:	462c      	mov	r4, r5
 8007190:	e7aa      	b.n	80070e8 <floor+0x48>
 8007192:	bf00      	nop
 8007194:	f3af 8000 	nop.w
 8007198:	8800759c 	.word	0x8800759c
 800719c:	7e37e43c 	.word	0x7e37e43c
 80071a0:	bff00000 	.word	0xbff00000
 80071a4:	000fffff 	.word	0x000fffff

080071a8 <scalbn>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	ec55 4b10 	vmov	r4, r5, d0
 80071ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80071b2:	4606      	mov	r6, r0
 80071b4:	462b      	mov	r3, r5
 80071b6:	b9aa      	cbnz	r2, 80071e4 <scalbn+0x3c>
 80071b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071bc:	4323      	orrs	r3, r4
 80071be:	d03b      	beq.n	8007238 <scalbn+0x90>
 80071c0:	4b31      	ldr	r3, [pc, #196]	; (8007288 <scalbn+0xe0>)
 80071c2:	4629      	mov	r1, r5
 80071c4:	2200      	movs	r2, #0
 80071c6:	ee10 0a10 	vmov	r0, s0
 80071ca:	f7f9 f9b9 	bl	8000540 <__aeabi_dmul>
 80071ce:	4b2f      	ldr	r3, [pc, #188]	; (800728c <scalbn+0xe4>)
 80071d0:	429e      	cmp	r6, r3
 80071d2:	4604      	mov	r4, r0
 80071d4:	460d      	mov	r5, r1
 80071d6:	da12      	bge.n	80071fe <scalbn+0x56>
 80071d8:	a327      	add	r3, pc, #156	; (adr r3, 8007278 <scalbn+0xd0>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f9af 	bl	8000540 <__aeabi_dmul>
 80071e2:	e009      	b.n	80071f8 <scalbn+0x50>
 80071e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80071e8:	428a      	cmp	r2, r1
 80071ea:	d10c      	bne.n	8007206 <scalbn+0x5e>
 80071ec:	ee10 2a10 	vmov	r2, s0
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f8 ffee 	bl	80001d4 <__adddf3>
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	e01c      	b.n	8007238 <scalbn+0x90>
 80071fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007202:	460b      	mov	r3, r1
 8007204:	3a36      	subs	r2, #54	; 0x36
 8007206:	4432      	add	r2, r6
 8007208:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800720c:	428a      	cmp	r2, r1
 800720e:	dd0b      	ble.n	8007228 <scalbn+0x80>
 8007210:	ec45 4b11 	vmov	d1, r4, r5
 8007214:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007280 <scalbn+0xd8>
 8007218:	f000 f83c 	bl	8007294 <copysign>
 800721c:	a318      	add	r3, pc, #96	; (adr r3, 8007280 <scalbn+0xd8>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	ec51 0b10 	vmov	r0, r1, d0
 8007226:	e7da      	b.n	80071de <scalbn+0x36>
 8007228:	2a00      	cmp	r2, #0
 800722a:	dd08      	ble.n	800723e <scalbn+0x96>
 800722c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007230:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007234:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007238:	ec45 4b10 	vmov	d0, r4, r5
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007242:	da0d      	bge.n	8007260 <scalbn+0xb8>
 8007244:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007248:	429e      	cmp	r6, r3
 800724a:	ec45 4b11 	vmov	d1, r4, r5
 800724e:	dce1      	bgt.n	8007214 <scalbn+0x6c>
 8007250:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007278 <scalbn+0xd0>
 8007254:	f000 f81e 	bl	8007294 <copysign>
 8007258:	a307      	add	r3, pc, #28	; (adr r3, 8007278 <scalbn+0xd0>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	e7e0      	b.n	8007222 <scalbn+0x7a>
 8007260:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007264:	3236      	adds	r2, #54	; 0x36
 8007266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800726a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	2200      	movs	r2, #0
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <scalbn+0xe8>)
 8007276:	e7b2      	b.n	80071de <scalbn+0x36>
 8007278:	c2f8f359 	.word	0xc2f8f359
 800727c:	01a56e1f 	.word	0x01a56e1f
 8007280:	8800759c 	.word	0x8800759c
 8007284:	7e37e43c 	.word	0x7e37e43c
 8007288:	43500000 	.word	0x43500000
 800728c:	ffff3cb0 	.word	0xffff3cb0
 8007290:	3c900000 	.word	0x3c900000

08007294 <copysign>:
 8007294:	ec51 0b10 	vmov	r0, r1, d0
 8007298:	ee11 0a90 	vmov	r0, s3
 800729c:	ee10 2a10 	vmov	r2, s0
 80072a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80072a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80072a8:	ea41 0300 	orr.w	r3, r1, r0
 80072ac:	ec43 2b10 	vmov	d0, r2, r3
 80072b0:	4770      	bx	lr
	...

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
