
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  2000000c  080051ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  080051ac  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f44  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002739  00000000  00000000  00032f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001298  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  00036958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022699  00000000  00000000  00037ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eebf  00000000  00000000  0005a179  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d17bc  00000000  00000000  00069038  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a7f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fcc  00000000  00000000  0013a870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005158 	.word	0x08005158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005158 	.word	0x08005158

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <process_init>:




void process_init()
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  // initialize data structures
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <loop>:

void loop() {
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

   // manage user controls here (LEDs, Pots)
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <process>:

void process(int *in_sample, int *out_sample)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]

  // passthru
  *out_sample = *in_sample;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	601a      	str	r2, [r3, #0]

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 ff68 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f824 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fae6 	bl	8000ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 fac4 	bl	8000aa0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000518:	f000 f89c 	bl	8000654 <MX_ADC1_Init>
  MX_I2C1_Init();
 800051c:	f000 f8ec 	bl	80006f8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000520:	f000 f918 	bl	8000754 <MX_I2S2_Init>
  MX_TIM2_Init();
 8000524:	f000 f944 	bl	80007b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000528:	f000 f9a4 	bl	8000874 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052c:	f000 fa1c 	bl	8000968 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 fa88 	bl	8000a44 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  process_init();
 8000534:	f7ff ffc8 	bl	80004c8 <process_init>

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 2);
 8000538:	2302      	movs	r3, #2
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <main+0x48>)
 800053c:	4904      	ldr	r1, [pc, #16]	; (8000550 <main+0x4c>)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x50>)
 8000540:	f002 fc00 	bl	8002d44 <HAL_I2SEx_TransmitReceive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

      loop();
 8000544:	f7ff ffc7 	bl	80004d6 <loop>
 8000548:	e7fc      	b.n	8000544 <main+0x40>
 800054a:	bf00      	nop
 800054c:	20000550 	.word	0x20000550
 8000550:	20000558 	.word	0x20000558
 8000554:	20000664 	.word	0x20000664

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b098      	sub	sp, #96	; 0x60
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fdee 	bl	8005148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <SystemClock_Config+0xf4>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	4a2e      	ldr	r2, [pc, #184]	; (800064c <SystemClock_Config+0xf4>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <SystemClock_Config+0xf4>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xf8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a28      	ldr	r2, [pc, #160]	; (8000650 <SystemClock_Config+0xf8>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <SystemClock_Config+0xf8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005da:	23a8      	movs	r3, #168	; 0xa8
 80005dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f98c 	bl	8003908 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005f6:	f000 fb61 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000602:	2390      	movs	r3, #144	; 0x90
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fbe7 	bl	8003de8 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000620:	f000 fb4c 	bl	8000cbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000624:	2301      	movs	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000628:	23c0      	movs	r3, #192	; 0xc0
 800062a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fdb3 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000640:	f000 fb3c 	bl	8000cbc <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3760      	adds	r7, #96	; 0x60
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_ADC1_Init+0x98>)
 8000674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ADC1_Init+0x98>)
 8000682:	2201      	movs	r2, #1
 8000684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_ADC1_Init+0x98>)
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa0>)
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b6:	f000 ff25 	bl	8001504 <HAL_ADC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c0:	f000 fafc 	bl	8000cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_ADC1_Init+0x98>)
 80006d6:	f000 ff59 	bl	800158c <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 faec 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000508 	.word	0x20000508
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f001 ff7b 	bl	8002630 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 fabc 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000006c 	.word	0x2000006c
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_I2S2_Init+0x54>)
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <MX_I2S2_Init+0x58>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2S2_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_I2S2_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2S2_Init+0x54>)
 800076e:	2203      	movs	r2, #3
 8000770:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_I2S2_Init+0x54>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_I2S2_Init+0x54>)
 800077c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000780:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2S2_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2S2_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2S2_Init+0x54>)
 8000790:	2201      	movs	r2, #1
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2S2_Init+0x54>)
 8000796:	f002 f883 	bl	80028a0 <HAL_I2S_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80007a0:	f000 fa8c 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000664 	.word	0x20000664
 80007ac:	40003800 	.word	0x40003800

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f8:	481d      	ldr	r0, [pc, #116]	; (8000870 <MX_TIM2_Init+0xc0>)
 80007fa:	f003 fe0d 	bl	8004418 <HAL_TIM_PWM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 fa5a 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4619      	mov	r1, r3
 8000816:	4816      	ldr	r0, [pc, #88]	; (8000870 <MX_TIM2_Init+0xc0>)
 8000818:	f004 f940 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000822:	f000 fa4b 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000826:	2360      	movs	r3, #96	; 0x60
 8000828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM2_Init+0xc0>)
 800083e:	f003 fe17 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000848:	f000 fa38 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	220c      	movs	r2, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <MX_TIM2_Init+0xc0>)
 8000854:	f003 fe0c 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800085e:	f000 fa2d 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_TIM2_Init+0xc0>)
 8000864:	f000 fc1c 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000560 	.word	0x20000560

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_TIM3_Init+0xec>)
 8000898:	4a32      	ldr	r2, [pc, #200]	; (8000964 <MX_TIM3_Init+0xf0>)
 800089a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <MX_TIM3_Init+0xec>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <MX_TIM3_Init+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_TIM3_Init+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <MX_TIM3_Init+0xec>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <MX_TIM3_Init+0xec>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ba:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_TIM3_Init+0xec>)
 80008bc:	f003 fdac 	bl	8004418 <HAL_TIM_PWM_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008c6:	f000 f9f9 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4619      	mov	r1, r3
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <MX_TIM3_Init+0xec>)
 80008da:	f004 f8df 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80008e4:	f000 f9ea 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4818      	ldr	r0, [pc, #96]	; (8000960 <MX_TIM3_Init+0xec>)
 8000900:	f003 fdb6 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800090a:	f000 f9d7 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2204      	movs	r2, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_TIM3_Init+0xec>)
 8000916:	f003 fdab 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000920:	f000 f9cc 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2208      	movs	r2, #8
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM3_Init+0xec>)
 800092c:	f003 fda0 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8000936:	f000 f9c1 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	220c      	movs	r2, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM3_Init+0xec>)
 8000942:	f003 fd95 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800094c:	f000 f9b6 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM3_Init+0xec>)
 8000952:	f000 fba5 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200004c8 	.word	0x200004c8
 8000964:	40000400 	.word	0x40000400

08000968 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_TIM4_Init+0xd4>)
 800098c:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <MX_TIM4_Init+0xd8>)
 800098e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000990:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_TIM4_Init+0xd4>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_TIM4_Init+0xd4>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_TIM4_Init+0xd4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_TIM4_Init+0xd4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_TIM4_Init+0xd4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009ae:	4823      	ldr	r0, [pc, #140]	; (8000a3c <MX_TIM4_Init+0xd4>)
 80009b0:	f003 fd32 	bl	8004418 <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 f97f 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4619      	mov	r1, r3
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <MX_TIM4_Init+0xd4>)
 80009ce:	f004 f865 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80009d8:	f000 f970 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_TIM4_Init+0xd4>)
 80009f4:	f003 fd3c 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009fe:	f000 f95d 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2204      	movs	r2, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM4_Init+0xd4>)
 8000a0a:	f003 fd31 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a14:	f000 f952 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM4_Init+0xd4>)
 8000a20:	f003 fd26 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8000a2a:	f000 f947 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM4_Init+0xd4>)
 8000a30:	f000 fb36 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000002c 	.word	0x2000002c
 8000a40:	40000800 	.word	0x40000800

08000a44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	f002 fe20 	bl	80036cc <HAL_PCD_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f913 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000c0 	.word	0x200000c0

08000aa0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_DMA_Init+0x3c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <MX_DMA_Init+0x3c>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_DMA_Init+0x3c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f001 f859 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000acc:	200e      	movs	r0, #14
 8000ace:	f001 f872 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a44      	ldr	r2, [pc, #272]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b42      	ldr	r3, [pc, #264]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a3d      	ldr	r2, [pc, #244]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a28      	ldr	r2, [pc, #160]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_GPIO_Init+0x130>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ba4:	481b      	ldr	r0, [pc, #108]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000ba6:	f001 fd29 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2107      	movs	r1, #7
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <MX_GPIO_Init+0x138>)
 8000bb0:	f001 fd24 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000bca:	f001 fb7d 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000be8:	f001 fb6e 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000bec:	2307      	movs	r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_GPIO_Init+0x138>)
 8000c04:	f001 fb60 	bl	80022c8 <HAL_GPIO_Init>

}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8000c2c:	8852      	ldrh	r2, [r2, #2]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	121b      	asrs	r3, r3, #8
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8000c34:	6013      	str	r3, [r2, #0]

  // do audio processing
  process(&in_sample, &out_sample);
 8000c36:	490b      	ldr	r1, [pc, #44]	; (8000c64 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8000c3a:	f7ff fc53 	bl	80004e4 <process>

  //place processed sample into tx_buf
  tx_buf[0] = (out_sample>>8) & 0xFFFF;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	121b      	asrs	r3, r3, #8
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000c48:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = out_sample & 0xFFFF;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000c52:	805a      	strh	r2, [r3, #2]


}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000550 	.word	0x20000550
 8000c60:	200005a0 	.word	0x200005a0
 8000c64:	20000028 	.word	0x20000028
 8000c68:	20000558 	.word	0x20000558

08000c6c <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8000c76:	889b      	ldrh	r3, [r3, #4]
 8000c78:	041b      	lsls	r3, r3, #16
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8000c7c:	88d2      	ldrh	r2, [r2, #6]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	121b      	asrs	r3, r3, #8
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 8000c84:	6013      	str	r3, [r2, #0]

  // does audio processing
  process(&in_sample, &out_sample);
 8000c86:	490b      	ldr	r1, [pc, #44]	; (8000cb4 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 8000c8a:	f7ff fc2b 	bl	80004e4 <process>

  //place processed sample into tx_buf
  tx_buf[2] = (out_sample>>8) & 0xFFFF;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	121b      	asrs	r3, r3, #8
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000c98:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = out_sample & 0xFFFF;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000ca2:	80da      	strh	r2, [r3, #6]

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000550 	.word	0x20000550
 8000cb0:	200005a0 	.word	0x200005a0
 8000cb4:	20000028 	.word	0x20000028
 8000cb8:	20000558 	.word	0x20000558

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_ADC_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d127      	bne.n	8000d8e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_ADC_MspInit+0x80>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <HAL_ADC_MspInit+0x80>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_ADC_MspInit+0x80>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_ADC_MspInit+0x80>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_ADC_MspInit+0x80>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_ADC_MspInit+0x80>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d76:	230e      	movs	r3, #14
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_ADC_MspInit+0x84>)
 8000d8a:	f001 fa9d 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_I2C_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	23c0      	movs	r3, #192	; 0xc0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df2:	2304      	movs	r3, #4
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <HAL_I2C_MspInit+0x8c>)
 8000dfe:	f001 fa63 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <HAL_I2S_MspInit+0x1b4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f040 80c4 	bne.w	8000fe0 <HAL_I2S_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b63      	ldr	r3, [pc, #396]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a62      	ldr	r2, [pc, #392]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b60      	ldr	r3, [pc, #384]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b5c      	ldr	r3, [pc, #368]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a5b      	ldr	r2, [pc, #364]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b59      	ldr	r3, [pc, #356]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b55      	ldr	r3, [pc, #340]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a54      	ldr	r2, [pc, #336]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <HAL_I2S_MspInit+0x1b8>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eac:	2304      	movs	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	484a      	ldr	r0, [pc, #296]	; (8000ff0 <HAL_I2S_MspInit+0x1bc>)
 8000ec8:	f001 f9fe 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ecc:	2348      	movs	r3, #72	; 0x48
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000edc:	2305      	movs	r3, #5
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4842      	ldr	r0, [pc, #264]	; (8000ff0 <HAL_I2S_MspInit+0x1bc>)
 8000ee8:	f001 f9ee 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000eec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efe:	2305      	movs	r3, #5
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	483a      	ldr	r0, [pc, #232]	; (8000ff4 <HAL_I2S_MspInit+0x1c0>)
 8000f0a:	f001 f9dd 	bl	80022c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000f0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f10:	4a3a      	ldr	r2, [pc, #232]	; (8000ffc <HAL_I2S_MspInit+0x1c8>)
 8000f12:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f16:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f1a:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f46:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000f54:	4828      	ldr	r0, [pc, #160]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f56:	f000 fe49 	bl	8001bec <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8000f60:	f7ff feac 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <HAL_I2S_MspInit+0x1c4>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f72:	4a24      	ldr	r2, [pc, #144]	; (8001004 <HAL_I2S_MspInit+0x1d0>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000fb6:	f000 fe19 	bl	8001bec <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 8000fc0:	f7ff fe7c 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_I2S_MspInit+0x1cc>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2024      	movs	r0, #36	; 0x24
 8000fd6:	f000 fdd2 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fda:	2024      	movs	r0, #36	; 0x24
 8000fdc:	f000 fdeb 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40003800 	.word	0x40003800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	200005a4 	.word	0x200005a4
 8000ffc:	40026058 	.word	0x40026058
 8001000:	20000604 	.word	0x20000604
 8001004:	40026070 	.word	0x40026070

08001008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d10e      	bne.n	8001038 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001036:	e026      	b.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a16      	ldr	r2, [pc, #88]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10e      	bne.n	8001060 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
}
 800105e:	e012      	b.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_TIM_PWM_MspInit+0x94>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800

080010a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c0:	d13d      	bne.n	800113e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b49      	ldr	r3, [pc, #292]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800110a:	2301      	movs	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4840      	ldr	r0, [pc, #256]	; (8001218 <HAL_TIM_MspPostInit+0x178>)
 8001116:	f001 f8d7 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800111a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4839      	ldr	r0, [pc, #228]	; (800121c <HAL_TIM_MspPostInit+0x17c>)
 8001138:	f001 f8c6 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800113c:	e065      	b.n	800120a <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a37      	ldr	r2, [pc, #220]	; (8001220 <HAL_TIM_MspPostInit+0x180>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d13c      	bne.n	80011c2 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a30      	ldr	r2, [pc, #192]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a29      	ldr	r2, [pc, #164]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001190:	2302      	movs	r3, #2
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	481f      	ldr	r0, [pc, #124]	; (8001218 <HAL_TIM_MspPostInit+0x178>)
 800119c:	f001 f894 	bl	80022c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <HAL_TIM_MspPostInit+0x17c>)
 80011bc:	f001 f884 	bl	80022c8 <HAL_GPIO_Init>
}
 80011c0:	e023      	b.n	800120a <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_TIM_MspPostInit+0x184>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d11e      	bne.n	800120a <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80011e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <HAL_TIM_MspPostInit+0x188>)
 8001206:	f001 f85f 	bl	80022c8 <HAL_GPIO_Init>
}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40000400 	.word	0x40000400
 8001224:	40000800 	.word	0x40000800
 8001228:	40020c00 	.word	0x40020c00

0800122c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124c:	d132      	bne.n	80012b4 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_PCD_MspInit+0x90>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_PCD_MspInit+0x90>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_PCD_MspInit+0x90>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800127c:	230a      	movs	r3, #10
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <HAL_PCD_MspInit+0x94>)
 8001288:	f001 f81e 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_PCD_MspInit+0x90>)
 800128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_PCD_MspInit+0x90>)
 8001292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001296:	6353      	str	r3, [r2, #52]	; 0x34
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_PCD_MspInit+0x90>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_PCD_MspInit+0x90>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a6:	6453      	str	r3, [r2, #68]	; 0x44
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_PCD_MspInit+0x90>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f8b2 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <DMA1_Stream3_IRQHandler+0x10>)
 8001326:	f000 fd67 	bl	8001df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200005a4 	.word	0x200005a4

08001334 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <DMA1_Stream4_IRQHandler+0x10>)
 800133a:	f000 fd5d 	bl	8001df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000604 	.word	0x20000604

08001348 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <SPI2_IRQHandler+0x10>)
 800134e:	f001 fbe7 	bl	8002b20 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000664 	.word	0x20000664

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <SystemInit+0x28>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <SystemInit+0x28>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SystemInit+0x28>)
 8001372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001376:	609a      	str	r2, [r3, #8]
#endif
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800138c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800138e:	e003      	b.n	8001398 <LoopCopyDataInit>

08001390 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001392:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001394:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001396:	3104      	adds	r1, #4

08001398 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800139c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800139e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013a0:	d3f6      	bcc.n	8001390 <CopyDataInit>
  ldr  r2, =_sbss
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013a4:	e002      	b.n	80013ac <LoopFillZerobss>

080013a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013a8:	f842 3b04 	str.w	r3, [r2], #4

080013ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013b0:	d3f9      	bcc.n	80013a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013b2:	f7ff ffd3 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f003 fea3 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff f8a3 	bl	8000504 <main>
  bx  lr    
 80013be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013c4:	080051a0 	.word	0x080051a0
  ldr  r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013cc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013d0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013d4:	200006b0 	.word	0x200006b0

080013d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_Init+0x40>)
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_Init+0x40>)
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x40>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 fbaf 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fc5c 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fbc7 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800145c:	f000 fb8f 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000008 	.word	0x20000008
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	200006ac 	.word	0x200006ac

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200006ac 	.word	0x200006ac

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ffee 	bl	80014a8 <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_Delay+0x40>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000008 	.word	0x20000008

08001504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e033      	b.n	8001582 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fbfa 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b00      	cmp	r3, #0
 8001540:	d118      	bne.n	8001574 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800154a:	f023 0302 	bic.w	r3, r3, #2
 800154e:	f043 0202 	orr.w	r2, r3, #2
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f93a 	bl	80017d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f023 0303 	bic.w	r3, r3, #3
 800156a:	f043 0201 	orr.w	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
 8001572:	e001      	b.n	8001578 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x1c>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e105      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x228>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	d925      	bls.n	8001604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68d9      	ldr	r1, [r3, #12]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	3b1e      	subs	r3, #30
 80015ce:	2207      	movs	r2, #7
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43da      	mvns	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	400a      	ands	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68d9      	ldr	r1, [r3, #12]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4403      	add	r3, r0
 80015f6:	3b1e      	subs	r3, #30
 80015f8:	409a      	lsls	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	e022      	b.n	800164a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	2207      	movs	r2, #7
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	400a      	ands	r2, r1
 8001626:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6919      	ldr	r1, [r3, #16]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	4603      	mov	r3, r0
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4403      	add	r3, r0
 8001640:	409a      	lsls	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d824      	bhi.n	800169c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	3b05      	subs	r3, #5
 8001664:	221f      	movs	r2, #31
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	400a      	ands	r2, r1
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b05      	subs	r3, #5
 800168e:	fa00 f203 	lsl.w	r2, r0, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
 800169a:	e04c      	b.n	8001736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b0c      	cmp	r3, #12
 80016a2:	d824      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b23      	subs	r3, #35	; 0x23
 80016b6:	221f      	movs	r2, #31
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43da      	mvns	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	400a      	ands	r2, r1
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b23      	subs	r3, #35	; 0x23
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
 80016ec:	e023      	b.n	8001736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b41      	subs	r3, #65	; 0x41
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b41      	subs	r3, #65	; 0x41
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_ADC_ConfigChannel+0x234>)
 8001738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <HAL_ADC_ConfigChannel+0x238>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d109      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x1cc>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b12      	cmp	r3, #18
 800174a:	d105      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_ADC_ConfigChannel+0x238>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d123      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x21e>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d003      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x1e6>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b11      	cmp	r3, #17
 8001770:	d11b      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d111      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_ADC_ConfigChannel+0x240>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9a      	lsrs	r2, r3, #18
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40012300 	.word	0x40012300
 80017c4:	40012000 	.word	0x40012000
 80017c8:	20000000 	.word	0x20000000
 80017cc:	431bde83 	.word	0x431bde83

080017d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d8:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <ADC_Init+0x1f0>)
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	021a      	lsls	r2, r3, #8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6899      	ldr	r1, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <ADC_Init+0x1f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d022      	beq.n	80018ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001876:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	e00f      	b.n	80018ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0202 	bic.w	r2, r2, #2
 80018dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e1b      	ldrb	r3, [r3, #24]
 80018e8:	005a      	lsls	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01b      	beq.n	8001934 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800191a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	3b01      	subs	r3, #1
 8001928:	035a      	lsls	r2, r3, #13
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e007      	b.n	8001944 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	3b01      	subs	r3, #1
 8001960:	051a      	lsls	r2, r3, #20
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001986:	025a      	lsls	r2, r3, #9
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6899      	ldr	r1, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	029a      	lsls	r2, r3, #10
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40012300 	.word	0x40012300
 80019c4:	0f000001 	.word	0x0f000001

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff fc56 	bl	80014a8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e099      	b.n	8001d3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c28:	e00f      	b.n	8001c4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2a:	f7ff fc3d 	bl	80014a8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d908      	bls.n	8001c4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e078      	b.n	8001d3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e8      	bne.n	8001c2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_DMA_Init+0x158>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d107      	bne.n	8001cb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4313      	orrs	r3, r2
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d117      	bne.n	8001d0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fa6f 	bl	80021d4 <DMA_CheckFifoParam>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e016      	b.n	8001d3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fa26 	bl	8002168 <DMA_CalcBaseAndBitshift>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	223f      	movs	r2, #63	; 0x3f
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	f010803f 	.word	0xf010803f

08001d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_DMA_Start_IT+0x26>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e040      	b.n	8001df0 <HAL_DMA_Start_IT+0xa8>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d12f      	bne.n	8001de2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f9b8 	bl	800210c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	223f      	movs	r2, #63	; 0x3f
 8001da2:	409a      	lsls	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0216 	orr.w	r2, r2, #22
 8001db6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0208 	orr.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e005      	b.n	8001dee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
 8001dec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e04:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_DMA_IRQHandler+0x258>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a92      	ldr	r2, [pc, #584]	; (8002054 <HAL_DMA_IRQHandler+0x25c>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2208      	movs	r2, #8
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01a      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2208      	movs	r2, #8
 8001e52:	409a      	lsls	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d043      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03c      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d018      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d024      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	e01f      	b.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e016      	b.n	8001f68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0208 	bic.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 808e 	beq.w	8002096 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8086 	beq.w	8002096 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2220      	movs	r2, #32
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d136      	bne.n	8002010 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0216 	bic.w	r2, r2, #22
 8001fb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <HAL_DMA_IRQHandler+0x1da>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0208 	bic.w	r2, r2, #8
 8001fe0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	223f      	movs	r2, #63	; 0x3f
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07d      	beq.n	8002102 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
        }
        return;
 800200e:	e078      	b.n	8002102 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	2b00      	cmp	r3, #0
 8002032:	d030      	beq.n	8002096 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e02b      	b.n	8002096 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d027      	beq.n	8002096 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
 800204e:	e022      	b.n	8002096 <HAL_DMA_IRQHandler+0x29e>
 8002050:	20000000 	.word	0x20000000
 8002054:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0210 	bic.w	r2, r2, #16
 8002074:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	2b00      	cmp	r3, #0
 800209c:	d032      	beq.n	8002104 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d022      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2205      	movs	r2, #5
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d307      	bcc.n	80020de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f2      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x2ca>
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e000      	b.n	8002104 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002102:	bf00      	nop
    }
  }
}
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop

0800210c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002128:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d108      	bne.n	800214c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800214a:	e007      	b.n	800215c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b10      	subs	r3, #16
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <DMA_CalcBaseAndBitshift+0x64>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d909      	bls.n	80021aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	1d1a      	adds	r2, r3, #4
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	659a      	str	r2, [r3, #88]	; 0x58
 80021a8:	e007      	b.n	80021ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	aaaaaaab 	.word	0xaaaaaaab
 80021d0:	08005188 	.word	0x08005188

080021d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11f      	bne.n	800222e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d855      	bhi.n	80022a0 <DMA_CheckFifoParam+0xcc>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <DMA_CheckFifoParam+0x28>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800221f 	.word	0x0800221f
 8002204:	0800220d 	.word	0x0800220d
 8002208:	080022a1 	.word	0x080022a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d045      	beq.n	80022a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e042      	b.n	80022a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002226:	d13f      	bne.n	80022a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222c:	e03c      	b.n	80022a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002236:	d121      	bne.n	800227c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d836      	bhi.n	80022ac <DMA_CheckFifoParam+0xd8>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <DMA_CheckFifoParam+0x70>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	0800225b 	.word	0x0800225b
 800224c:	08002255 	.word	0x08002255
 8002250:	0800226d 	.word	0x0800226d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      break;
 8002258:	e02f      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226a:	e021      	b.n	80022b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002274:	d11e      	bne.n	80022b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800227a:	e01b      	b.n	80022b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d902      	bls.n	8002288 <DMA_CheckFifoParam+0xb4>
 8002282:	2b03      	cmp	r3, #3
 8002284:	d003      	beq.n	800228e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002286:	e018      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      break;
 800228c:	e015      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      break;
 800229e:	e00b      	b.n	80022b8 <DMA_CheckFifoParam+0xe4>
      break;
 80022a0:	bf00      	nop
 80022a2:	e00a      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022a4:	bf00      	nop
 80022a6:	e008      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022a8:	bf00      	nop
 80022aa:	e006      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022ac:	bf00      	nop
 80022ae:	e004      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022b0:	bf00      	nop
 80022b2:	e002      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;   
 80022b4:	bf00      	nop
 80022b6:	e000      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022b8:	bf00      	nop
    }
  } 
  
  return status; 
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e16b      	b.n	80025bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 815a 	bne.w	80025b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d00b      	beq.n	8002322 <HAL_GPIO_Init+0x5a>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002316:	2b11      	cmp	r3, #17
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b12      	cmp	r3, #18
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0xfc>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80b4 	beq.w	80025b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_GPIO_Init+0x308>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a5e      	ldr	r2, [pc, #376]	; (80025d0 <HAL_GPIO_Init+0x308>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_GPIO_Init+0x308>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a5a      	ldr	r2, [pc, #360]	; (80025d4 <HAL_GPIO_Init+0x30c>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <HAL_GPIO_Init+0x310>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <HAL_GPIO_Init+0x226>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_Init+0x314>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x222>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x318>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x21e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_GPIO_Init+0x31c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x21a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x320>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x216>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x324>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x212>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x328>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x20e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x32c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x20a>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e00e      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024d2:	2308      	movs	r3, #8
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x228>
 80024ee:	2300      	movs	r3, #0
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002500:	4934      	ldr	r1, [pc, #208]	; (80025d4 <HAL_GPIO_Init+0x30c>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_GPIO_Init+0x330>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_GPIO_Init+0x330>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f ae90 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3724      	adds	r7, #36	; 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40021400 	.word	0x40021400
 80025f0:	40021800 	.word	0x40021800
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40013c00 	.word	0x40013c00

080025fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
 8002608:	4613      	mov	r3, r2
 800260a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002618:	e003      	b.n	8002622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	041a      	lsls	r2, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	619a      	str	r2, [r3, #24]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e11f      	b.n	8002882 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fba4 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002694:	f001 fd70 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8002698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a7b      	ldr	r2, [pc, #492]	; (800288c <HAL_I2C_Init+0x25c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d807      	bhi.n	80026b4 <HAL_I2C_Init+0x84>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_I2C_Init+0x260>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	bf94      	ite	ls
 80026ac:	2301      	movls	r3, #1
 80026ae:	2300      	movhi	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e006      	b.n	80026c2 <HAL_I2C_Init+0x92>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_I2C_Init+0x264>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0db      	b.n	8002882 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a72      	ldr	r2, [pc, #456]	; (8002898 <HAL_I2C_Init+0x268>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0c9b      	lsrs	r3, r3, #18
 80026d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a64      	ldr	r2, [pc, #400]	; (800288c <HAL_I2C_Init+0x25c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d802      	bhi.n	8002704 <HAL_I2C_Init+0xd4>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3301      	adds	r3, #1
 8002702:	e009      	b.n	8002718 <HAL_I2C_Init+0xe8>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_I2C_Init+0x26c>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	3301      	adds	r3, #1
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	430b      	orrs	r3, r1
 800271e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800272a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4956      	ldr	r1, [pc, #344]	; (800288c <HAL_I2C_Init+0x25c>)
 8002734:	428b      	cmp	r3, r1
 8002736:	d80d      	bhi.n	8002754 <HAL_I2C_Init+0x124>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e59      	subs	r1, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fbb1 f3f3 	udiv	r3, r1, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b04      	cmp	r3, #4
 800274e:	bf38      	it	cc
 8002750:	2304      	movcc	r3, #4
 8002752:	e04f      	b.n	80027f4 <HAL_I2C_Init+0x1c4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d111      	bne.n	8002780 <HAL_I2C_Init+0x150>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e58      	subs	r0, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e012      	b.n	80027a6 <HAL_I2C_Init+0x176>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1e58      	subs	r0, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	0099      	lsls	r1, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Init+0x17e>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e022      	b.n	80027f4 <HAL_I2C_Init+0x1c4>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10e      	bne.n	80027d4 <HAL_I2C_Init+0x1a4>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e58      	subs	r0, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	440b      	add	r3, r1
 80027c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d2:	e00f      	b.n	80027f4 <HAL_I2C_Init+0x1c4>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	0099      	lsls	r1, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	6809      	ldr	r1, [r1, #0]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6911      	ldr	r1, [r2, #16]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	4311      	orrs	r1, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	000186a0 	.word	0x000186a0
 8002890:	001e847f 	.word	0x001e847f
 8002894:	003d08ff 	.word	0x003d08ff
 8002898:	431bde83 	.word	0x431bde83
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e128      	b.n	8002b04 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a90      	ldr	r2, [pc, #576]	; (8002b0c <HAL_I2S_Init+0x26c>)
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fe fab1 	bl	8000e34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2202      	movs	r2, #2
 80028f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d060      	beq.n	80029c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002906:	2310      	movs	r3, #16
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e001      	b.n	8002910 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b20      	cmp	r3, #32
 8002916:	d802      	bhi.n	800291e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800291e:	2001      	movs	r0, #1
 8002920:	f001 fd20 	bl	8004364 <HAL_RCCEx_GetPeriphCLKFreq>
 8002924:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292e:	d125      	bne.n	800297c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	3305      	adds	r3, #5
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e01f      	b.n	800299a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	fbb2 f2f3 	udiv	r2, r2, r3
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	3305      	adds	r3, #5
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	e00e      	b.n	800299a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fbb2 f2f3 	udiv	r2, r2, r3
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	3305      	adds	r3, #5
 8002998:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4a5c      	ldr	r2, [pc, #368]	; (8002b10 <HAL_I2S_Init+0x270>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e003      	b.n	80029c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d902      	bls.n	80029d4 <HAL_I2S_Init+0x134>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2bff      	cmp	r3, #255	; 0xff
 80029d2:	d907      	bls.n	80029e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e08f      	b.n	8002b04 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	ea42 0103 	orr.w	r1, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a02:	f023 030f 	bic.w	r3, r3, #15
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6851      	ldr	r1, [r2, #4]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6892      	ldr	r2, [r2, #8]
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68d2      	ldr	r2, [r2, #12]
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6992      	ldr	r2, [r2, #24]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a26:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d161      	bne.n	8002af4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <HAL_I2S_Init+0x274>)
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <HAL_I2S_Init+0x278>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2S_Init+0x1a4>
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_I2S_Init+0x27c>)
 8002a42:	e001      	b.n	8002a48 <HAL_I2S_Init+0x1a8>
 8002a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	4932      	ldr	r1, [pc, #200]	; (8002b18 <HAL_I2S_Init+0x278>)
 8002a50:	428a      	cmp	r2, r1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2S_Init+0x1b8>
 8002a54:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <HAL_I2S_Init+0x27c>)
 8002a56:	e001      	b.n	8002a5c <HAL_I2S_Init+0x1bc>
 8002a58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a60:	f023 030f 	bic.w	r3, r3, #15
 8002a64:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <HAL_I2S_Init+0x278>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_I2S_Init+0x1d4>
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_I2S_Init+0x27c>)
 8002a72:	e001      	b.n	8002a78 <HAL_I2S_Init+0x1d8>
 8002a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a78:	2202      	movs	r2, #2
 8002a7a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <HAL_I2S_Init+0x278>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_I2S_Init+0x1ea>
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_I2S_Init+0x27c>)
 8002a88:	e001      	b.n	8002a8e <HAL_I2S_Init+0x1ee>
 8002a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9a:	d003      	beq.n	8002aa4 <HAL_I2S_Init+0x204>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e001      	b.n	8002ab0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002ac6:	4303      	orrs	r3, r0
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	430b      	orrs	r3, r1
 8002acc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002adc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <HAL_I2S_Init+0x278>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_I2S_Init+0x24c>
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_I2S_Init+0x27c>)
 8002aea:	e001      	b.n	8002af0 <HAL_I2S_Init+0x250>
 8002aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af0:	897a      	ldrh	r2, [r7, #10]
 8002af2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08002c2f 	.word	0x08002c2f
 8002b10:	cccccccd 	.word	0xcccccccd
 8002b14:	08003059 	.word	0x08003059
 8002b18:	40003800 	.word	0x40003800
 8002b1c:	40003400 	.word	0x40003400

08002b20 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	881a      	ldrh	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c9a      	adds	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10e      	bne.n	8002bc8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bb8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffb8 	bl	8002b38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	b292      	uxth	r2, r2
 8002be4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	1c9a      	adds	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10e      	bne.n	8002c26 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c16:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff93 	bl	8002b4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d13a      	bne.n	8002cc0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d109      	bne.n	8002c68 <I2S_IRQHandler+0x3a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d102      	bne.n	8002c68 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffb4 	bl	8002bd0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d126      	bne.n	8002cc0 <I2S_IRQHandler+0x92>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d11f      	bne.n	8002cc0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff50 	bl	8002b60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d136      	bne.n	8002d3a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d109      	bne.n	8002cea <I2S_IRQHandler+0xbc>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d102      	bne.n	8002cea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff45 	bl	8002b74 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d122      	bne.n	8002d3a <I2S_IRQHandler+0x10c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d11b      	bne.n	8002d3a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d10:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ff13 	bl	8002b60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d002      	beq.n	8002d70 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6e:	e160      	b.n	8003032 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d7c:	887b      	ldrh	r3, [r7, #2]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e15a      	b.n	800303c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e152      	b.n	800303c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d002      	beq.n	8002dc2 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d114      	bne.n	8002dec <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	865a      	strh	r2, [r3, #50]	; 0x32
 8002dea:	e00b      	b.n	8002e04 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	4a8b      	ldr	r2, [pc, #556]	; (8003044 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	4a8a      	ldr	r2, [pc, #552]	; (8003048 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	4a89      	ldr	r2, [pc, #548]	; (800304c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002e28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4a85      	ldr	r2, [pc, #532]	; (8003044 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	4a84      	ldr	r2, [pc, #528]	; (8003048 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	4a83      	ldr	r2, [pc, #524]	; (800304c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002e40:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d002      	beq.n	8002e5c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d16b      	bne.n	8002f34 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a79      	ldr	r2, [pc, #484]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002e6e:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e70:	e001      	b.n	8002e76 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e76:	330c      	adds	r3, #12
 8002e78:	4619      	mov	r1, r3
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f7fe ff60 	bl	8001d48 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a70      	ldr	r2, [pc, #448]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002e92:	4b70      	ldr	r3, [pc, #448]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e94:	e001      	b.n	8002e9a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	496b      	ldr	r1, [pc, #428]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002ea6:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ea8:	e001      	b.n	8002eae <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002eb4:	f107 0308 	add.w	r3, r7, #8
 8002eb8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f7fe ff3a 	bl	8001d48 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0202 	orr.w	r2, r2, #2
 8002ee2:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	f000 809e 	beq.w	8003032 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002f00:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f02:	e001      	b.n	8002f08 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4950      	ldr	r1, [pc, #320]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d101      	bne.n	8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002f14:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f16:	e001      	b.n	8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f20:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f30:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002f32:	e07e      	b.n	8003032 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f42:	d10a      	bne.n	8002f5a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a38      	ldr	r2, [pc, #224]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f74:	e001      	b.n	8002f7a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f7fe fee0 	bl	8001d48 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a30      	ldr	r2, [pc, #192]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002f92:	4b30      	ldr	r3, [pc, #192]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f94:	e001      	b.n	8002f9a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	492b      	ldr	r1, [pc, #172]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fa8:	e001      	b.n	8002fae <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fae:	f042 0202 	orr.w	r2, r2, #2
 8002fb2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f7fe febb 	bl	8001d48 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d01e      	beq.n	8003030 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ffe:	e001      	b.n	8003004 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4911      	ldr	r1, [pc, #68]	; (8003050 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d101      	bne.n	8003014 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003012:	e001      	b.n	8003018 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800301c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800302c:	61da      	str	r2, [r3, #28]
 800302e:	e000      	b.n	8003032 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003030:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800303a:	7ffb      	ldrb	r3, [r7, #31]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	08003301 	.word	0x08003301
 8003048:	0800331d 	.word	0x0800331d
 800304c:	08003455 	.word	0x08003455
 8003050:	40003800 	.word	0x40003800
 8003054:	40003400 	.word	0x40003400

08003058 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4aa2      	ldr	r2, [pc, #648]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003072:	4ba2      	ldr	r3, [pc, #648]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003074:	e001      	b.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a9b      	ldr	r2, [pc, #620]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003090:	4b9a      	ldr	r3, [pc, #616]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003092:	e001      	b.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d004      	beq.n	80030b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 8099 	bne.w	80031e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d107      	bne.n	80030ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa05 	bl	80034d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 faa8 	bl	8003634 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d13a      	bne.n	8003164 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d035      	beq.n	8003164 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7e      	ldr	r2, [pc, #504]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003102:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003104:	e001      	b.n	800310a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4979      	ldr	r1, [pc, #484]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003112:	428b      	cmp	r3, r1
 8003114:	d101      	bne.n	800311a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003116:	4b79      	ldr	r3, [pc, #484]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003118:	e001      	b.n	800311e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800311a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003122:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003132:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fcfe 	bl	8002b60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b08      	cmp	r3, #8
 800316c:	f040 80be 	bne.w	80032ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80b8 	beq.w	80032ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800318a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a59      	ldr	r2, [pc, #356]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003196:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003198:	e001      	b.n	800319e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800319a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4954      	ldr	r1, [pc, #336]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031a6:	428b      	cmp	r3, r1
 80031a8:	d101      	bne.n	80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80031aa:	4b54      	ldr	r3, [pc, #336]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ac:	e001      	b.n	80031b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80031ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fcc0 	bl	8002b60 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031e0:	e084      	b.n	80032ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d107      	bne.n	80031fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f99e 	bl	8003538 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f9dd 	bl	80035d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d12f      	bne.n	8003280 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d02a      	beq.n	8003280 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003238:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003246:	e001      	b.n	800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4929      	ldr	r1, [pc, #164]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003254:	428b      	cmp	r3, r1
 8003256:	d101      	bne.n	800325c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800325a:	e001      	b.n	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800325c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003260:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003264:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fc70 	bl	8002b60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d131      	bne.n	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02c      	beq.n	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032a0:	e001      	b.n	80032a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80032a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4912      	ldr	r1, [pc, #72]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032ae:	428b      	cmp	r3, r1
 80032b0:	d101      	bne.n	80032b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032b4:	e001      	b.n	80032ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80032b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fc3b 	bl	8002b60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032ea:	e000      	b.n	80032ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032ec:	bf00      	nop
}
 80032ee:	bf00      	nop
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40003800 	.word	0x40003800
 80032fc:	40003400 	.word	0x40003400

08003300 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f7fd fc84 	bl	8000c1c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8084 	bne.w	800343c <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d13c      	bne.n	80033b8 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d006      	beq.n	800335c <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3a      	ldr	r2, [pc, #232]	; (800344c <I2SEx_TxRxDMACplt+0x130>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <I2SEx_TxRxDMACplt+0x4e>
 8003366:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <I2SEx_TxRxDMACplt+0x134>)
 8003368:	e001      	b.n	800336e <I2SEx_TxRxDMACplt+0x52>
 800336a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4935      	ldr	r1, [pc, #212]	; (800344c <I2SEx_TxRxDMACplt+0x130>)
 8003376:	428b      	cmp	r3, r1
 8003378:	d101      	bne.n	800337e <I2SEx_TxRxDMACplt+0x62>
 800337a:	4b35      	ldr	r3, [pc, #212]	; (8003450 <I2SEx_TxRxDMACplt+0x134>)
 800337c:	e001      	b.n	8003382 <I2SEx_TxRxDMACplt+0x66>
 800337e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	e007      	b.n	800339a <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7fd fc5a 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d13c      	bne.n	800343c <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d006      	beq.n	80033e0 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0202 	bic.w	r2, r2, #2
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	e015      	b.n	800341e <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <I2SEx_TxRxDMACplt+0x130>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <I2SEx_TxRxDMACplt+0xe4>
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <I2SEx_TxRxDMACplt+0x134>)
 80033fe:	e001      	b.n	8003404 <I2SEx_TxRxDMACplt+0xe8>
 8003400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4910      	ldr	r1, [pc, #64]	; (800344c <I2SEx_TxRxDMACplt+0x130>)
 800340c:	428b      	cmp	r3, r1
 800340e:	d101      	bne.n	8003414 <I2SEx_TxRxDMACplt+0xf8>
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <I2SEx_TxRxDMACplt+0x134>)
 8003412:	e001      	b.n	8003418 <I2SEx_TxRxDMACplt+0xfc>
 8003414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003418:	f022 0202 	bic.w	r2, r2, #2
 800341c:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7fd fc18 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7fd fc15 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40003800 	.word	0x40003800
 8003450:	40003400 	.word	0x40003400

08003454 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0203 	bic.w	r2, r2, #3
 8003470:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a15      	ldr	r2, [pc, #84]	; (80034cc <I2SEx_TxRxDMAError+0x78>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <I2SEx_TxRxDMAError+0x2c>
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <I2SEx_TxRxDMAError+0x7c>)
 800347e:	e001      	b.n	8003484 <I2SEx_TxRxDMAError+0x30>
 8003480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4910      	ldr	r1, [pc, #64]	; (80034cc <I2SEx_TxRxDMAError+0x78>)
 800348c:	428b      	cmp	r3, r1
 800348e:	d101      	bne.n	8003494 <I2SEx_TxRxDMAError+0x40>
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <I2SEx_TxRxDMAError+0x7c>)
 8003492:	e001      	b.n	8003498 <I2SEx_TxRxDMAError+0x44>
 8003494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003498:	f022 0203 	bic.w	r2, r2, #3
 800349c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fb4e 	bl	8002b60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40003800 	.word	0x40003800
 80034d0:	40003400 	.word	0x40003400

080034d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c99      	adds	r1, r3, #2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6251      	str	r1, [r2, #36]	; 0x24
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003514:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fb9f 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c99      	adds	r1, r3, #2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6251      	str	r1, [r2, #36]	; 0x24
 800354a:	8819      	ldrh	r1, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <I2SEx_TxISR_I2SExt+0x22>
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <I2SEx_TxISR_I2SExt+0x94>)
 8003558:	e001      	b.n	800355e <I2SEx_TxISR_I2SExt+0x26>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	460a      	mov	r2, r1
 8003560:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d121      	bne.n	80035be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d101      	bne.n	8003588 <I2SEx_TxISR_I2SExt+0x50>
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <I2SEx_TxISR_I2SExt+0x94>)
 8003586:	e001      	b.n	800358c <I2SEx_TxISR_I2SExt+0x54>
 8003588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	490d      	ldr	r1, [pc, #52]	; (80035c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003594:	428b      	cmp	r3, r1
 8003596:	d101      	bne.n	800359c <I2SEx_TxISR_I2SExt+0x64>
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <I2SEx_TxISR_I2SExt+0x94>)
 800359a:	e001      	b.n	80035a0 <I2SEx_TxISR_I2SExt+0x68>
 800359c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7fd fb57 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40003800 	.word	0x40003800
 80035cc:	40003400 	.word	0x40003400

080035d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68d8      	ldr	r0, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	1c99      	adds	r1, r3, #2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80035e8:	b282      	uxth	r2, r0
 80035ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d113      	bne.n	800362c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003612:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fb20 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <I2SEx_RxISR_I2SExt+0x16>
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003648:	e001      	b.n	800364e <I2SEx_RxISR_I2SExt+0x1a>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	68d8      	ldr	r0, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	1c99      	adds	r1, r3, #2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	62d1      	str	r1, [r2, #44]	; 0x2c
 800365a:	b282      	uxth	r2, r0
 800365c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d121      	bne.n	80036ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <I2SEx_RxISR_I2SExt+0x90>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <I2SEx_RxISR_I2SExt+0x50>
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003682:	e001      	b.n	8003688 <I2SEx_RxISR_I2SExt+0x54>
 8003684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	490d      	ldr	r1, [pc, #52]	; (80036c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003690:	428b      	cmp	r3, r1
 8003692:	d101      	bne.n	8003698 <I2SEx_RxISR_I2SExt+0x64>
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003696:	e001      	b.n	800369c <I2SEx_RxISR_I2SExt+0x68>
 8003698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd fad9 	bl	8000c6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40003800 	.word	0x40003800
 80036c8:	40003400 	.word	0x40003400

080036cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	b08f      	sub	sp, #60	; 0x3c
 80036d0:	af0a      	add	r7, sp, #40	; 0x28
 80036d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e10f      	b.n	80038fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fd fd97 	bl	800122c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2203      	movs	r2, #3
 8003702:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fa9a 	bl	8004c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	687e      	ldr	r6, [r7, #4]
 800372a:	466d      	mov	r5, sp
 800372c:	f106 0410 	add.w	r4, r6, #16
 8003730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800373c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003740:	1d33      	adds	r3, r6, #4
 8003742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003744:	6838      	ldr	r0, [r7, #0]
 8003746:	f001 fa25 	bl	8004b94 <USB_CoreInit>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0d0      	b.n	80038fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fa88 	bl	8004c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e04a      	b.n	8003804 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	333d      	adds	r3, #61	; 0x3d
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	333c      	adds	r3, #60	; 0x3c
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	b298      	uxth	r0, r3
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3342      	adds	r3, #66	; 0x42
 80037aa:	4602      	mov	r2, r0
 80037ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	333f      	adds	r3, #63	; 0x3f
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3344      	adds	r3, #68	; 0x44
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3348      	adds	r3, #72	; 0x48
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3350      	adds	r3, #80	; 0x50
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	3301      	adds	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3af      	bcc.n	800376e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e044      	b.n	800389e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	3301      	adds	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d3b5      	bcc.n	8003814 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	687e      	ldr	r6, [r7, #4]
 80038b0:	466d      	mov	r5, sp
 80038b2:	f106 0410 	add.w	r4, r6, #16
 80038b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80038c6:	1d33      	adds	r3, r6, #4
 80038c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ca:	6838      	ldr	r0, [r7, #0]
 80038cc:	f001 f9fe 	bl	8004ccc <USB_DevInit>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e00d      	b.n	80038fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fbad 	bl	8005056 <USB_DevDisconnect>

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e25b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	4ba3      	ldr	r3, [pc, #652]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003932:	4ba0      	ldr	r3, [pc, #640]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d112      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b9d      	ldr	r3, [pc, #628]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b99      	ldr	r3, [pc, #612]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e236      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a90      	ldr	r2, [pc, #576]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b8b      	ldr	r3, [pc, #556]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a8a      	ldr	r2, [pc, #552]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a87      	ldr	r2, [pc, #540]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b84      	ldr	r3, [pc, #528]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a83      	ldr	r2, [pc, #524]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b81      	ldr	r3, [pc, #516]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd fd72 	bl	80014a8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd fd6e 	bl	80014a8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1fb      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd fd5e 	bl	80014a8 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fd5a 	bl	80014a8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1e7      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d063      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b62      	ldr	r3, [pc, #392]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1bb      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4952      	ldr	r1, [pc, #328]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <HAL_RCC_OscConfig+0x2b0>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fd13 	bl	80014a8 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fd fd0f 	bl	80014a8 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e19c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b46      	ldr	r3, [pc, #280]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4940      	ldr	r1, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_OscConfig+0x2b0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fcf2 	bl	80014a8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fcee 	bl	80014a8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e17b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d030      	beq.n	8003b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <HAL_RCC_OscConfig+0x2b4>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fcd2 	bl	80014a8 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fd fcce 	bl	80014a8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e15b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
 8003b26:	e015      	b.n	8003b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x2b4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fcbb 	bl	80014a8 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd fcb7 	bl	80014a8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e144      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a0 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x2b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d121      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7fd fc7d 	bl	80014a8 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	e011      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2ce>
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470000 	.word	0x42470000
 8003bbc:	42470e80 	.word	0x42470e80
 8003bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc4:	f7fd fc70 	bl	80014a8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e0fd      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x4d4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
 8003bea:	4b7d      	ldr	r3, [pc, #500]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a7c      	ldr	r2, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	e01c      	b.n	8003c32 <HAL_RCC_OscConfig+0x32a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x312>
 8003c00:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a76      	ldr	r2, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b74      	ldr	r3, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a73      	ldr	r2, [pc, #460]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	e00b      	b.n	8003c32 <HAL_RCC_OscConfig+0x32a>
 8003c1a:	4b71      	ldr	r3, [pc, #452]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a70      	ldr	r2, [pc, #448]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b6e      	ldr	r3, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a6d      	ldr	r2, [pc, #436]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d015      	beq.n	8003c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fd fc35 	bl	80014a8 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fd fc31 	bl	80014a8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0bc      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ee      	beq.n	8003c42 <HAL_RCC_OscConfig+0x33a>
 8003c64:	e014      	b.n	8003c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c66:	f7fd fc1f 	bl	80014a8 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fd fc1b 	bl	80014a8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0a6      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c84:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c96:	4b52      	ldr	r3, [pc, #328]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	4a51      	ldr	r2, [pc, #324]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8092 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cac:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d05c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d141      	bne.n	8003d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fd fbef 	bl	80014a8 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fd fbeb 	bl	80014a8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e078      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	019b      	lsls	r3, r3, #6
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	4933      	ldr	r1, [pc, #204]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d16:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <HAL_RCC_OscConfig+0x4dc>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd fbc4 	bl	80014a8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fd fbc0 	bl	80014a8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x41c>
 8003d42:	e045      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x4dc>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fbad 	bl	80014a8 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fd fba9 	bl	80014a8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e036      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x44a>
 8003d70:	e02e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e029      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7e:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <HAL_RCC_OscConfig+0x4d8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d115      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da6:	4013      	ands	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470060 	.word	0x42470060

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0cc      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d90c      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b8      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e54:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a52      	ldr	r2, [pc, #328]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d044      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d119      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e067      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fae6 	bl	80014a8 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fd fae2 	bl	80014a8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20c      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e032      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6e:	f000 f821 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f72:	4601      	mov	r1, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	fa21 f303 	lsr.w	r3, r1, r3
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fa46 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08005170 	.word	0x08005170
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d007      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x32>
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d008      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x38>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 80b4 	bne.w	8004148 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fe2:	60bb      	str	r3, [r7, #8]
       break;
 8003fe4:	e0b3      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe6:	4b5d      	ldr	r3, [pc, #372]	; (800415c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fe8:	60bb      	str	r3, [r7, #8]
      break;
 8003fea:	e0b0      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fec:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff6:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d04a      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b55      	ldr	r3, [pc, #340]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	f04f 0400 	mov.w	r4, #0
 800400c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	ea03 0501 	and.w	r5, r3, r1
 8004018:	ea04 0602 	and.w	r6, r4, r2
 800401c:	4629      	mov	r1, r5
 800401e:	4632      	mov	r2, r6
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	f04f 0400 	mov.w	r4, #0
 8004028:	0154      	lsls	r4, r2, #5
 800402a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800402e:	014b      	lsls	r3, r1, #5
 8004030:	4619      	mov	r1, r3
 8004032:	4622      	mov	r2, r4
 8004034:	1b49      	subs	r1, r1, r5
 8004036:	eb62 0206 	sbc.w	r2, r2, r6
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	f04f 0400 	mov.w	r4, #0
 8004042:	0194      	lsls	r4, r2, #6
 8004044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004048:	018b      	lsls	r3, r1, #6
 800404a:	1a5b      	subs	r3, r3, r1
 800404c:	eb64 0402 	sbc.w	r4, r4, r2
 8004050:	f04f 0100 	mov.w	r1, #0
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	00e2      	lsls	r2, r4, #3
 800405a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800405e:	00d9      	lsls	r1, r3, #3
 8004060:	460b      	mov	r3, r1
 8004062:	4614      	mov	r4, r2
 8004064:	195b      	adds	r3, r3, r5
 8004066:	eb44 0406 	adc.w	r4, r4, r6
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	02a2      	lsls	r2, r4, #10
 8004074:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004078:	0299      	lsls	r1, r3, #10
 800407a:	460b      	mov	r3, r1
 800407c:	4614      	mov	r4, r2
 800407e:	4618      	mov	r0, r3
 8004080:	4621      	mov	r1, r4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	461a      	mov	r2, r3
 800408a:	4623      	mov	r3, r4
 800408c:	f7fc f89c 	bl	80001c8 <__aeabi_uldivmod>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e049      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004098:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	f04f 0400 	mov.w	r4, #0
 80040a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	ea03 0501 	and.w	r5, r3, r1
 80040ae:	ea04 0602 	and.w	r6, r4, r2
 80040b2:	4629      	mov	r1, r5
 80040b4:	4632      	mov	r2, r6
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f04f 0400 	mov.w	r4, #0
 80040be:	0154      	lsls	r4, r2, #5
 80040c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040c4:	014b      	lsls	r3, r1, #5
 80040c6:	4619      	mov	r1, r3
 80040c8:	4622      	mov	r2, r4
 80040ca:	1b49      	subs	r1, r1, r5
 80040cc:	eb62 0206 	sbc.w	r2, r2, r6
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f04f 0400 	mov.w	r4, #0
 80040d8:	0194      	lsls	r4, r2, #6
 80040da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040de:	018b      	lsls	r3, r1, #6
 80040e0:	1a5b      	subs	r3, r3, r1
 80040e2:	eb64 0402 	sbc.w	r4, r4, r2
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	00e2      	lsls	r2, r4, #3
 80040f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040f4:	00d9      	lsls	r1, r3, #3
 80040f6:	460b      	mov	r3, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	195b      	adds	r3, r3, r5
 80040fc:	eb44 0406 	adc.w	r4, r4, r6
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	02a2      	lsls	r2, r4, #10
 800410a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800410e:	0299      	lsls	r1, r3, #10
 8004110:	460b      	mov	r3, r1
 8004112:	4614      	mov	r4, r2
 8004114:	4618      	mov	r0, r3
 8004116:	4621      	mov	r1, r4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	461a      	mov	r2, r3
 8004120:	4623      	mov	r3, r4
 8004122:	f7fc f851 	bl	80001c8 <__aeabi_uldivmod>
 8004126:	4603      	mov	r3, r0
 8004128:	460c      	mov	r4, r1
 800412a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	60bb      	str	r3, [r7, #8]
      break;
 8004146:	e002      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800414a:	60bb      	str	r3, [r7, #8]
      break;
 800414c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800414e:	68bb      	ldr	r3, [r7, #8]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	00f42400 	.word	0x00f42400

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_RCC_GetHCLKFreq+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000000 	.word	0x20000000

08004178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800417c:	f7ff fff0 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8004180:	4601      	mov	r1, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4a03      	ldr	r2, [pc, #12]	; (800419c <HAL_RCC_GetPCLK1Freq+0x24>)
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	08005180 	.word	0x08005180

080041a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d035      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041c8:	4b62      	ldr	r3, [pc, #392]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ce:	f7fd f96b 	bl	80014a8 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041d6:	f7fd f967 	bl	80014a8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0b0      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e8:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	019a      	lsls	r2, r3, #6
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	071b      	lsls	r3, r3, #28
 8004200:	4955      	ldr	r1, [pc, #340]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004208:	4b52      	ldr	r3, [pc, #328]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420e:	f7fd f94b 	bl	80014a8 <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004216:	f7fd f947 	bl	80014a8 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e090      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004228:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8083 	beq.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a43      	ldr	r2, [pc, #268]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800425e:	4b3f      	ldr	r3, [pc, #252]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a3e      	ldr	r2, [pc, #248]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004268:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426a:	f7fd f91d 	bl	80014a8 <HAL_GetTick>
 800426e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fd f919 	bl	80014a8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e062      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004298:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02f      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d028      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042b8:	4b29      	ldr	r3, [pc, #164]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042be:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d114      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fd f8e7 	bl	80014a8 <HAL_GetTick>
 80042da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd f8e3 	bl	80014a8 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e02a      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800430c:	d10d      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	490d      	ldr	r1, [pc, #52]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]
 8004328:	e005      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004334:	6093      	str	r3, [r2, #8]
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	4905      	ldr	r1, [pc, #20]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004344:	4313      	orrs	r3, r2
 8004346:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	42470068 	.word	0x42470068
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	42470e40 	.word	0x42470e40

08004364 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d13d      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004392:	2b01      	cmp	r3, #1
 8004394:	d12f      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004398:	617b      	str	r3, [r7, #20]
          break;
 800439a:	e02f      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a8:	d108      	bne.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b2:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	e007      	b.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	0f1b      	lsrs	r3, r3, #28
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	617b      	str	r3, [r7, #20]
          break;
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
          break;
 80043fa:	bf00      	nop
        }
      }
      break;
 80043fc:	bf00      	nop
    }
  }
  return frequency;
 80043fe:	697b      	ldr	r3, [r7, #20]
}
 8004400:	4618      	mov	r0, r3
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40023800 	.word	0x40023800
 8004410:	00bb8000 	.word	0x00bb8000
 8004414:	00f42400 	.word	0x00f42400

08004418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e01d      	b.n	8004466 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc fde2 	bl	8001008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 f8d0 	bl	80045fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004486:	2302      	movs	r3, #2
 8004488:	e0b4      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	f200 809f 	bhi.w	80045e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044dd 	.word	0x080044dd
 80044ac:	080045e1 	.word	0x080045e1
 80044b0:	080045e1 	.word	0x080045e1
 80044b4:	080045e1 	.word	0x080045e1
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	080045e1 	.word	0x080045e1
 80044c0:	080045e1 	.word	0x080045e1
 80044c4:	080045e1 	.word	0x080045e1
 80044c8:	0800455f 	.word	0x0800455f
 80044cc:	080045e1 	.word	0x080045e1
 80044d0:	080045e1 	.word	0x080045e1
 80044d4:	080045e1 	.word	0x080045e1
 80044d8:	0800459f 	.word	0x0800459f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f92a 	bl	800473c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
      break;
 800451a:	e062      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f97a 	bl	800481c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
      break;
 800455c:	e041      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f9cf 	bl	8004908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0208 	orr.w	r2, r2, #8
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0204 	bic.w	r2, r2, #4
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
      break;
 800459c:	e021      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fa23 	bl	80049f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	61da      	str	r2, [r3, #28]
      break;
 80045de:	e000      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80045e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a40      	ldr	r2, [pc, #256]	; (8004710 <TIM_Base_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461a:	d00f      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <TIM_Base_SetConfig+0x118>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3c      	ldr	r2, [pc, #240]	; (8004718 <TIM_Base_SetConfig+0x11c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3b      	ldr	r2, [pc, #236]	; (800471c <TIM_Base_SetConfig+0x120>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3a      	ldr	r2, [pc, #232]	; (8004720 <TIM_Base_SetConfig+0x124>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <TIM_Base_SetConfig+0x114>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02b      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d027      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <TIM_Base_SetConfig+0x118>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d023      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2b      	ldr	r2, [pc, #172]	; (8004718 <TIM_Base_SetConfig+0x11c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01f      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2a      	ldr	r2, [pc, #168]	; (800471c <TIM_Base_SetConfig+0x120>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01b      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a29      	ldr	r2, [pc, #164]	; (8004720 <TIM_Base_SetConfig+0x124>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d017      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a28      	ldr	r2, [pc, #160]	; (8004724 <TIM_Base_SetConfig+0x128>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a27      	ldr	r2, [pc, #156]	; (8004728 <TIM_Base_SetConfig+0x12c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00f      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a26      	ldr	r2, [pc, #152]	; (800472c <TIM_Base_SetConfig+0x130>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a25      	ldr	r2, [pc, #148]	; (8004730 <TIM_Base_SetConfig+0x134>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a24      	ldr	r2, [pc, #144]	; (8004734 <TIM_Base_SetConfig+0x138>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a23      	ldr	r2, [pc, #140]	; (8004738 <TIM_Base_SetConfig+0x13c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d108      	bne.n	80046c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <TIM_Base_SetConfig+0x114>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_Base_SetConfig+0xf8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0c      	ldr	r2, [pc, #48]	; (8004720 <TIM_Base_SetConfig+0x124>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d103      	bne.n	80046fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	615a      	str	r2, [r3, #20]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40010000 	.word	0x40010000
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40010400 	.word	0x40010400
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800
 8004730:	40001800 	.word	0x40001800
 8004734:	40001c00 	.word	0x40001c00
 8004738:	40002000 	.word	0x40002000

0800473c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 0302 	bic.w	r3, r3, #2
 8004784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <TIM_OC1_SetConfig+0xd8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_OC1_SetConfig+0x64>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <TIM_OC1_SetConfig+0xdc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d10c      	bne.n	80047ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 0308 	bic.w	r3, r3, #8
 80047a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a15      	ldr	r2, [pc, #84]	; (8004814 <TIM_OC1_SetConfig+0xd8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC1_SetConfig+0x8e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <TIM_OC1_SetConfig+0xdc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d111      	bne.n	80047ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40010000 	.word	0x40010000
 8004818:	40010400 	.word	0x40010400

0800481c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f023 0210 	bic.w	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0320 	bic.w	r3, r3, #32
 8004866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <TIM_OC2_SetConfig+0xe4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_OC2_SetConfig+0x68>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <TIM_OC2_SetConfig+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10d      	bne.n	80048a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800488a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <TIM_OC2_SetConfig+0xe4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_OC2_SetConfig+0x94>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <TIM_OC2_SetConfig+0xe8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d113      	bne.n	80048d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40010400 	.word	0x40010400

08004908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <TIM_OC3_SetConfig+0xe0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_OC3_SetConfig+0x66>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <TIM_OC3_SetConfig+0xe4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10d      	bne.n	800498a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <TIM_OC3_SetConfig+0xe0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC3_SetConfig+0x92>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <TIM_OC3_SetConfig+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d113      	bne.n	80049c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	031b      	lsls	r3, r3, #12
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <TIM_OC4_SetConfig+0xa4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC4_SetConfig+0x68>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a11      	ldr	r2, [pc, #68]	; (8004a98 <TIM_OC4_SetConfig+0xa8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d109      	bne.n	8004a6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e05a      	b.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d01d      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10c      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40010400 	.word	0x40010400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40001800 	.word	0x40001800

08004b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b94:	b084      	sub	sp, #16
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	f107 001c 	add.w	r0, r7, #28
 8004ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d122      	bne.n	8004bf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa56 	bl	8005098 <USB_CoreReset>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	e01a      	b.n	8004c28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa4a 	bl	8005098 <USB_CoreReset>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
 8004c1a:	e005      	b.n	8004c28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10b      	bne.n	8004c46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f043 0206 	orr.w	r2, r3, #6
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c52:	b004      	add	sp, #16
 8004c54:	4770      	bx	lr

08004c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d106      	bne.n	8004ca4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e00b      	b.n	8004cbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	e001      	b.n	8004cbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e003      	b.n	8004cc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004cbc:	2032      	movs	r0, #50	; 0x32
 8004cbe:	f7fc fbff 	bl	80014c0 <HAL_Delay>

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ccc:	b084      	sub	sp, #16
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e009      	b.n	8004d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	3340      	adds	r3, #64	; 0x40
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b0e      	cmp	r3, #14
 8004d04:	d9f2      	bls.n	8004cec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11c      	bne.n	8004d46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f043 0302 	orr.w	r3, r3, #2
 8004d1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
 8004d44:	e00b      	b.n	8004d5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	4619      	mov	r1, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	461a      	mov	r2, r3
 8004d7a:	680b      	ldr	r3, [r1, #0]
 8004d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10c      	bne.n	8004d9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f949 	bl	8005024 <USB_SetDevSpeed>
 8004d92:	e008      	b.n	8004da6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d94:	2101      	movs	r1, #1
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f944 	bl	8005024 <USB_SetDevSpeed>
 8004d9c:	e003      	b.n	8004da6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d9e:	2103      	movs	r1, #3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f93f 	bl	8005024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004da6:	2110      	movs	r1, #16
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8f3 	bl	8004f94 <USB_FlushTxFifo>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f911 	bl	8004fe0 <USB_FlushRxFifo>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de6:	461a      	mov	r2, r3
 8004de8:	2300      	movs	r3, #0
 8004dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e043      	b.n	8004e7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e08:	d118      	bne.n	8004e3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	e013      	b.n	8004e4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	461a      	mov	r2, r3
 8004e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e008      	b.n	8004e4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3301      	adds	r3, #1
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d3b7      	bcc.n	8004df2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e043      	b.n	8004f10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9e:	d118      	bne.n	8004ed2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e013      	b.n	8004ee4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e008      	b.n	8004ee4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	461a      	mov	r2, r3
 8004f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d3b7      	bcc.n	8004e88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f043 0210 	orr.w	r2, r3, #16
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <USB_DevInit+0x2c4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f043 0208 	orr.w	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	f043 0304 	orr.w	r3, r3, #4
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr
 8004f90:	803c3800 	.word	0x803c3800

08004f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <USB_FlushTxFifo+0x48>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d0f0      	beq.n	8004fae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	00030d40 	.word	0x00030d40

08004fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <USB_FlushRxFifo+0x40>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b10      	cmp	r3, #16
 800500e:	d0f0      	beq.n	8004ff2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	00030d40 	.word	0x00030d40

08005024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005070:	f023 0303 	bic.w	r3, r3, #3
 8005074:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a13      	ldr	r2, [pc, #76]	; (80050fc <USB_CoreReset+0x64>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e01b      	b.n	80050ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	daf2      	bge.n	80050a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <USB_CoreReset+0x64>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e006      	b.n	80050ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d0f0      	beq.n	80050ce <USB_CoreReset+0x36>

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	00030d40 	.word	0x00030d40

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4e0d      	ldr	r6, [pc, #52]	; (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	; (800513c <__libc_init_array+0x3c>)
 8005106:	1ba4      	subs	r4, r4, r6
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2500      	movs	r5, #0
 800510c:	42a5      	cmp	r5, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4e0b      	ldr	r6, [pc, #44]	; (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	; (8005144 <__libc_init_array+0x44>)
 8005114:	f000 f820 	bl	8005158 <_init>
 8005118:	1ba4      	subs	r4, r4, r6
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2500      	movs	r5, #0
 800511e:	42a5      	cmp	r5, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005128:	4798      	blx	r3
 800512a:	3501      	adds	r5, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005132:	4798      	blx	r3
 8005134:	3501      	adds	r5, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	08005198 	.word	0x08005198
 800513c:	08005198 	.word	0x08005198
 8005140:	08005198 	.word	0x08005198
 8005144:	0800519c 	.word	0x0800519c

08005148 <memset>:
 8005148:	4402      	add	r2, r0
 800514a:	4603      	mov	r3, r0
 800514c:	4293      	cmp	r3, r2
 800514e:	d100      	bne.n	8005152 <memset+0xa>
 8005150:	4770      	bx	lr
 8005152:	f803 1b01 	strb.w	r1, [r3], #1
 8005156:	e7f9      	b.n	800514c <memset+0x4>

08005158 <_init>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr

08005164 <_fini>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr
