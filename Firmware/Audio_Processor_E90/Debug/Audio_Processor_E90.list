
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003454  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f4  080035f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035fc  080035fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08003674  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003674  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008901  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b44  00000000  00000000  000289a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002ac38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020481  00000000  00000000  0002b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ca7  00000000  00000000  0004b721  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2523  00000000  00000000  000533c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001158eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf0  00000000  00000000  00115968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035c4 	.word	0x080035c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080035c4 	.word	0x080035c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <classInitmydsp>:
	}
	return rate;

}

void classInitmydsp(int samplingFreq) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <instanceResetUserInterfacemydsp>:

void instanceResetUserInterfacemydsp(mydsp* dsp) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	dsp->fHslider0 = (FAUSTFLOAT)7000.0f;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <instanceResetUserInterfacemydsp+0x1c>)
 80004e8:	601a      	str	r2, [r3, #0]

}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	45dac000 	.word	0x45dac000

080004fc <instanceClearmydsp>:

void instanceClearmydsp(mydsp* dsp) {
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	dsp->IOTA = 0;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
	/* C99 loop */
	{
		int l0;
		for (l0 = 0; (l0 < 8192); l0 = (l0 + 1)) {
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e00a      	b.n	8000526 <instanceClearmydsp+0x2a>
			dsp->fRec0[l0] = 0.0f;
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3302      	adds	r3, #2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	f04f 0200 	mov.w	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
		for (l0 = 0; (l0 < 8192); l0 = (l0 + 1)) {
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3301      	adds	r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052c:	dbf0      	blt.n	8000510 <instanceClearmydsp+0x14>

		}

	}

}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <instanceConstantsmydsp>:

void instanceConstantsmydsp(mydsp* dsp, int samplingFreq) {
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
	dsp->fSamplingFreq = samplingFreq;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800054a:	3308      	adds	r3, #8
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	601a      	str	r2, [r3, #0]

}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <instanceInitmydsp>:

void instanceInitmydsp(mydsp* dsp, int samplingFreq) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	instanceConstantsmydsp(dsp, samplingFreq);
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff ffe6 	bl	800053a <instanceConstantsmydsp>
	instanceResetUserInterfacemydsp(dsp);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffb4 	bl	80004dc <instanceResetUserInterfacemydsp>
	instanceClearmydsp(dsp);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff ffc1 	bl	80004fc <instanceClearmydsp>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <initmydsp>:

void initmydsp(mydsp* dsp, int samplingFreq) {
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
	classInitmydsp(samplingFreq);
 800058c:	6838      	ldr	r0, [r7, #0]
 800058e:	f7ff ff9b 	bl	80004c8 <classInitmydsp>
	instanceInitmydsp(dsp, samplingFreq);
 8000592:	6839      	ldr	r1, [r7, #0]
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ffe1 	bl	800055c <instanceInitmydsp>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <computemydsp>:
//	ui_interface->addHorizontalSlider(ui_interface->uiInterface, "delay", &dsp->fHslider0, 5000.0f, 1.0f, 7000.0f, 10.0f);
//	ui_interface->closeBox(ui_interface->uiInterface);
//
//}

void computemydsp(mydsp* dsp, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
 80005a2:	b480      	push	{r7}
 80005a4:	b08b      	sub	sp, #44	; 0x2c
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	603b      	str	r3, [r7, #0]
	FAUSTFLOAT* input0 = inputs[0];
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	623b      	str	r3, [r7, #32]
	FAUSTFLOAT* input1 = inputs[1];
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	61fb      	str	r3, [r7, #28]
	FAUSTFLOAT* output0 = outputs[0];
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	61bb      	str	r3, [r7, #24]
	FAUSTFLOAT* output1 = outputs[1];
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	617b      	str	r3, [r7, #20]

	int iSlow0 = ((int)(float)dsp->fHslider0 + 1);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	edd3 7a00 	vldr	s15, [r3]
 80005ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005d2:	ee17 3a90 	vmov	r3, s15
 80005d6:	3301      	adds	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
	/* C99 loop */
	{
		int i;
		for (i = 0; (i < count); i = (i + 1)) {
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e04d      	b.n	800067c <computemydsp+0xda>
 			dsp->fRec0[(dsp->IOTA & 8191)] = (((0.5f * dsp->fRec0[((dsp->IOTA - iSlow0) & 8191)]) + (float)input0[i]) + (float)input1[i]);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	3302      	adds	r3, #2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	edd3 7a00 	vldr	s15, [r3]
 80005f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80005fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	6a3a      	ldr	r2, [r7, #32]
 8000606:	4413      	add	r3, r2
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	69fa      	ldr	r2, [r7, #28]
 8000616:	4413      	add	r3, r2
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	3302      	adds	r3, #2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	edc3 7a00 	vstr	s15, [r3]
			output0[i] = (FAUSTFLOAT)dsp->fRec0[((dsp->IOTA - 0) & 8191)];
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	69b9      	ldr	r1, [r7, #24]
 8000642:	440b      	add	r3, r1
 8000644:	68f9      	ldr	r1, [r7, #12]
 8000646:	3202      	adds	r2, #2
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	440a      	add	r2, r1
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	601a      	str	r2, [r3, #0]
			output1[i] = (FAUSTFLOAT)dsp->fRec0[((dsp->IOTA - 0) & 8191)];
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	6979      	ldr	r1, [r7, #20]
 800065e:	440b      	add	r3, r1
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	3202      	adds	r2, #2
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	440a      	add	r2, r1
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	601a      	str	r2, [r3, #0]
			dsp->IOTA = (dsp->IOTA + 1);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
		for (i = 0; (i < count); i = (i + 1)) {
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	3301      	adds	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
 800067c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	429a      	cmp	r2, r3
 8000682:	dbad      	blt.n	80005e0 <computemydsp+0x3e>

		}

	}

}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <process_init>:
 */
mydsp* dsp;
FAUSTFLOAT** inputs;
FAUSTFLOAT** outputs;

void process_init() {
 8000690:	b598      	push	{r3, r4, r7, lr}
 8000692:	af00      	add	r7, sp, #0

  // allocate memory for dsp struct and input and output channel pointers
  dsp = (mydsp*)malloc(sizeof(mydsp));
 8000694:	f248 000c 	movw	r0, #32780	; 0x800c
 8000698:	f002 ff18 	bl	80034cc <malloc>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <process_init+0x60>)
 80006a2:	601a      	str	r2, [r3, #0]
  inputs = (FAUSTFLOAT**)malloc(sizeof(FAUSTFLOAT*)*CHANNELS);
 80006a4:	2008      	movs	r0, #8
 80006a6:	f002 ff11 	bl	80034cc <malloc>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <process_init+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
  outputs = (FAUSTFLOAT**)malloc(sizeof(FAUSTFLOAT*)*CHANNELS);
 80006b2:	2008      	movs	r0, #8
 80006b4:	f002 ff0a 	bl	80034cc <malloc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <process_init+0x68>)
 80006be:	601a      	str	r2, [r3, #0]

  //point output blocks at valid memory so can modify later no problem
  outputs[0] = (FAUSTFLOAT*)malloc(sizeof(FAUSTFLOAT)*BLOCKSIZE);
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <process_init+0x68>)
 80006c2:	681c      	ldr	r4, [r3, #0]
 80006c4:	2004      	movs	r0, #4
 80006c6:	f002 ff01 	bl	80034cc <malloc>
 80006ca:	4603      	mov	r3, r0
 80006cc:	6023      	str	r3, [r4, #0]
  outputs[1] = (FAUSTFLOAT*)malloc(sizeof(FAUSTFLOAT)*BLOCKSIZE);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <process_init+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1d1c      	adds	r4, r3, #4
 80006d4:	2004      	movs	r0, #4
 80006d6:	f002 fef9 	bl	80034cc <malloc>
 80006da:	4603      	mov	r3, r0
 80006dc:	6023      	str	r3, [r4, #0]

  initmydsp(dsp, SAMPLE_RATE_ACTUAL);
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <process_init+0x60>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f24b 711b 	movw	r1, #46875	; 0xb71b
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff4b 	bl	8000582 <initmydsp>


}
 80006ec:	bf00      	nop
 80006ee:	bd98      	pop	{r3, r4, r7, pc}
 80006f0:	2000009c 	.word	0x2000009c
 80006f4:	200000a4 	.word	0x200000a4
 80006f8:	200000a0 	.word	0x200000a0

080006fc <process>:

// assumes a right justified 24 bit signed sample
void process(int *left_in, int *right_in, int *left_out, int *right_out) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	603b      	str	r3, [r7, #0]

  //convert 24 bit int samples (−8,388,608 to 8,388,607) to float (0 to 1) without losing precision
  FAUSTFLOAT left_in_float = ((FAUSTFLOAT) *left_in)/8388607.0;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000716:	eddf 6a24 	vldr	s13, [pc, #144]	; 80007a8 <process+0xac>
 800071a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071e:	edc7 7a05 	vstr	s15, [r7, #20]
  FAUSTFLOAT right_in_float = ((FAUSTFLOAT) *right_in)/8388607.0;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800072e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80007a8 <process+0xac>
 8000732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000736:	edc7 7a04 	vstr	s15, [r7, #16]

  inputs[0] = (FAUSTFLOAT*)&left_in_float; //inputs[0] gets pointer to left sample
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <process+0xb0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f107 0214 	add.w	r2, r7, #20
 8000742:	601a      	str	r2, [r3, #0]
  inputs[1] = (FAUSTFLOAT*)&right_in_float; //inputs[1] gets pointer to right sample
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <process+0xb0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3304      	adds	r3, #4
 800074a:	f107 0210 	add.w	r2, r7, #16
 800074e:	601a      	str	r2, [r3, #0]

  computemydsp(dsp, BLOCKSIZE, inputs, outputs);
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <process+0xb4>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <process+0xb0>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <process+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2101      	movs	r1, #1
 800075e:	f7ff ff20 	bl	80005a2 <computemydsp>

  // scale up processed float to 24 bit sample range and store as an int (which truncates fractional part)
  *left_out = (int)(*outputs[0]*8388607);
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <process+0xb8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	edd3 7a00 	vldr	s15, [r3]
 800076c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80007a8 <process+0xac>
 8000770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000778:	ee17 2a90 	vmov	r2, s15
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
  *right_out = (int)(*outputs[1]*8388607);
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <process+0xb8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3304      	adds	r3, #4
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80007a8 <process+0xac>
 8000790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000798:	ee17 2a90 	vmov	r2, s15
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	601a      	str	r2, [r3, #0]

}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	4afffffe 	.word	0x4afffffe
 80007ac:	200000a4 	.word	0x200000a4
 80007b0:	2000009c 	.word	0x2000009c
 80007b4:	200000a0 	.word	0x200000a0

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80007bc:	f000 fb5e 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f816 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f8e0 	bl	8000988 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c8:	f000 f8be 	bl	8000948 <MX_DMA_Init>
  MX_I2S2_Init();
 80007cc:	f000 f88e 	bl	80008ec <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 4);
 80007d0:	2304      	movs	r3, #4
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <main+0x2c>)
 80007d4:	4904      	ldr	r1, [pc, #16]	; (80007e8 <main+0x30>)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <main+0x34>)
 80007d8:	f001 fc22 	bl	8002020 <HAL_I2SEx_TransmitReceive_DMA>

  process_init();
 80007dc:	f7ff ff58 	bl	8000690 <process_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x28>
 80007e2:	bf00      	nop
 80007e4:	200000b0 	.word	0x200000b0
 80007e8:	200000c4 	.word	0x200000c4
 80007ec:	20000194 	.word	0x20000194

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b098      	sub	sp, #96	; 0x60
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fe6c 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <SystemClock_Config+0xf4>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <SystemClock_Config+0xf4>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0xf4>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SystemClock_Config+0xf8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <SystemClock_Config+0xf8>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xf8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085a:	2301      	movs	r3, #1
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800086e:	2308      	movs	r3, #8
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000872:	23a8      	movs	r3, #168	; 0xa8
 8000874:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087a:	2304      	movs	r3, #4
 800087c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f890 	bl	80029a8 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800088e:	f000 f935 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800089a:	2390      	movs	r3, #144	; 0x90
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 faeb 	bl	8002e88 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008b8:	f000 f920 	bl	8000afc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008bc:	2301      	movs	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008c0:	23c0      	movs	r3, #192	; 0xc0
 80008c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fc97 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80008d8:	f000 f910 	bl	8000afc <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3760      	adds	r7, #96	; 0x60
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_I2S2_Init+0x54>)
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <MX_I2S2_Init+0x58>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2S2_Init+0x54>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_I2S2_Init+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_I2S2_Init+0x54>)
 8000906:	2203      	movs	r2, #3
 8000908:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_I2S2_Init+0x54>)
 800090c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000910:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_I2S2_Init+0x54>)
 8000914:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000918:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_I2S2_Init+0x54>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_I2S2_Init+0x54>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_I2S2_Init+0x54>)
 8000928:	2201      	movs	r2, #1
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_I2S2_Init+0x54>)
 800092e:	f001 f931 	bl	8001b94 <HAL_I2S_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000938:	f000 f8e0 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000194 	.word	0x20000194
 8000944:	40003800 	.word	0x40003800

08000948 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_DMA_Init+0x3c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <MX_DMA_Init+0x3c>)
 8000958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_DMA_Init+0x3c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	200e      	movs	r0, #14
 8000970:	f000 fbd1 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000974:	200e      	movs	r0, #14
 8000976:	f000 fbea 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_GPIO_Init+0x68>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <MX_GPIO_Init+0x68>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x68>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  //shift right by 8 to right justify the 24 bit sample that had been xfered on a 32 bit frame
  left_in  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000a04:	8852      	ldrh	r2, [r2, #2]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	121b      	asrs	r3, r3, #8
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000a0c:	6013      	str	r3, [r2, #0]
  right_in = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000a10:	889b      	ldrh	r3, [r3, #4]
 8000a12:	041b      	lsls	r3, r3, #16
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000a16:	88d2      	ldrh	r2, [r2, #6]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	121b      	asrs	r3, r3, #8
 8000a1c:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8000a1e:	6013      	str	r3, [r2, #0]

  // does the audio processing
  process(&left_in, &right_in, &left_out, &right_out);
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000a24:	4910      	ldr	r1, [pc, #64]	; (8000a68 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000a28:	f7ff fe68 	bl	80006fc <process>

  tx_buf[0] = (left_out>>8) & 0xFFFF;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	121b      	asrs	r3, r3, #8
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8000a36:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = left_out & 0xFFFF;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8000a40:	805a      	strh	r2, [r3, #2]
  tx_buf[2] = (right_out>>8) & 0xFFFF;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	121b      	asrs	r3, r3, #8
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8000a4c:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = right_out & 0xFFFF;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8000a56:	80da      	strh	r2, [r3, #6]

}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000b0 	.word	0x200000b0
 8000a64:	200000ac 	.word	0x200000ac
 8000a68:	200000a8 	.word	0x200000a8
 8000a6c:	2000008c 	.word	0x2000008c
 8000a70:	200000c0 	.word	0x200000c0
 8000a74:	200000c4 	.word	0x200000c4

08000a78 <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  //shift right by 8 to right justify the 24 bit sample that had been xfered on a 32 bit frame
  left_in  = (((int)rx_buf[4]<<16)|rx_buf[5])>>8;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000a82:	891b      	ldrh	r3, [r3, #8]
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000a88:	8952      	ldrh	r2, [r2, #10]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	121b      	asrs	r3, r3, #8
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000a90:	6013      	str	r3, [r2, #0]
  right_in = (((int)rx_buf[6]<<16)|rx_buf[7])>>8;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000a94:	899b      	ldrh	r3, [r3, #12]
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000a9a:	89d2      	ldrh	r2, [r2, #14]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	121b      	asrs	r3, r3, #8
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_I2SEx_TxRxCpltCallback+0x74>)
 8000aa2:	6013      	str	r3, [r2, #0]

  // does the audio processing
  process(&left_in, &right_in, &left_out, &right_out);
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000aa6:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000aa8:	4910      	ldr	r1, [pc, #64]	; (8000aec <HAL_I2SEx_TxRxCpltCallback+0x74>)
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000aac:	f7ff fe26 	bl	80006fc <process>

  tx_buf[4] = (left_out>>8) & 0xFFFF;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	121b      	asrs	r3, r3, #8
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8000aba:	811a      	strh	r2, [r3, #8]
  tx_buf[5] = left_out & 0xFFFF;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8000ac4:	815a      	strh	r2, [r3, #10]
  tx_buf[6] = (right_out>>8) & 0xFFFF;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	121b      	asrs	r3, r3, #8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8000ad0:	819a      	strh	r2, [r3, #12]
  tx_buf[7] = right_out & 0xFFFF;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 8000ada:	81da      	strh	r2, [r3, #14]

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000b0 	.word	0x200000b0
 8000ae8:	200000ac 	.word	0x200000ac
 8000aec:	200000a8 	.word	0x200000a8
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	200000c4 	.word	0x200000c4

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a61      	ldr	r2, [pc, #388]	; (8000d00 <HAL_I2S_MspInit+0x1a4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	f040 80bc 	bne.w	8000cf8 <HAL_I2S_MspInit+0x19c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	4b5f      	ldr	r3, [pc, #380]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a5e      	ldr	r2, [pc, #376]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a57      	ldr	r2, [pc, #348]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a50      	ldr	r2, [pc, #320]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <HAL_I2S_MspInit+0x1a8>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000be4:	2306      	movs	r3, #6
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4846      	ldr	r0, [pc, #280]	; (8000d08 <HAL_I2S_MspInit+0x1ac>)
 8000bf0:	f000 fe36 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000bf4:	2348      	movs	r3, #72	; 0x48
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c04:	2305      	movs	r3, #5
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	483e      	ldr	r0, [pc, #248]	; (8000d08 <HAL_I2S_MspInit+0x1ac>)
 8000c10:	f000 fe26 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c26:	2305      	movs	r3, #5
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4836      	ldr	r0, [pc, #216]	; (8000d0c <HAL_I2S_MspInit+0x1b0>)
 8000c32:	f000 fe15 	bl	8001860 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c38:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <HAL_I2S_MspInit+0x1b8>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c3e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c42:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c44:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000c7c:	4824      	ldr	r0, [pc, #144]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c7e:	f000 fa81 	bl	8001184 <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8000c88:	f7ff ff38 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_I2S_MspInit+0x1b4>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000c9a:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <HAL_I2S_MspInit+0x1c0>)
 8000c9c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000ca6:	2240      	movs	r2, #64	; 0x40
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cbe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cce:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cde:	f000 fa51 	bl	8001184 <HAL_DMA_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 8000ce8:	f7ff ff08 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_I2S_MspInit+0x1bc>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40003800 	.word	0x40003800
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	200000d4 	.word	0x200000d4
 8000d14:	40026058 	.word	0x40026058
 8000d18:	20000134 	.word	0x20000134
 8000d1c:	40026070 	.word	0x40026070

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f8d4 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Stream3_IRQHandler+0x10>)
 8000d82:	f000 fb05 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000d4 	.word	0x200000d4

08000d90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Stream4_IRQHandler+0x10>)
 8000d96:	f000 fafb 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000134 	.word	0x20000134

08000da4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x50>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x16>
		heap_end = &end;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <_sbrk+0x50>)
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <_sbrk+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <_sbrk+0x50>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <_sbrk+0x50>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	466a      	mov	r2, sp
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d907      	bls.n	8000dde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dce:	f002 fb53 	bl	8003478 <__errno>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ddc:	e006      	b.n	8000dec <_sbrk+0x48>
	}

	heap_end += incr;
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <_sbrk+0x50>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <_sbrk+0x50>)
 8000de8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000090 	.word	0x20000090
 8000df8:	200001e8 	.word	0x200001e8

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SystemInit+0x28>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <SystemInit+0x28>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SystemInit+0x28>)
 8000e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e16:	609a      	str	r2, [r3, #8]
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e2e:	e003      	b.n	8000e38 <LoopCopyDataInit>

08000e30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e36:	3104      	adds	r1, #4

08000e38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e40:	d3f6      	bcc.n	8000e30 <CopyDataInit>
  ldr  r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e44:	e002      	b.n	8000e4c <LoopFillZerobss>

08000e46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e48:	f842 3b04 	str.w	r3, [r2], #4

08000e4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e50:	d3f9      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e52:	f7ff ffd3 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f002 fb15 	bl	8003484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fcad 	bl	80007b8 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e64:	08003604 	.word	0x08003604
  ldr  r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e6c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e70:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e74:	200001e4 	.word	0x200001e4

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f92b 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe2c 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f943 	bl	800116a <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000efc:	f000 f90b 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200001dc 	.word	0x200001dc

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200001dc 	.word	0x200001dc

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff feda 	bl	8000f48 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e099      	b.n	80012d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c0:	e00f      	b.n	80011e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c2:	f7ff fec1 	bl	8000f48 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d908      	bls.n	80011e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e078      	b.n	80012d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e8      	bne.n	80011c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_DMA_Init+0x158>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2b04      	cmp	r3, #4
 800123a:	d107      	bne.n	800124c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4313      	orrs	r3, r2
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f023 0307 	bic.w	r3, r3, #7
 8001262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4313      	orrs	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2b04      	cmp	r3, #4
 8001274:	d117      	bne.n	80012a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00e      	beq.n	80012a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fa6f 	bl	800176c <DMA_CheckFifoParam>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2240      	movs	r2, #64	; 0x40
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012a2:	2301      	movs	r3, #1
 80012a4:	e016      	b.n	80012d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fa26 	bl	8001700 <DMA_CalcBaseAndBitshift>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	223f      	movs	r2, #63	; 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	f010803f 	.word	0xf010803f

080012e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_DMA_Start_IT+0x26>
 8001302:	2302      	movs	r3, #2
 8001304:	e040      	b.n	8001388 <HAL_DMA_Start_IT+0xa8>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d12f      	bne.n	800137a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2202      	movs	r2, #2
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 f9b8 	bl	80016a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	223f      	movs	r2, #63	; 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0216 	orr.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e005      	b.n	8001386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001382:	2302      	movs	r3, #2
 8001384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800139c:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_DMA_IRQHandler+0x258>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a92      	ldr	r2, [pc, #584]	; (80015ec <HAL_DMA_IRQHandler+0x25c>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2208      	movs	r2, #8
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2208      	movs	r2, #8
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	2204      	movs	r2, #4
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2204      	movs	r2, #4
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2210      	movs	r2, #16
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03c      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2210      	movs	r2, #16
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d018      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d024      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e01f      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
 80014d0:	e016      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2220      	movs	r2, #32
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8086 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2220      	movs	r2, #32
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b05      	cmp	r3, #5
 8001538:	d136      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0216 	bic.w	r2, r2, #22
 8001548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_DMA_IRQHandler+0x1da>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	2b00      	cmp	r3, #0
 800159c:	d07d      	beq.n	800169a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
        }
        return;
 80015a6:	e078      	b.n	800169a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d030      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e02b      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d027      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
 80015e6:	e022      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
 80015e8:	20000000 	.word	0x20000000
 80015ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0210 	bic.w	r2, r2, #16
 800160c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	2b00      	cmp	r3, #0
 8001634:	d032      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d022      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	429a      	cmp	r2, r3
 8001664:	d307      	bcc.n	8001676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_DMA_IRQHandler+0x2ca>
 8001674:	e000      	b.n	8001678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e000      	b.n	800169c <HAL_DMA_IRQHandler+0x30c>
        return;
 800169a:	bf00      	nop
    }
  }
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	d108      	bne.n	80016e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e2:	e007      	b.n	80016f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3b10      	subs	r3, #16
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DMA_CalcBaseAndBitshift+0x64>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <DMA_CalcBaseAndBitshift+0x68>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d909      	bls.n	8001742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
 8001740:	e007      	b.n	8001752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	080035ec 	.word	0x080035ec

0800176c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11f      	bne.n	80017c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d855      	bhi.n	8001838 <DMA_CheckFifoParam+0xcc>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <DMA_CheckFifoParam+0x28>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b7 	.word	0x080017b7
 800179c:	080017a5 	.word	0x080017a5
 80017a0:	08001839 	.word	0x08001839
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d045      	beq.n	800183c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b4:	e042      	b.n	800183c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017be:	d13f      	bne.n	8001840 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c4:	e03c      	b.n	8001840 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ce:	d121      	bne.n	8001814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d836      	bhi.n	8001844 <DMA_CheckFifoParam+0xd8>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <DMA_CheckFifoParam+0x70>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f3 	.word	0x080017f3
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001805 	.word	0x08001805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      break;
 80017f0:	e02f      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001802:	e021      	b.n	8001848 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800180c:	d11e      	bne.n	800184c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001812:	e01b      	b.n	800184c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d902      	bls.n	8001820 <DMA_CheckFifoParam+0xb4>
 800181a:	2b03      	cmp	r3, #3
 800181c:	d003      	beq.n	8001826 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800181e:	e018      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      break;
 8001824:	e015      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00e      	beq.n	8001850 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
      break;
 8001836:	e00b      	b.n	8001850 <DMA_CheckFifoParam+0xe4>
      break;
 8001838:	bf00      	nop
 800183a:	e00a      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 800183c:	bf00      	nop
 800183e:	e008      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001840:	bf00      	nop
 8001842:	e006      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001844:	bf00      	nop
 8001846:	e004      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001848:	bf00      	nop
 800184a:	e002      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;   
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001850:	bf00      	nop
    }
  } 
  
  return status; 
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e16b      	b.n	8001b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 815a 	bne.w	8001b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d00b      	beq.n	80018ba <HAL_GPIO_Init+0x5a>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0xfc>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b12      	cmp	r3, #18
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80b4 	beq.w	8001b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_GPIO_Init+0x308>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a5e      	ldr	r2, [pc, #376]	; (8001b68 <HAL_GPIO_Init+0x308>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <HAL_GPIO_Init+0x308>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a5a      	ldr	r2, [pc, #360]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_GPIO_Init+0x314>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x222>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_GPIO_Init+0x318>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x21e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_GPIO_Init+0x31c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_GPIO_Init+0x320>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x216>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x212>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4a      	ldr	r2, [pc, #296]	; (8001b8c <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x20a>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae90 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e128      	b.n	8001df8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <HAL_I2S_Init+0x26c>)
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe ffcb 	bl	8000b5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bdc:	f023 030f 	bic.w	r3, r3, #15
 8001be0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d060      	beq.n	8001cb4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e001      	b.n	8001c04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d802      	bhi.n	8001c12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f001 fbd6 	bl	80033c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c18:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c22:	d125      	bne.n	8001c70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	3305      	adds	r3, #5
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	e01f      	b.n	8001c8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	3305      	adds	r3, #5
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e00e      	b.n	8001c8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	3305      	adds	r3, #5
 8001c8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <HAL_I2S_Init+0x270>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e003      	b.n	8001cbc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d902      	bls.n	8001cc8 <HAL_I2S_Init+0x134>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d907      	bls.n	8001cd8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0210 	orr.w	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e08f      	b.n	8001df8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	ea42 0103 	orr.w	r1, r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cf6:	f023 030f 	bic.w	r3, r3, #15
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6851      	ldr	r1, [r2, #4]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6892      	ldr	r2, [r2, #8]
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68d2      	ldr	r2, [r2, #12]
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6992      	ldr	r2, [r2, #24]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d161      	bne.n	8001de8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <HAL_I2S_Init+0x274>)
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_I2S_Init+0x1a4>
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d36:	e001      	b.n	8001d3c <HAL_I2S_Init+0x1a8>
 8001d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4932      	ldr	r1, [pc, #200]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2S_Init+0x1b8>
 8001d48:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d4a:	e001      	b.n	8001d50 <HAL_I2S_Init+0x1bc>
 8001d4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_I2S_Init+0x1d4>
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d66:	e001      	b.n	8001d6c <HAL_I2S_Init+0x1d8>
 8001d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_I2S_Init+0x1ea>
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d7c:	e001      	b.n	8001d82 <HAL_I2S_Init+0x1ee>
 8001d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8e:	d003      	beq.n	8001d98 <HAL_I2S_Init+0x204>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	e001      	b.n	8001da4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	b299      	uxth	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001dba:	4303      	orrs	r3, r0
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_I2S_Init+0x24c>
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001dde:	e001      	b.n	8001de4 <HAL_I2S_Init+0x250>
 8001de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de4:	897a      	ldrh	r2, [r7, #10]
 8001de6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	08001f0b 	.word	0x08001f0b
 8001e04:	cccccccd 	.word	0xcccccccd
 8001e08:	08002335 	.word	0x08002335
 8001e0c:	40003800 	.word	0x40003800
 8001e10:	40003400 	.word	0x40003400

08001e14 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	1c9a      	adds	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffb8 	bl	8001e14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	1c9a      	adds	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff93 	bl	8001e28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d13a      	bne.n	8001f9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d109      	bne.n	8001f44 <I2S_IRQHandler+0x3a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d102      	bne.n	8001f44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffb4 	bl	8001eac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d126      	bne.n	8001f9c <I2S_IRQHandler+0x92>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d11f      	bne.n	8001f9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff50 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d136      	bne.n	8002016 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d109      	bne.n	8001fc6 <I2S_IRQHandler+0xbc>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d102      	bne.n	8001fc6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff45 	bl	8001e50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d122      	bne.n	8002016 <I2S_IRQHandler+0x10c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d11b      	bne.n	8002016 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff13 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d002      	beq.n	800204c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800204a:	e160      	b.n	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e15a      	b.n	8002318 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800206e:	2302      	movs	r3, #2
 8002070:	e152      	b.n	8002318 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d002      	beq.n	800209e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d114      	bne.n	80020c8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	865a      	strh	r2, [r3, #50]	; 0x32
 80020c6:	e00b      	b.n	80020e0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2205      	movs	r2, #5
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	4a8b      	ldr	r2, [pc, #556]	; (8002320 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	4a8a      	ldr	r2, [pc, #552]	; (8002324 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	4a89      	ldr	r2, [pc, #548]	; (8002328 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002104:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	4a85      	ldr	r2, [pc, #532]	; (8002320 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	4a84      	ldr	r2, [pc, #528]	; (8002324 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	4a83      	ldr	r2, [pc, #524]	; (8002328 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800211c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002128:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d002      	beq.n	8002138 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d16b      	bne.n	8002210 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a79      	ldr	r2, [pc, #484]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800214a:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800214c:	e001      	b.n	8002152 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800214e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002152:	330c      	adds	r3, #12
 8002154:	4619      	mov	r1, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800215e:	b29b      	uxth	r3, r3
 8002160:	f7ff f8be 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a70      	ldr	r2, [pc, #448]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002170:	e001      	b.n	8002176 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	496b      	ldr	r1, [pc, #428]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800217e:	428b      	cmp	r3, r1
 8002180:	d101      	bne.n	8002186 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002182:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002184:	e001      	b.n	800218a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f7ff f898 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0202 	orr.w	r2, r2, #2
 80021be:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	f000 809e 	beq.w	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a55      	ldr	r2, [pc, #340]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80021dc:	4b54      	ldr	r3, [pc, #336]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021de:	e001      	b.n	80021e4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80021e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4950      	ldr	r1, [pc, #320]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021ec:	428b      	cmp	r3, r1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80021f0:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021f2:	e001      	b.n	80021f8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80021f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021fc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800220c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800220e:	e07e      	b.n	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800221e:	d10a      	bne.n	8002236 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002250:	e001      	b.n	8002256 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002256:	330c      	adds	r3, #12
 8002258:	461a      	mov	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	b29b      	uxth	r3, r3
 8002260:	f7ff f83e 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a30      	ldr	r2, [pc, #192]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002270:	e001      	b.n	8002276 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	492b      	ldr	r1, [pc, #172]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800227e:	428b      	cmp	r3, r1
 8002280:	d101      	bne.n	8002286 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002284:	e001      	b.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228a:	f042 0202 	orr.w	r2, r2, #2
 800228e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f7ff f819 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022cc:	d01e      	beq.n	800230c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022da:	e001      	b.n	80022e0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80022dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4911      	ldr	r1, [pc, #68]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d101      	bne.n	80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022ee:	e001      	b.n	80022f4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80022f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002308:	61da      	str	r2, [r3, #28]
 800230a:	e000      	b.n	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800230c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002316:	7ffb      	ldrb	r3, [r7, #31]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	080025dd 	.word	0x080025dd
 8002324:	080025f9 	.word	0x080025f9
 8002328:	08002731 	.word	0x08002731
 800232c:	40003800 	.word	0x40003800
 8002330:	40003400 	.word	0x40003400

08002334 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4aa2      	ldr	r2, [pc, #648]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800234e:	4ba2      	ldr	r3, [pc, #648]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002350:	e001      	b.n	8002356 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a9b      	ldr	r2, [pc, #620]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800236c:	4b9a      	ldr	r3, [pc, #616]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800236e:	e001      	b.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d004      	beq.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8099 	bne.w	80024be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa05 	bl	80027b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d107      	bne.n	80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 faa8 	bl	8002910 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d13a      	bne.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d035      	beq.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a7e      	ldr	r2, [pc, #504]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80023de:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023e0:	e001      	b.n	80023e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80023e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4979      	ldr	r1, [pc, #484]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80023f2:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023f4:	e001      	b.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800240e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fcfe 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b08      	cmp	r3, #8
 8002448:	f040 80be 	bne.w	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80b8 	beq.w	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002466:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002474:	e001      	b.n	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4954      	ldr	r1, [pc, #336]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002482:	428b      	cmp	r3, r1
 8002484:	d101      	bne.n	800248a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002488:	e001      	b.n	800248e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800248a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800248e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002492:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f043 0204 	orr.w	r2, r3, #4
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fcc0 	bl	8001e3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024bc:	e084      	b.n	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d107      	bne.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f99e 	bl	8002814 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f9dd 	bl	80028ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d12f      	bne.n	800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02a      	beq.n	800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002514:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002522:	e001      	b.n	8002528 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4929      	ldr	r1, [pc, #164]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d101      	bne.n	8002538 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002536:	e001      	b.n	800253c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800253c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002540:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fc70 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b08      	cmp	r3, #8
 8002564:	d131      	bne.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02c      	beq.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800257c:	e001      	b.n	8002582 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4912      	ldr	r1, [pc, #72]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800258a:	428b      	cmp	r3, r1
 800258c:	d101      	bne.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002590:	e001      	b.n	8002596 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800259a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025aa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fc3b 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025c6:	e000      	b.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025c8:	bf00      	nop
}
 80025ca:	bf00      	nop
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40003800 	.word	0x40003800
 80025d8:	40003400 	.word	0x40003400

080025dc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7fe fa02 	bl	80009f4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 8084 	bne.w	8002718 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d13c      	bne.n	8002694 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002628:	d006      	beq.n	8002638 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002634:	2b00      	cmp	r3, #0
 8002636:	d116      	bne.n	8002666 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <I2SEx_TxRxDMACplt+0x130>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <I2SEx_TxRxDMACplt+0x4e>
 8002642:	4b3a      	ldr	r3, [pc, #232]	; (800272c <I2SEx_TxRxDMACplt+0x134>)
 8002644:	e001      	b.n	800264a <I2SEx_TxRxDMACplt+0x52>
 8002646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <I2SEx_TxRxDMACplt+0x130>)
 8002652:	428b      	cmp	r3, r1
 8002654:	d101      	bne.n	800265a <I2SEx_TxRxDMACplt+0x62>
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <I2SEx_TxRxDMACplt+0x134>)
 8002658:	e001      	b.n	800265e <I2SEx_TxRxDMACplt+0x66>
 800265a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	e007      	b.n	8002676 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7fe f9f2 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d13c      	bne.n	8002718 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d006      	beq.n	80026bc <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d108      	bne.n	80026ce <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0202 	bic.w	r2, r2, #2
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e015      	b.n	80026fa <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <I2SEx_TxRxDMACplt+0x130>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d101      	bne.n	80026dc <I2SEx_TxRxDMACplt+0xe4>
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <I2SEx_TxRxDMACplt+0x134>)
 80026da:	e001      	b.n	80026e0 <I2SEx_TxRxDMACplt+0xe8>
 80026dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4910      	ldr	r1, [pc, #64]	; (8002728 <I2SEx_TxRxDMACplt+0x130>)
 80026e8:	428b      	cmp	r3, r1
 80026ea:	d101      	bne.n	80026f0 <I2SEx_TxRxDMACplt+0xf8>
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <I2SEx_TxRxDMACplt+0x134>)
 80026ee:	e001      	b.n	80026f4 <I2SEx_TxRxDMACplt+0xfc>
 80026f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f4:	f022 0202 	bic.w	r2, r2, #2
 80026f8:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7fe f9b0 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7fe f9ad 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40003800 	.word	0x40003800
 800272c:	40003400 	.word	0x40003400

08002730 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0203 	bic.w	r2, r2, #3
 800274c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <I2SEx_TxRxDMAError+0x78>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <I2SEx_TxRxDMAError+0x2c>
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <I2SEx_TxRxDMAError+0x7c>)
 800275a:	e001      	b.n	8002760 <I2SEx_TxRxDMAError+0x30>
 800275c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4910      	ldr	r1, [pc, #64]	; (80027a8 <I2SEx_TxRxDMAError+0x78>)
 8002768:	428b      	cmp	r3, r1
 800276a:	d101      	bne.n	8002770 <I2SEx_TxRxDMAError+0x40>
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <I2SEx_TxRxDMAError+0x7c>)
 800276e:	e001      	b.n	8002774 <I2SEx_TxRxDMAError+0x44>
 8002770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002774:	f022 0203 	bic.w	r2, r2, #3
 8002778:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f043 0208 	orr.w	r2, r3, #8
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff fb4e 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40003800 	.word	0x40003800
 80027ac:	40003400 	.word	0x40003400

080027b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c99      	adds	r1, r3, #2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6251      	str	r1, [r2, #36]	; 0x24
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d113      	bne.n	800280a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7fe f937 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c99      	adds	r1, r3, #2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6251      	str	r1, [r2, #36]	; 0x24
 8002826:	8819      	ldrh	r1, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <I2SEx_TxISR_I2SExt+0x90>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <I2SEx_TxISR_I2SExt+0x22>
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <I2SEx_TxISR_I2SExt+0x94>)
 8002834:	e001      	b.n	800283a <I2SEx_TxISR_I2SExt+0x26>
 8002836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800283a:	460a      	mov	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d121      	bne.n	800289a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <I2SEx_TxISR_I2SExt+0x90>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <I2SEx_TxISR_I2SExt+0x50>
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <I2SEx_TxISR_I2SExt+0x94>)
 8002862:	e001      	b.n	8002868 <I2SEx_TxISR_I2SExt+0x54>
 8002864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	490d      	ldr	r1, [pc, #52]	; (80028a4 <I2SEx_TxISR_I2SExt+0x90>)
 8002870:	428b      	cmp	r3, r1
 8002872:	d101      	bne.n	8002878 <I2SEx_TxISR_I2SExt+0x64>
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <I2SEx_TxISR_I2SExt+0x94>)
 8002876:	e001      	b.n	800287c <I2SEx_TxISR_I2SExt+0x68>
 8002878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800287c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002880:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe f8ef 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40003800 	.word	0x40003800
 80028a8:	40003400 	.word	0x40003400

080028ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68d8      	ldr	r0, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	1c99      	adds	r1, r3, #2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80028c4:	b282      	uxth	r2, r0
 80028c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d113      	bne.n	8002908 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f8b8 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <I2SEx_RxISR_I2SExt+0x90>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <I2SEx_RxISR_I2SExt+0x16>
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <I2SEx_RxISR_I2SExt+0x94>)
 8002924:	e001      	b.n	800292a <I2SEx_RxISR_I2SExt+0x1a>
 8002926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800292a:	68d8      	ldr	r0, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	1c99      	adds	r1, r3, #2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002936:	b282      	uxth	r2, r0
 8002938:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d121      	bne.n	8002996 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <I2SEx_RxISR_I2SExt+0x90>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <I2SEx_RxISR_I2SExt+0x50>
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <I2SEx_RxISR_I2SExt+0x94>)
 800295e:	e001      	b.n	8002964 <I2SEx_RxISR_I2SExt+0x54>
 8002960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	490d      	ldr	r1, [pc, #52]	; (80029a0 <I2SEx_RxISR_I2SExt+0x90>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d101      	bne.n	8002974 <I2SEx_RxISR_I2SExt+0x64>
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <I2SEx_RxISR_I2SExt+0x94>)
 8002972:	e001      	b.n	8002978 <I2SEx_RxISR_I2SExt+0x68>
 8002974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002978:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800297c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe f871 	bl	8000a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40003800 	.word	0x40003800
 80029a4:	40003400 	.word	0x40003400

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e25b      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c6:	4ba3      	ldr	r3, [pc, #652]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4ba0      	ldr	r3, [pc, #640]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d112      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b9d      	ldr	r3, [pc, #628]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b99      	ldr	r3, [pc, #612]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e236      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a90      	ldr	r2, [pc, #576]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b8b      	ldr	r3, [pc, #556]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a8a      	ldr	r2, [pc, #552]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a87      	ldr	r2, [pc, #540]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a83      	ldr	r2, [pc, #524]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fa72 	bl	8000f48 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fa6e 	bl	8000f48 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1fb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fa5e 	bl	8000f48 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fa5a 	bl	8000f48 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1e7      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1bb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4952      	ldr	r1, [pc, #328]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <HAL_RCC_OscConfig+0x2b0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fa13 	bl	8000f48 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe fa0f 	bl	8000f48 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e19c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4940      	ldr	r1, [pc, #256]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_OscConfig+0x2b0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f9f2 	bl	8000f48 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7fe f9ee 	bl	8000f48 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e17b      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d030      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x2b4>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9d2 	bl	8000f48 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fe f9ce 	bl	8000f48 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e15b      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
 8002bc6:	e015      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_OscConfig+0x2b4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe f9bb 	bl	8000f48 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7fe f9b7 	bl	8000f48 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e144      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a0 	beq.w	8002d42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x2b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d121      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x2b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_OscConfig+0x2b8>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f97d 	bl	8000f48 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e011      	b.n	8002c76 <HAL_RCC_OscConfig+0x2ce>
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470000 	.word	0x42470000
 8002c5c:	42470e80 	.word	0x42470e80
 8002c60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fe f970 	bl	8000f48 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0fd      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
 8002c8a:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	e01c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x32a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x312>
 8002ca0:	4b77      	ldr	r3, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a76      	ldr	r2, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a73      	ldr	r2, [pc, #460]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x32a>
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a70      	ldr	r2, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a6d      	ldr	r2, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe f935 	bl	8000f48 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe f931 	bl	8000f48 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0bc      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ee      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x33a>
 8002d04:	e014      	b.n	8002d30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fe f91f 	bl	8000f48 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe f91b 	bl	8000f48 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0a6      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a51      	ldr	r2, [pc, #324]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8092 	beq.w	8002e70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d05c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d141      	bne.n	8002de4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe f8ef 	bl	8000f48 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe f8eb 	bl	8000f48 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e078      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d80:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	019b      	lsls	r3, r3, #6
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	3b01      	subs	r3, #1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	4933      	ldr	r1, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_RCC_OscConfig+0x4dc>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f8c4 	bl	8000f48 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe f8c0 	bl	8000f48 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04d      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
 8002de2:	e045      	b.n	8002e70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x4dc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe f8ad 	bl	8000f48 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe f8a9 	bl	8000f48 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e036      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x44a>
 8002e10:	e02e      	b.n	8002e70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e029      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d115      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470060 	.word	0x42470060

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0cc      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d90c      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b65      	ldr	r3, [pc, #404]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d044      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d119      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e067      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4934      	ldr	r1, [pc, #208]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7fd ffe6 	bl	8000f48 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fd ffe2 	bl	8000f48 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e04f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d20c      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4601      	mov	r1, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	5cd3      	ldrb	r3, [r2, r3]
 8003022:	fa21 f303 	lsr.w	r3, r1, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd ff46 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00
 8003044:	40023800 	.word	0x40023800
 8003048:	080035dc 	.word	0x080035dc
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d007      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x32>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d008      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x38>
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80b4 	bne.w	80031e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003082:	60bb      	str	r3, [r7, #8]
       break;
 8003084:	e0b3      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b5d      	ldr	r3, [pc, #372]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003088:	60bb      	str	r3, [r7, #8]
      break;
 800308a:	e0b0      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b5a      	ldr	r3, [pc, #360]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d04a      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	ea03 0501 	and.w	r5, r3, r1
 80030b8:	ea04 0602 	and.w	r6, r4, r2
 80030bc:	4629      	mov	r1, r5
 80030be:	4632      	mov	r2, r6
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	0154      	lsls	r4, r2, #5
 80030ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ce:	014b      	lsls	r3, r1, #5
 80030d0:	4619      	mov	r1, r3
 80030d2:	4622      	mov	r2, r4
 80030d4:	1b49      	subs	r1, r1, r5
 80030d6:	eb62 0206 	sbc.w	r2, r2, r6
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	0194      	lsls	r4, r2, #6
 80030e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030e8:	018b      	lsls	r3, r1, #6
 80030ea:	1a5b      	subs	r3, r3, r1
 80030ec:	eb64 0402 	sbc.w	r4, r4, r2
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030fe:	00d9      	lsls	r1, r3, #3
 8003100:	460b      	mov	r3, r1
 8003102:	4614      	mov	r4, r2
 8003104:	195b      	adds	r3, r3, r5
 8003106:	eb44 0406 	adc.w	r4, r4, r6
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	02a2      	lsls	r2, r4, #10
 8003114:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003118:	0299      	lsls	r1, r3, #10
 800311a:	460b      	mov	r3, r1
 800311c:	4614      	mov	r4, r2
 800311e:	4618      	mov	r0, r3
 8003120:	4621      	mov	r1, r4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	461a      	mov	r2, r3
 800312a:	4623      	mov	r3, r4
 800312c:	f7fd f84c 	bl	80001c8 <__aeabi_uldivmod>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e049      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003138:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	ea03 0501 	and.w	r5, r3, r1
 800314e:	ea04 0602 	and.w	r6, r4, r2
 8003152:	4629      	mov	r1, r5
 8003154:	4632      	mov	r2, r6
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	0154      	lsls	r4, r2, #5
 8003160:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003164:	014b      	lsls	r3, r1, #5
 8003166:	4619      	mov	r1, r3
 8003168:	4622      	mov	r2, r4
 800316a:	1b49      	subs	r1, r1, r5
 800316c:	eb62 0206 	sbc.w	r2, r2, r6
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0194      	lsls	r4, r2, #6
 800317a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800317e:	018b      	lsls	r3, r1, #6
 8003180:	1a5b      	subs	r3, r3, r1
 8003182:	eb64 0402 	sbc.w	r4, r4, r2
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	00e2      	lsls	r2, r4, #3
 8003190:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003194:	00d9      	lsls	r1, r3, #3
 8003196:	460b      	mov	r3, r1
 8003198:	4614      	mov	r4, r2
 800319a:	195b      	adds	r3, r3, r5
 800319c:	eb44 0406 	adc.w	r4, r4, r6
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	02a2      	lsls	r2, r4, #10
 80031aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031ae:	0299      	lsls	r1, r3, #10
 80031b0:	460b      	mov	r3, r1
 80031b2:	4614      	mov	r4, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	4621      	mov	r1, r4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f04f 0400 	mov.w	r4, #0
 80031be:	461a      	mov	r2, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	f7fd f801 	bl	80001c8 <__aeabi_uldivmod>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	60bb      	str	r3, [r7, #8]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ea:	60bb      	str	r3, [r7, #8]
      break;
 80031ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ee:	68bb      	ldr	r3, [r7, #8]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	00f42400 	.word	0x00f42400

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	d035      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003228:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800322e:	f7fd fe8b 	bl	8000f48 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003236:	f7fd fe87 	bl	8000f48 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0b0      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003248:	4b5b      	ldr	r3, [pc, #364]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	019a      	lsls	r2, r3, #6
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	071b      	lsls	r3, r3, #28
 8003260:	4955      	ldr	r1, [pc, #340]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003268:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800326e:	f7fd fe6b 	bl	8000f48 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003276:	f7fd fe67 	bl	8000f48 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e090      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003288:	4b4b      	ldr	r3, [pc, #300]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8083 	beq.w	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032ca:	f7fd fe3d 	bl	8000f48 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fd fe39 	bl	8000f48 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e062      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d02f      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d028      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d114      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd fe07 	bl	8000f48 <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd fe03 	bl	8000f48 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e02a      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ee      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336c:	d10d      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	490d      	ldr	r1, [pc, #52]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
 8003388:	e005      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003390:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003394:	6093      	str	r3, [r2, #8]
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a2:	4905      	ldr	r1, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	42470068 	.word	0x42470068
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40007000 	.word	0x40007000
 80033c0:	42470e40 	.word	0x42470e40

080033c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d13d      	bne.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d12f      	bne.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033f8:	617b      	str	r3, [r7, #20]
          break;
 80033fa:	e02f      	b.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003408:	d108      	bne.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800340a:	4b18      	ldr	r3, [pc, #96]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	e007      	b.n	800342c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003446:	0f1b      	lsrs	r3, r3, #28
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
          break;
 8003454:	e002      	b.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
          break;
 800345a:	bf00      	nop
        }
      }
      break;
 800345c:	bf00      	nop
    }
  }
  return frequency;
 800345e:	697b      	ldr	r3, [r7, #20]
}
 8003460:	4618      	mov	r0, r3
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40023800 	.word	0x40023800
 8003470:	00bb8000 	.word	0x00bb8000
 8003474:	00f42400 	.word	0x00f42400

08003478 <__errno>:
 8003478:	4b01      	ldr	r3, [pc, #4]	; (8003480 <__errno+0x8>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c

08003484 <__libc_init_array>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4e0d      	ldr	r6, [pc, #52]	; (80034bc <__libc_init_array+0x38>)
 8003488:	4c0d      	ldr	r4, [pc, #52]	; (80034c0 <__libc_init_array+0x3c>)
 800348a:	1ba4      	subs	r4, r4, r6
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	2500      	movs	r5, #0
 8003490:	42a5      	cmp	r5, r4
 8003492:	d109      	bne.n	80034a8 <__libc_init_array+0x24>
 8003494:	4e0b      	ldr	r6, [pc, #44]	; (80034c4 <__libc_init_array+0x40>)
 8003496:	4c0c      	ldr	r4, [pc, #48]	; (80034c8 <__libc_init_array+0x44>)
 8003498:	f000 f894 	bl	80035c4 <_init>
 800349c:	1ba4      	subs	r4, r4, r6
 800349e:	10a4      	asrs	r4, r4, #2
 80034a0:	2500      	movs	r5, #0
 80034a2:	42a5      	cmp	r5, r4
 80034a4:	d105      	bne.n	80034b2 <__libc_init_array+0x2e>
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ac:	4798      	blx	r3
 80034ae:	3501      	adds	r5, #1
 80034b0:	e7ee      	b.n	8003490 <__libc_init_array+0xc>
 80034b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034b6:	4798      	blx	r3
 80034b8:	3501      	adds	r5, #1
 80034ba:	e7f2      	b.n	80034a2 <__libc_init_array+0x1e>
 80034bc:	080035fc 	.word	0x080035fc
 80034c0:	080035fc 	.word	0x080035fc
 80034c4:	080035fc 	.word	0x080035fc
 80034c8:	08003600 	.word	0x08003600

080034cc <malloc>:
 80034cc:	4b02      	ldr	r3, [pc, #8]	; (80034d8 <malloc+0xc>)
 80034ce:	4601      	mov	r1, r0
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	f000 b80b 	b.w	80034ec <_malloc_r>
 80034d6:	bf00      	nop
 80034d8:	2000000c 	.word	0x2000000c

080034dc <memset>:
 80034dc:	4402      	add	r2, r0
 80034de:	4603      	mov	r3, r0
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <_malloc_r>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	1ccd      	adds	r5, r1, #3
 80034f0:	f025 0503 	bic.w	r5, r5, #3
 80034f4:	3508      	adds	r5, #8
 80034f6:	2d0c      	cmp	r5, #12
 80034f8:	bf38      	it	cc
 80034fa:	250c      	movcc	r5, #12
 80034fc:	2d00      	cmp	r5, #0
 80034fe:	4606      	mov	r6, r0
 8003500:	db01      	blt.n	8003506 <_malloc_r+0x1a>
 8003502:	42a9      	cmp	r1, r5
 8003504:	d903      	bls.n	800350e <_malloc_r+0x22>
 8003506:	230c      	movs	r3, #12
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	2000      	movs	r0, #0
 800350c:	bd70      	pop	{r4, r5, r6, pc}
 800350e:	f000 f857 	bl	80035c0 <__malloc_lock>
 8003512:	4a21      	ldr	r2, [pc, #132]	; (8003598 <_malloc_r+0xac>)
 8003514:	6814      	ldr	r4, [r2, #0]
 8003516:	4621      	mov	r1, r4
 8003518:	b991      	cbnz	r1, 8003540 <_malloc_r+0x54>
 800351a:	4c20      	ldr	r4, [pc, #128]	; (800359c <_malloc_r+0xb0>)
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	b91b      	cbnz	r3, 8003528 <_malloc_r+0x3c>
 8003520:	4630      	mov	r0, r6
 8003522:	f000 f83d 	bl	80035a0 <_sbrk_r>
 8003526:	6020      	str	r0, [r4, #0]
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f000 f838 	bl	80035a0 <_sbrk_r>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d124      	bne.n	800357e <_malloc_r+0x92>
 8003534:	230c      	movs	r3, #12
 8003536:	6033      	str	r3, [r6, #0]
 8003538:	4630      	mov	r0, r6
 800353a:	f000 f842 	bl	80035c2 <__malloc_unlock>
 800353e:	e7e4      	b.n	800350a <_malloc_r+0x1e>
 8003540:	680b      	ldr	r3, [r1, #0]
 8003542:	1b5b      	subs	r3, r3, r5
 8003544:	d418      	bmi.n	8003578 <_malloc_r+0x8c>
 8003546:	2b0b      	cmp	r3, #11
 8003548:	d90f      	bls.n	800356a <_malloc_r+0x7e>
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	50cd      	str	r5, [r1, r3]
 800354e:	18cc      	adds	r4, r1, r3
 8003550:	4630      	mov	r0, r6
 8003552:	f000 f836 	bl	80035c2 <__malloc_unlock>
 8003556:	f104 000b 	add.w	r0, r4, #11
 800355a:	1d23      	adds	r3, r4, #4
 800355c:	f020 0007 	bic.w	r0, r0, #7
 8003560:	1ac3      	subs	r3, r0, r3
 8003562:	d0d3      	beq.n	800350c <_malloc_r+0x20>
 8003564:	425a      	negs	r2, r3
 8003566:	50e2      	str	r2, [r4, r3]
 8003568:	e7d0      	b.n	800350c <_malloc_r+0x20>
 800356a:	428c      	cmp	r4, r1
 800356c:	684b      	ldr	r3, [r1, #4]
 800356e:	bf16      	itet	ne
 8003570:	6063      	strne	r3, [r4, #4]
 8003572:	6013      	streq	r3, [r2, #0]
 8003574:	460c      	movne	r4, r1
 8003576:	e7eb      	b.n	8003550 <_malloc_r+0x64>
 8003578:	460c      	mov	r4, r1
 800357a:	6849      	ldr	r1, [r1, #4]
 800357c:	e7cc      	b.n	8003518 <_malloc_r+0x2c>
 800357e:	1cc4      	adds	r4, r0, #3
 8003580:	f024 0403 	bic.w	r4, r4, #3
 8003584:	42a0      	cmp	r0, r4
 8003586:	d005      	beq.n	8003594 <_malloc_r+0xa8>
 8003588:	1a21      	subs	r1, r4, r0
 800358a:	4630      	mov	r0, r6
 800358c:	f000 f808 	bl	80035a0 <_sbrk_r>
 8003590:	3001      	adds	r0, #1
 8003592:	d0cf      	beq.n	8003534 <_malloc_r+0x48>
 8003594:	6025      	str	r5, [r4, #0]
 8003596:	e7db      	b.n	8003550 <_malloc_r+0x64>
 8003598:	20000094 	.word	0x20000094
 800359c:	20000098 	.word	0x20000098

080035a0 <_sbrk_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4c06      	ldr	r4, [pc, #24]	; (80035bc <_sbrk_r+0x1c>)
 80035a4:	2300      	movs	r3, #0
 80035a6:	4605      	mov	r5, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	f7fd fbfa 	bl	8000da4 <_sbrk>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_sbrk_r+0x1a>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_sbrk_r+0x1a>
 80035b8:	602b      	str	r3, [r5, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	200001e0 	.word	0x200001e0

080035c0 <__malloc_lock>:
 80035c0:	4770      	bx	lr

080035c2 <__malloc_unlock>:
 80035c2:	4770      	bx	lr

080035c4 <_init>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr

080035d0 <_fini>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr
