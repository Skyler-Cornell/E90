
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052dc  080052dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e4  080052e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f95c  20000070  0800535c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f9cc  0800535c  0002f9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bfc  00000000  00000000  00028c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000790  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  0002b018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020481  00000000  00000000  0002b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007daa  00000000  00000000  0004bb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2613  00000000  00000000  000538eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115efe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022bc  00000000  00000000  00115f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004edc 	.word	0x08004edc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004edc 	.word	0x08004edc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <newmydspSIG0>:

	int iRec0[2];

} mydspSIG0;

static mydspSIG0* newmydspSIG0() { return (mydspSIG0*)malloc(sizeof(mydspSIG0)); }
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	2008      	movs	r0, #8
 8000e6a:	f003 f99f 	bl	80041ac <malloc>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <deletemydspSIG0>:
static void deletemydspSIG0(mydspSIG0* dsp) { free(dsp); }
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f003 f99d 	bl	80041bc <free>
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <instanceInitmydspSIG0>:
	}
	return rate;

}

static void instanceInitmydspSIG0(mydspSIG0* dsp, int samplingFreq) {
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
	/* C99 loop */
	{
		int l1;
		for (l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e007      	b.n	8000eaa <instanceInitmydspSIG0+0x20>
			dsp->iRec0[l1] = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	ddf4      	ble.n	8000e9a <instanceInitmydspSIG0+0x10>

		}

	}

}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <fillmydspSIG0>:

static void fillmydspSIG0(mydspSIG0* dsp, int count, float* output) {
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	/* C99 loop */
	{
		int i;
		for (i = 0; (i < count); i = (i + 1)) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e022      	b.n	8000f14 <fillmydspSIG0+0x58>
			dsp->iRec0[0] = (dsp->iRec0[1] + 1);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	601a      	str	r2, [r3, #0]
			output[i] = sinf((9.58738019e-05f * (float)(dsp->iRec0[0] + -1)));
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f24 <fillmydspSIG0+0x68>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	18d4      	adds	r4, r2, r3
 8000ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8000efa:	f003 fae5 	bl	80044c8 <sinf>
 8000efe:	eef0 7a40 	vmov.f32	s15, s0
 8000f02:	edc4 7a00 	vstr	s15, [r4]
			dsp->iRec0[1] = dsp->iRec0[0];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	605a      	str	r2, [r3, #4]
		for (i = 0; (i < count); i = (i + 1)) {
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbd8      	blt.n	8000ece <fillmydspSIG0+0x12>

		}

	}

};
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	38c90fdb 	.word	0x38c90fdb

08000f28 <classInitmydsp>:
	}
	return rate;

}

void classInitmydsp(int samplingFreq) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	mydspSIG0* sig0 = newmydspSIG0();
 8000f30:	f7ff ff98 	bl	8000e64 <newmydspSIG0>
 8000f34:	60f8      	str	r0, [r7, #12]
	instanceInitmydspSIG0(sig0, samplingFreq);
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f7ff ffa6 	bl	8000e8a <instanceInitmydspSIG0>
	fillmydspSIG0(sig0, 65536, ftbl0mydspSIG0);
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <classInitmydsp+0x30>)
 8000f40:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ffb9 	bl	8000ebc <fillmydspSIG0>
	deletemydspSIG0(sig0);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff92 	bl	8000e74 <deletemydspSIG0>

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000008c 	.word	0x2000008c

08000f5c <instanceResetUserInterfacemydsp>:

void instanceResetUserInterfacemydsp(mydsp* dsp) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	dsp->fHslider0 = (FAUSTFLOAT)800.0f;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <instanceResetUserInterfacemydsp+0x30>)
 8000f6e:	601a      	str	r2, [r3, #0]
	dsp->fHslider1 = (FAUSTFLOAT)2.0f;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f76:	3310      	adds	r3, #16
 8000f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7c:	601a      	str	r2, [r3, #0]

}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	44480000 	.word	0x44480000

08000f90 <instanceClearmydsp>:

void instanceClearmydsp(mydsp* dsp) {
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	dsp->IOTA = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	/* C99 loop */
	{
		int l0;
		for (l0 = 0; (l0 < 16384); l0 = (l0 + 1)) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e00a      	b.n	8000fba <instanceClearmydsp+0x2a>
			dsp->fVec0[l0] = 0.0f;
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	3304      	adds	r3, #4
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
		for (l0 = 0; (l0 < 16384); l0 = (l0 + 1)) {
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fc0:	dbf0      	blt.n	8000fa4 <instanceClearmydsp+0x14>

	}
	/* C99 loop */
	{
		int l2;
		for (l2 = 0; (l2 < 2); l2 = (l2 + 1)) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	e00d      	b.n	8000fe4 <instanceClearmydsp+0x54>
			dsp->fRec1[l2] = 0.0f;
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
		for (l2 = 0; (l2 < 2); l2 = (l2 + 1)) {
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	ddee      	ble.n	8000fc8 <instanceClearmydsp+0x38>

		}

	}

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <instanceConstantsmydsp>:

void instanceConstantsmydsp(mydsp* dsp, int samplingFreq) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	dsp->fSamplingFreq = samplingFreq;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001008:	3308      	adds	r3, #8
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	601a      	str	r2, [r3, #0]
	dsp->fConst0 = (1.0f / fmin(192000.0f, fmax(1.0f, (float)dsp->fSamplingFreq)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001014:	3308      	adds	r3, #8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001020:	ee17 0a90 	vmov	r0, s15
 8001024:	f7ff fa34 	bl	8000490 <__aeabi_f2d>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	ec44 3b11 	vmov	d1, r3, r4
 8001030:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001088 <instanceConstantsmydsp+0x90>
 8001034:	f003 f98c 	bl	8004350 <fmax>
 8001038:	eeb0 7a40 	vmov.f32	s14, s0
 800103c:	eef0 7a60 	vmov.f32	s15, s1
 8001040:	eeb0 1a47 	vmov.f32	s2, s14
 8001044:	eef0 1a67 	vmov.f32	s3, s15
 8001048:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001090 <instanceConstantsmydsp+0x98>
 800104c:	f003 f9a7 	bl	800439e <fmin>
 8001050:	ec54 3b10 	vmov	r3, r4, d0
 8001054:	461a      	mov	r2, r3
 8001056:	4623      	mov	r3, r4
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	490e      	ldr	r1, [pc, #56]	; (8001098 <instanceConstantsmydsp+0xa0>)
 800105e:	f7ff fb99 	bl	8000794 <__aeabi_ddiv>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f7ff fd2b 	bl	8000ac4 <__aeabi_d2f>
 800106e:	4602      	mov	r2, r0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001076:	330c      	adds	r3, #12
 8001078:	601a      	str	r2, [r3, #0]

}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	00000000 	.word	0x00000000
 800108c:	3ff00000 	.word	0x3ff00000
 8001090:	00000000 	.word	0x00000000
 8001094:	41077000 	.word	0x41077000
 8001098:	3ff00000 	.word	0x3ff00000

0800109c <instanceInitmydsp>:

void instanceInitmydsp(mydsp* dsp, int samplingFreq) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	instanceConstantsmydsp(dsp, samplingFreq);
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffa5 	bl	8000ff8 <instanceConstantsmydsp>
	instanceResetUserInterfacemydsp(dsp);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff54 	bl	8000f5c <instanceResetUserInterfacemydsp>
	instanceClearmydsp(dsp);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff6b 	bl	8000f90 <instanceClearmydsp>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <initmydsp>:

void initmydsp(mydsp* dsp, int samplingFreq) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
	classInitmydsp(samplingFreq);
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f7ff ff2b 	bl	8000f28 <classInitmydsp>
	instanceInitmydsp(dsp, samplingFreq);
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffe1 	bl	800109c <instanceInitmydsp>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	0000      	movs	r0, r0
 80010e4:	0000      	movs	r0, r0
	...

080010e8 <computemydsp>:
//	ui_interface->addHorizontalSlider(ui_interface->uiInterface, "freq", &dsp->fHslider1, 2.0f, 0.0f, 3.0f, 0.00999999978f);
//	ui_interface->closeBox(ui_interface->uiInterface);
//
//}

void computemydsp(mydsp* dsp, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	ed2d 8b02 	vpush	{d8}
 80010ee:	b090      	sub	sp, #64	; 0x40
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
	FAUSTFLOAT* input0 = inputs[0];
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
	FAUSTFLOAT* output0 = outputs[0];
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
	FAUSTFLOAT* output1 = outputs[1];
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	float fSlow0 = (float)dsp->fHslider0;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
	float fSlow1 = (dsp->fConst0 * (float)dsp->fHslider1);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800111e:	330c      	adds	r3, #12
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800112a:	3310      	adds	r3, #16
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001134:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	/* C99 loop */
	{
		int i;
		for (i = 0; (i < count); i = (i + 1)) {
 8001138:	2300      	movs	r3, #0
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800113c:	e0fd      	b.n	800133a <computemydsp+0x252>
			float fTemp0 = (float)input0[i];
 800113e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
			dsp->fVec0[(dsp->IOTA & 16383)] = fTemp0;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	3304      	adds	r3, #4
 800115a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115c:	601a      	str	r2, [r3, #0]
			dsp->fRec1[0] = (fSlow1 + (dsp->fRec1[1] - floorf((fSlow1 + dsp->fRec1[1]))));
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001164:	3318      	adds	r3, #24
 8001166:	ed93 8a00 	vldr	s16, [r3]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001170:	3318      	adds	r3, #24
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	f003 f95f 	bl	8004444 <floorf>
 8001186:	eef0 7a40 	vmov.f32	s15, s0
 800118a:	ee38 7a67 	vsub.f32	s14, s16, s15
 800118e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800119c:	3314      	adds	r3, #20
 800119e:	edc3 7a00 	vstr	s15, [r3]
			float fTemp1 = (fSlow0 * (ftbl0mydspSIG0[(int)(65536.0f * dsp->fRec1[0])] + 1.0f));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011a8:	3314      	adds	r3, #20
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001360 <computemydsp+0x278>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ba:	ee17 3a90 	vmov	r3, s15
 80011be:	4a69      	ldr	r2, [pc, #420]	; (8001364 <computemydsp+0x27c>)
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	edc7 7a08 	vstr	s15, [r7, #32]
			int iTemp2 = (int)fTemp1;
 80011dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	ee17 3a90 	vmov	r3, s15
 80011e8:	61fb      	str	r3, [r7, #28]
			float fTemp3 = floorf(fTemp1);
 80011ea:	ed97 0a08 	vldr	s0, [r7, #32]
 80011ee:	f003 f929 	bl	8004444 <floorf>
 80011f2:	ed87 0a06 	vstr	s0, [r7, #24]
			float fTemp4 = ((int)(dsp->fVec0[((int)(dsp->IOTA - fmin(10001, fmax(0, iTemp2))) & 16383)] * (fTemp3 + (1.0f - fTemp1))) + ((fTemp1 - fTemp3) * dsp->fVec0[((int)(dsp->IOTA - fmin(10001, fmax(0, (iTemp2 + 1)))) & 16383)]));
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f936 	bl	800046c <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	69f8      	ldr	r0, [r7, #28]
 8001206:	f7ff f931 	bl	800046c <__aeabi_i2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	ec43 2b11 	vmov	d1, r2, r3
 8001212:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8001350 <computemydsp+0x268>
 8001216:	f003 f89b 	bl	8004350 <fmax>
 800121a:	eeb0 7a40 	vmov.f32	s14, s0
 800121e:	eef0 7a60 	vmov.f32	s15, s1
 8001222:	eeb0 1a47 	vmov.f32	s2, s14
 8001226:	eef0 1a67 	vmov.f32	s3, s15
 800122a:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8001358 <computemydsp+0x270>
 800122e:	f003 f8b6 	bl	800439e <fmin>
 8001232:	ec53 2b10 	vmov	r2, r3, d0
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7fe ffc9 	bl	80001d0 <__aeabi_dsub>
 800123e:	4603      	mov	r3, r0
 8001240:	460c      	mov	r4, r1
 8001242:	4618      	mov	r0, r3
 8001244:	4621      	mov	r1, r4
 8001246:	f7ff fc15 	bl	8000a74 <__aeabi_d2iz>
 800124a:	4603      	mov	r3, r0
 800124c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3304      	adds	r3, #4
 8001258:	ed93 7a00 	vldr	s14, [r3]
 800125c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001260:	edd7 7a08 	vldr	s15, [r7, #32]
 8001264:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001268:	edd7 7a06 	vldr	s15, [r7, #24]
 800126c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001278:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800127c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001280:	edd7 7a06 	vldr	s15, [r7, #24]
 8001284:	ee77 8a67 	vsub.f32	s17, s14, s15
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8ed 	bl	800046c <__aeabi_i2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f8e6 	bl	800046c <__aeabi_i2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b11 	vmov	d1, r2, r3
 80012a8:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8001350 <computemydsp+0x268>
 80012ac:	f003 f850 	bl	8004350 <fmax>
 80012b0:	eeb0 7a40 	vmov.f32	s14, s0
 80012b4:	eef0 7a60 	vmov.f32	s15, s1
 80012b8:	eeb0 1a47 	vmov.f32	s2, s14
 80012bc:	eef0 1a67 	vmov.f32	s3, s15
 80012c0:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8001358 <computemydsp+0x270>
 80012c4:	f003 f86b 	bl	800439e <fmin>
 80012c8:	ec53 2b10 	vmov	r2, r3, d0
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ff7e 	bl	80001d0 <__aeabi_dsub>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	4618      	mov	r0, r3
 80012da:	4621      	mov	r1, r4
 80012dc:	f7ff fbca 	bl	8000a74 <__aeabi_d2iz>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3304      	adds	r3, #4
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80012f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012fa:	edc7 7a05 	vstr	s15, [r7, #20]
			output0[i] = (FAUSTFLOAT)fTemp4;
 80012fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001304:	4413      	add	r3, r2
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
			output1[i] = (FAUSTFLOAT)fTemp4;
 800130a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001310:	4413      	add	r3, r2
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	601a      	str	r2, [r3, #0]
			dsp->IOTA = (dsp->IOTA + 1);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]
			dsp->fRec1[1] = dsp->fRec1[0];
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001326:	3314      	adds	r3, #20
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001330:	3318      	adds	r3, #24
 8001332:	601a      	str	r2, [r3, #0]
		for (i = 0; (i < count); i = (i + 1)) {
 8001334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001336:	3301      	adds	r3, #1
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800133a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	429a      	cmp	r2, r3
 8001340:	f6ff aefd 	blt.w	800113e <computemydsp+0x56>

		}

	}

}
 8001344:	bf00      	nop
 8001346:	3740      	adds	r7, #64	; 0x40
 8001348:	46bd      	mov	sp, r7
 800134a:	ecbd 8b02 	vpop	{d8}
 800134e:	bdb0      	pop	{r4, r5, r7, pc}
	...
 800135c:	40c38880 	.word	0x40c38880
 8001360:	47800000 	.word	0x47800000
 8001364:	2000008c 	.word	0x2000008c

08001368 <process_init>:
 */
mydsp* dsp;
FAUSTFLOAT** inputs;
FAUSTFLOAT** outputs;

void process_init() {
 8001368:	b598      	push	{r3, r4, r7, lr}
 800136a:	af00      	add	r7, sp, #0

  // allocate memory for dsp struct and input and output channel pointers
  dsp = (mydsp*)malloc(sizeof(mydsp));
 800136c:	4816      	ldr	r0, [pc, #88]	; (80013c8 <process_init+0x60>)
 800136e:	f002 ff1d 	bl	80041ac <malloc>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <process_init+0x64>)
 8001378:	601a      	str	r2, [r3, #0]
  inputs = (FAUSTFLOAT**)malloc(sizeof(FAUSTFLOAT*)*CHANNELS);
 800137a:	2008      	movs	r0, #8
 800137c:	f002 ff16 	bl	80041ac <malloc>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <process_init+0x68>)
 8001386:	601a      	str	r2, [r3, #0]
  outputs = (FAUSTFLOAT**)malloc(sizeof(FAUSTFLOAT*)*CHANNELS);
 8001388:	2008      	movs	r0, #8
 800138a:	f002 ff0f 	bl	80041ac <malloc>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <process_init+0x6c>)
 8001394:	601a      	str	r2, [r3, #0]

  //point output blocks at valid memory so can modify later no problem
  outputs[0] = (FAUSTFLOAT*)malloc(sizeof(FAUSTFLOAT)*BLOCKSIZE);
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <process_init+0x6c>)
 8001398:	681c      	ldr	r4, [r3, #0]
 800139a:	2004      	movs	r0, #4
 800139c:	f002 ff06 	bl	80041ac <malloc>
 80013a0:	4603      	mov	r3, r0
 80013a2:	6023      	str	r3, [r4, #0]
  outputs[1] = (FAUSTFLOAT*)malloc(sizeof(FAUSTFLOAT)*BLOCKSIZE);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <process_init+0x6c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1d1c      	adds	r4, r3, #4
 80013aa:	2004      	movs	r0, #4
 80013ac:	f002 fefe 	bl	80041ac <malloc>
 80013b0:	4603      	mov	r3, r0
 80013b2:	6023      	str	r3, [r4, #0]

  initmydsp(dsp, SAMPLE_RATE_ACTUAL);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <process_init+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f24b 711b 	movw	r1, #46875	; 0xb71b
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe80 	bl	80010c2 <initmydsp>

}
 80013c2:	bf00      	nop
 80013c4:	bd98      	pop	{r3, r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0001001c 	.word	0x0001001c
 80013cc:	2001f884 	.word	0x2001f884
 80013d0:	2001f88c 	.word	0x2001f88c
 80013d4:	2001f888 	.word	0x2001f888

080013d8 <process>:

// assumes a right justified 24 bit signed sample
void process(int *left_in, int *right_in, int *left_out, int *right_out) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]

  //convert 24 bit int samples (−8,388,608 to 8,388,607) to float (0 to 1) without losing precision
  FAUSTFLOAT left_in_float = ((FAUSTFLOAT) *left_in)/8388607.0f;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001484 <process+0xac>
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
  FAUSTFLOAT right_in_float = ((FAUSTFLOAT) *right_in)/8388607.0f;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001484 <process+0xac>
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	edc7 7a04 	vstr	s15, [r7, #16]

  inputs[0] = (FAUSTFLOAT*)&left_in_float; //inputs[0] gets pointer to left sample
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <process+0xb0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f107 0214 	add.w	r2, r7, #20
 800141e:	601a      	str	r2, [r3, #0]
  inputs[1] = (FAUSTFLOAT*)&right_in_float; //inputs[1] gets pointer to right sample
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <process+0xb0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	f107 0210 	add.w	r2, r7, #16
 800142a:	601a      	str	r2, [r3, #0]

  computemydsp(dsp, BLOCKSIZE, inputs, outputs);
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <process+0xb4>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <process+0xb0>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <process+0xb8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	f7ff fe55 	bl	80010e8 <computemydsp>

  // scale up processed float to half of the 24 bit sample range and store as an int (which truncates fractional part)
  //+/-4000000 is roughly half of the fullscale range and is a bit softer on the ears than the full range
  *left_out = (int)(*outputs[0]*4000000.0f);
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <process+0xb8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001494 <process+0xbc>
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	601a      	str	r2, [r3, #0]
  *right_out = (int)(*outputs[1]*4000000.0f);
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <process+0xb8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3304      	adds	r3, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001494 <process+0xbc>
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 2a90 	vmov	r2, s15
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	601a      	str	r2, [r3, #0]

}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	4afffffe 	.word	0x4afffffe
 8001488:	2001f88c 	.word	0x2001f88c
 800148c:	2001f884 	.word	0x2001f884
 8001490:	2001f888 	.word	0x2001f888
 8001494:	4a742400 	.word	0x4a742400

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fb5e 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f816 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 f8e0 	bl	8001668 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a8:	f000 f8be 	bl	8001628 <MX_DMA_Init>
  MX_I2S2_Init();
 80014ac:	f000 f88e 	bl	80015cc <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  process_init();
 80014b0:	f7ff ff5a 	bl	8001368 <process_init>

  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 4);
 80014b4:	2304      	movs	r3, #4
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <main+0x2c>)
 80014b8:	4903      	ldr	r1, [pc, #12]	; (80014c8 <main+0x30>)
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <main+0x34>)
 80014bc:	f001 fc20 	bl	8002d00 <HAL_I2SEx_TransmitReceive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <main+0x28>
 80014c2:	bf00      	nop
 80014c4:	2001f898 	.word	0x2001f898
 80014c8:	2001f8ac 	.word	0x2001f8ac
 80014cc:	2001f97c 	.word	0x2001f97c

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b098      	sub	sp, #96	; 0x60
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fe74 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <SystemClock_Config+0xf4>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <SystemClock_Config+0xf4>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <SystemClock_Config+0xf4>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <SystemClock_Config+0xf8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <SystemClock_Config+0xf8>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <SystemClock_Config+0xf8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153a:	2301      	movs	r3, #1
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800153e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800154e:	2308      	movs	r3, #8
 8001550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001552:	23a8      	movs	r3, #168	; 0xa8
 8001554:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800155a:	2304      	movs	r3, #4
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001562:	4618      	mov	r0, r3
 8001564:	f002 f890 	bl	8003688 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800156e:	f000 f935 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800157a:	2390      	movs	r3, #144	; 0x90
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f002 faeb 	bl	8003b68 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001598:	f000 f920 	bl	80017dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800159c:	2301      	movs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80015a0:	23c0      	movs	r3, #192	; 0xc0
 80015a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fc97 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80015b8:	f000 f910 	bl	80017dc <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3760      	adds	r7, #96	; 0x60
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000

080015cc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_I2S2_Init+0x54>)
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <MX_I2S2_Init+0x58>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2S2_Init+0x54>)
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_I2S2_Init+0x54>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2S2_Init+0x54>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_I2S2_Init+0x54>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_I2S2_Init+0x54>)
 80015f4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80015f8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2S2_Init+0x54>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_I2S2_Init+0x54>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2S2_Init+0x54>)
 8001608:	2201      	movs	r2, #1
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_I2S2_Init+0x54>)
 800160e:	f001 f931 	bl	8002874 <HAL_I2S_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001618:	f000 f8e0 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2001f97c 	.word	0x2001f97c
 8001624:	40003800 	.word	0x40003800

08001628 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_DMA_Init+0x3c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <MX_DMA_Init+0x3c>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_DMA_Init+0x3c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	200e      	movs	r0, #14
 8001650:	f000 fbd1 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001654:	200e      	movs	r0, #14
 8001656:	f000 fbea 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_GPIO_Init+0x68>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <MX_GPIO_Init+0x68>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_GPIO_Init+0x68>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_GPIO_Init+0x68>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <MX_GPIO_Init+0x68>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <MX_GPIO_Init+0x68>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_GPIO_Init+0x68>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <MX_GPIO_Init+0x68>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_GPIO_Init+0x68>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  //shift right by 8 to right justify the 24 bit sample that had been xfered on a 32 bit frame
  left_in  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80016e4:	8852      	ldrh	r2, [r2, #2]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	121b      	asrs	r3, r3, #8
 80016ea:	4a16      	ldr	r2, [pc, #88]	; (8001744 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 80016ec:	6013      	str	r3, [r2, #0]
  right_in = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 80016f6:	88d2      	ldrh	r2, [r2, #6]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	121b      	asrs	r3, r3, #8
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 80016fe:	6013      	str	r3, [r2, #0]

  // does the audio processing
  process(&left_in, &right_in, &left_out, &right_out);
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 8001704:	4910      	ldr	r1, [pc, #64]	; (8001748 <HAL_I2SEx_TxRxHalfCpltCallback+0x74>)
 8001706:	480f      	ldr	r0, [pc, #60]	; (8001744 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8001708:	f7ff fe66 	bl	80013d8 <process>

  tx_buf[0] = (left_out>>8) & 0xFFFF;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	121b      	asrs	r3, r3, #8
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8001716:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = left_out & 0xFFFF;
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8001720:	805a      	strh	r2, [r3, #2]
  tx_buf[2] = (right_out>>8) & 0xFFFF;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	121b      	asrs	r3, r3, #8
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 800172c:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = right_out & 0xFFFF;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_I2SEx_TxRxHalfCpltCallback+0x80>)
 8001736:	80da      	strh	r2, [r3, #6]

}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2001f898 	.word	0x2001f898
 8001744:	2001f894 	.word	0x2001f894
 8001748:	2001f890 	.word	0x2001f890
 800174c:	2001f874 	.word	0x2001f874
 8001750:	2001f8a8 	.word	0x2001f8a8
 8001754:	2001f8ac 	.word	0x2001f8ac

08001758 <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  //shift right by 8 to right justify the 24 bit sample that had been xfered on a 32 bit frame
  left_in  = (((int)rx_buf[4]<<16)|rx_buf[5])>>8;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001762:	891b      	ldrh	r3, [r3, #8]
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001768:	8952      	ldrh	r2, [r2, #10]
 800176a:	4313      	orrs	r3, r2
 800176c:	121b      	asrs	r3, r3, #8
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8001770:	6013      	str	r3, [r2, #0]
  right_in = (((int)rx_buf[6]<<16)|rx_buf[7])>>8;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8001774:	899b      	ldrh	r3, [r3, #12]
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 800177a:	89d2      	ldrh	r2, [r2, #14]
 800177c:	4313      	orrs	r3, r2
 800177e:	121b      	asrs	r3, r3, #8
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_I2SEx_TxRxCpltCallback+0x74>)
 8001782:	6013      	str	r3, [r2, #0]

  // does the audio processing
  process(&left_in, &right_in, &left_out, &right_out);
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8001788:	4910      	ldr	r1, [pc, #64]	; (80017cc <HAL_I2SEx_TxRxCpltCallback+0x74>)
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 800178c:	f7ff fe24 	bl	80013d8 <process>

  tx_buf[4] = (left_out>>8) & 0xFFFF;
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	121b      	asrs	r3, r3, #8
 8001796:	b29a      	uxth	r2, r3
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 800179a:	811a      	strh	r2, [r3, #8]
  tx_buf[5] = left_out & 0xFFFF;
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 80017a4:	815a      	strh	r2, [r3, #10]
  tx_buf[6] = (right_out>>8) & 0xFFFF;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	121b      	asrs	r3, r3, #8
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 80017b0:	819a      	strh	r2, [r3, #12]
  tx_buf[7] = right_out & 0xFFFF;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_I2SEx_TxRxCpltCallback+0x80>)
 80017ba:	81da      	strh	r2, [r3, #14]

}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2001f898 	.word	0x2001f898
 80017c8:	2001f894 	.word	0x2001f894
 80017cc:	2001f890 	.word	0x2001f890
 80017d0:	2001f874 	.word	0x2001f874
 80017d4:	2001f8a8 	.word	0x2001f8a8
 80017d8:	2001f8ac 	.word	0x2001f8ac

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_MspInit+0x4c>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x4c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a61      	ldr	r2, [pc, #388]	; (80019e0 <HAL_I2S_MspInit+0x1a4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	f040 80bc 	bne.w	80019d8 <HAL_I2S_MspInit+0x19c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 800186a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b5c      	ldr	r3, [pc, #368]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <HAL_I2S_MspInit+0x1a8>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80018c4:	2306      	movs	r3, #6
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4846      	ldr	r0, [pc, #280]	; (80019e8 <HAL_I2S_MspInit+0x1ac>)
 80018d0:	f000 fe36 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80018d4:	2348      	movs	r3, #72	; 0x48
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e4:	2305      	movs	r3, #5
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	483e      	ldr	r0, [pc, #248]	; (80019e8 <HAL_I2S_MspInit+0x1ac>)
 80018f0:	f000 fe26 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80018f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001906:	2305      	movs	r3, #5
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4836      	ldr	r0, [pc, #216]	; (80019ec <HAL_I2S_MspInit+0x1b0>)
 8001912:	f000 fe15 	bl	8002540 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001916:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001918:	4a36      	ldr	r2, [pc, #216]	; (80019f4 <HAL_I2S_MspInit+0x1b8>)
 800191a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 800191e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001922:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001936:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 800193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800195c:	4824      	ldr	r0, [pc, #144]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 800195e:	f000 fa81 	bl	8001e64 <HAL_DMA_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8001968:	f7ff ff38 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001970:	63da      	str	r2, [r3, #60]	; 0x3c
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_I2S_MspInit+0x1b4>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_I2S_MspInit+0x1c0>)
 800197c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 8001992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001996:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 800199a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800199e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80019bc:	480e      	ldr	r0, [pc, #56]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019be:	f000 fa51 	bl	8001e64 <HAL_DMA_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 80019c8:	f7ff ff08 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_I2S_MspInit+0x1bc>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40003800 	.word	0x40003800
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020400 	.word	0x40020400
 80019f0:	2001f8bc 	.word	0x2001f8bc
 80019f4:	40026058 	.word	0x40026058
 80019f8:	2001f91c 	.word	0x2001f91c
 80019fc:	40026070 	.word	0x40026070

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f8d4 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <DMA1_Stream3_IRQHandler+0x10>)
 8001a62:	f000 fb05 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2001f8bc 	.word	0x2001f8bc

08001a70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA1_Stream4_IRQHandler+0x10>)
 8001a76:	f000 fafb 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2001f91c 	.word	0x2001f91c

08001a84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x50>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x16>
		heap_end = &end;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <_sbrk+0x50>)
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <_sbrk+0x54>)
 8001a98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <_sbrk+0x50>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <_sbrk+0x50>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	466a      	mov	r2, sp
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d907      	bls.n	8001abe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001aae:	f002 fb53 	bl	8004158 <__errno>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abc:	e006      	b.n	8001acc <_sbrk+0x48>
	}

	heap_end += incr;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <_sbrk+0x50>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <_sbrk+0x50>)
 8001ac8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2001f878 	.word	0x2001f878
 8001ad8:	2001f9d0 	.word	0x2001f9d0

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <SystemInit+0x28>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <SystemInit+0x28>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SystemInit+0x28>)
 8001af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af6:	609a      	str	r2, [r3, #8]
#endif
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b0e:	e003      	b.n	8001b18 <LoopCopyDataInit>

08001b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b16:	3104      	adds	r1, #4

08001b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b20:	d3f6      	bcc.n	8001b10 <CopyDataInit>
  ldr  r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b24:	e002      	b.n	8001b2c <LoopFillZerobss>

08001b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b28:	f842 3b04 	str.w	r3, [r2], #4

08001b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b30:	d3f9      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b32:	f7ff ffd3 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f002 fb15 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fcad 	bl	8001498 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b44:	080052ec 	.word	0x080052ec
  ldr  r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b4c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001b50:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001b54:	2001f9cc 	.word	0x2001f9cc

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f92b 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fe2c 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f943 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bdc:	f000 f90b 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008
 8001c24:	2001f9c4 	.word	0x2001f9c4

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	2001f9c4 	.word	0x2001f9c4

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feda 	bl	8001c28 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fec1 	bl	8001c28 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa6f 	bl	800244c <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa26 	bl	80023e0 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9b8 	bl	8002384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <HAL_DMA_IRQHandler+0x258>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a92      	ldr	r2, [pc, #584]	; (80022cc <HAL_DMA_IRQHandler+0x25c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2208      	movs	r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2208      	movs	r2, #8
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2204      	movs	r2, #4
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2210      	movs	r2, #16
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d043      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2210      	movs	r2, #16
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e01f      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2220      	movs	r2, #32
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808e 	beq.w	800230e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8086 	beq.w	800230e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	2220      	movs	r2, #32
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d136      	bne.n	8002288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0216 	bic.w	r2, r2, #22
 8002228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_DMA_IRQHandler+0x1da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	223f      	movs	r2, #63	; 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07d      	beq.n	800237a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
        }
        return;
 8002286:	e078      	b.n	800237a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01c      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d108      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d030      	beq.n	800230e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e02b      	b.n	800230e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d027      	beq.n	800230e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
 80022c6:	e022      	b.n	800230e <HAL_DMA_IRQHandler+0x29e>
 80022c8:	20000000 	.word	0x20000000
 80022cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0210 	bic.w	r2, r2, #16
 80022ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	d032      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d022      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	429a      	cmp	r2, r3
 8002344:	d307      	bcc.n	8002356 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f2      	bne.n	800233a <HAL_DMA_IRQHandler+0x2ca>
 8002354:	e000      	b.n	8002358 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002356:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e000      	b.n	800237c <HAL_DMA_IRQHandler+0x30c>
        return;
 800237a:	bf00      	nop
    }
  }
}
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop

08002384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d108      	bne.n	80023c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023c2:	e007      	b.n	80023d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b10      	subs	r3, #16
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <DMA_CalcBaseAndBitshift+0x64>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <DMA_CalcBaseAndBitshift+0x68>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d909      	bls.n	8002422 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	1d1a      	adds	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	; 0x58
 8002420:	e007      	b.n	8002432 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	aaaaaaab 	.word	0xaaaaaaab
 8002448:	08004f04 	.word	0x08004f04

0800244c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d855      	bhi.n	8002518 <DMA_CheckFifoParam+0xcc>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <DMA_CheckFifoParam+0x28>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002485 	.word	0x08002485
 8002478:	08002497 	.word	0x08002497
 800247c:	08002485 	.word	0x08002485
 8002480:	08002519 	.word	0x08002519
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d045      	beq.n	800251c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e042      	b.n	800251c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800249e:	d13f      	bne.n	8002520 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e03c      	b.n	8002520 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	d121      	bne.n	80024f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d836      	bhi.n	8002524 <DMA_CheckFifoParam+0xd8>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <DMA_CheckFifoParam+0x70>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024d3 	.word	0x080024d3
 80024c4:	080024cd 	.word	0x080024cd
 80024c8:	080024e5 	.word	0x080024e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e02f      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d024      	beq.n	8002528 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e2:	e021      	b.n	8002528 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ec:	d11e      	bne.n	800252c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024f2:	e01b      	b.n	800252c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <DMA_CheckFifoParam+0xb4>
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d003      	beq.n	8002506 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024fe:	e018      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      break;
 8002504:	e015      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      break;
 8002516:	e00b      	b.n	8002530 <DMA_CheckFifoParam+0xe4>
      break;
 8002518:	bf00      	nop
 800251a:	e00a      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 800251c:	bf00      	nop
 800251e:	e008      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 8002520:	bf00      	nop
 8002522:	e006      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 8002524:	bf00      	nop
 8002526:	e004      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 8002528:	bf00      	nop
 800252a:	e002      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;   
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 8002530:	bf00      	nop
    }
  } 
  
  return status; 
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e16b      	b.n	8002834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 815a 	bne.w	800282e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00b      	beq.n	800259a <HAL_GPIO_Init+0x5a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800258e:	2b11      	cmp	r3, #17
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b12      	cmp	r3, #18
 8002598:	d130      	bne.n	80025fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0201 	and.w	r2, r3, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0xfc>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b12      	cmp	r3, #18
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80b4 	beq.w	800282e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_GPIO_Init+0x308>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <HAL_GPIO_Init+0x308>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_GPIO_Init+0x308>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a5a      	ldr	r2, [pc, #360]	; (800284c <HAL_GPIO_Init+0x30c>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_GPIO_Init+0x310>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_GPIO_Init+0x226>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_GPIO_Init+0x314>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x222>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_GPIO_Init+0x318>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x21e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4e      	ldr	r2, [pc, #312]	; (800285c <HAL_GPIO_Init+0x31c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x21a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_GPIO_Init+0x320>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x216>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4c      	ldr	r2, [pc, #304]	; (8002864 <HAL_GPIO_Init+0x324>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x212>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <HAL_GPIO_Init+0x328>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x20e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4a      	ldr	r2, [pc, #296]	; (800286c <HAL_GPIO_Init+0x32c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x20a>
 8002746:	2307      	movs	r3, #7
 8002748:	e00e      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800274a:	2308      	movs	r3, #8
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800274e:	2306      	movs	r3, #6
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4934      	ldr	r1, [pc, #208]	; (800284c <HAL_GPIO_Init+0x30c>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_GPIO_Init+0x330>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027aa:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_GPIO_Init+0x330>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_GPIO_Init+0x330>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_GPIO_Init+0x330>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_GPIO_Init+0x330>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_GPIO_Init+0x330>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_GPIO_Init+0x330>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_GPIO_Init+0x330>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae90 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	3724      	adds	r7, #36	; 0x24
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40021400 	.word	0x40021400
 8002868:	40021800 	.word	0x40021800
 800286c:	40021c00 	.word	0x40021c00
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e128      	b.n	8002ad8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a90      	ldr	r2, [pc, #576]	; (8002ae0 <HAL_I2S_Init+0x26c>)
 800289e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fe ffcb 	bl	800183c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028bc:	f023 030f 	bic.w	r3, r3, #15
 80028c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2202      	movs	r2, #2
 80028c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d060      	beq.n	8002994 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028da:	2310      	movs	r3, #16
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e001      	b.n	80028e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d802      	bhi.n	80028f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f001 fbd6 	bl	80040a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80028f8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d125      	bne.n	8002950 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d010      	beq.n	800292e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	fbb2 f2f3 	udiv	r2, r2, r3
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	3305      	adds	r3, #5
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e01f      	b.n	800296e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	fbb2 f2f3 	udiv	r2, r2, r3
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	3305      	adds	r3, #5
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e00e      	b.n	800296e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fbb2 f2f3 	udiv	r2, r2, r3
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	461a      	mov	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	3305      	adds	r3, #5
 800296c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4a5c      	ldr	r2, [pc, #368]	; (8002ae4 <HAL_I2S_Init+0x270>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e003      	b.n	800299c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002994:	2302      	movs	r3, #2
 8002996:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d902      	bls.n	80029a8 <HAL_I2S_Init+0x134>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2bff      	cmp	r3, #255	; 0xff
 80029a6:	d907      	bls.n	80029b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f043 0210 	orr.w	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e08f      	b.n	8002ad8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	ea42 0103 	orr.w	r1, r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029d6:	f023 030f 	bic.w	r3, r3, #15
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6851      	ldr	r1, [r2, #4]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68d2      	ldr	r2, [r2, #12]
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6992      	ldr	r2, [r2, #24]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d161      	bne.n	8002ac8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <HAL_I2S_Init+0x274>)
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a37      	ldr	r2, [pc, #220]	; (8002aec <HAL_I2S_Init+0x278>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_I2S_Init+0x1a4>
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_I2S_Init+0x27c>)
 8002a16:	e001      	b.n	8002a1c <HAL_I2S_Init+0x1a8>
 8002a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4932      	ldr	r1, [pc, #200]	; (8002aec <HAL_I2S_Init+0x278>)
 8002a24:	428a      	cmp	r2, r1
 8002a26:	d101      	bne.n	8002a2c <HAL_I2S_Init+0x1b8>
 8002a28:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <HAL_I2S_Init+0x27c>)
 8002a2a:	e001      	b.n	8002a30 <HAL_I2S_Init+0x1bc>
 8002a2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a34:	f023 030f 	bic.w	r3, r3, #15
 8002a38:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2b      	ldr	r2, [pc, #172]	; (8002aec <HAL_I2S_Init+0x278>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_I2S_Init+0x1d4>
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_I2S_Init+0x27c>)
 8002a46:	e001      	b.n	8002a4c <HAL_I2S_Init+0x1d8>
 8002a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <HAL_I2S_Init+0x278>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_I2S_Init+0x1ea>
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_I2S_Init+0x27c>)
 8002a5c:	e001      	b.n	8002a62 <HAL_I2S_Init+0x1ee>
 8002a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6e:	d003      	beq.n	8002a78 <HAL_I2S_Init+0x204>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e001      	b.n	8002a84 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002a9a:	4303      	orrs	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_I2S_Init+0x278>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2S_Init+0x24c>
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_I2S_Init+0x27c>)
 8002abe:	e001      	b.n	8002ac4 <HAL_I2S_Init+0x250>
 8002ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac4:	897a      	ldrh	r2, [r7, #10]
 8002ac6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08002beb 	.word	0x08002beb
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	08003015 	.word	0x08003015
 8002aec:	40003800 	.word	0x40003800
 8002af0:	40003400 	.word	0x40003400

08002af4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	881a      	ldrh	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c9a      	adds	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b74:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffb8 	bl	8002af4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10e      	bne.n	8002be2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bd2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff93 	bl	8002b08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d13a      	bne.n	8002c7c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d109      	bne.n	8002c24 <I2S_IRQHandler+0x3a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d102      	bne.n	8002c24 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffb4 	bl	8002b8c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d126      	bne.n	8002c7c <I2S_IRQHandler+0x92>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d11f      	bne.n	8002c7c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff50 	bl	8002b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d136      	bne.n	8002cf6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d109      	bne.n	8002ca6 <I2S_IRQHandler+0xbc>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d102      	bne.n	8002ca6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff45 	bl	8002b30 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d122      	bne.n	8002cf6 <I2S_IRQHandler+0x10c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d11b      	bne.n	8002cf6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ccc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0204 	orr.w	r2, r3, #4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff13 	bl	8002b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d002      	beq.n	8002d2c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d2a:	e160      	b.n	8002fee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e15a      	b.n	8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e152      	b.n	8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d002      	beq.n	8002d7e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d114      	bne.n	8002da8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	865a      	strh	r2, [r3, #50]	; 0x32
 8002da6:	e00b      	b.n	8002dc0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2205      	movs	r2, #5
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	4a8b      	ldr	r2, [pc, #556]	; (8003000 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	4a8a      	ldr	r2, [pc, #552]	; (8003004 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	4a89      	ldr	r2, [pc, #548]	; (8003008 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4a85      	ldr	r2, [pc, #532]	; (8003000 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	4a84      	ldr	r2, [pc, #528]	; (8003004 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	4a83      	ldr	r2, [pc, #524]	; (8003008 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002dfc:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e08:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e10:	d002      	beq.n	8002e18 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d16b      	bne.n	8002ef0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a79      	ldr	r2, [pc, #484]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002e2a:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e2c:	e001      	b.n	8002e32 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e32:	330c      	adds	r3, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f7ff f8be 	bl	8001fc0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a70      	ldr	r2, [pc, #448]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002e4e:	4b70      	ldr	r3, [pc, #448]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e50:	e001      	b.n	8002e56 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	496b      	ldr	r1, [pc, #428]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e5e:	428b      	cmp	r3, r1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002e62:	4b6b      	ldr	r3, [pc, #428]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e64:	e001      	b.n	8002e6a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	461a      	mov	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f7ff f898 	bl	8001fc0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0202 	orr.w	r2, r2, #2
 8002e9e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eae:	f000 809e 	beq.w	8002fee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a55      	ldr	r2, [pc, #340]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002ebc:	4b54      	ldr	r3, [pc, #336]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ebe:	e001      	b.n	8002ec4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4950      	ldr	r1, [pc, #320]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ed2:	e001      	b.n	8002ed8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002edc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eec:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002eee:	e07e      	b.n	8002fee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efe:	d10a      	bne.n	8002f16 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a38      	ldr	r2, [pc, #224]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f30:	e001      	b.n	8002f36 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f36:	330c      	adds	r3, #12
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f7ff f83e 	bl	8001fc0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a30      	ldr	r2, [pc, #192]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002f4e:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f50:	e001      	b.n	8002f56 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	492b      	ldr	r1, [pc, #172]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f5e:	428b      	cmp	r3, r1
 8002f60:	d101      	bne.n	8002f66 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f64:	e001      	b.n	8002f6a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6a:	f042 0202 	orr.w	r2, r2, #2
 8002f6e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	4619      	mov	r1, r3
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f7ff f819 	bl	8001fc0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d01e      	beq.n	8002fec <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a16      	ldr	r2, [pc, #88]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fba:	e001      	b.n	8002fc0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4911      	ldr	r1, [pc, #68]	; (800300c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d101      	bne.n	8002fd0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fce:	e001      	b.n	8002fd4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002fd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fd8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe8:	61da      	str	r2, [r3, #28]
 8002fea:	e000      	b.n	8002fee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002fec:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	080032bd 	.word	0x080032bd
 8003004:	080032d9 	.word	0x080032d9
 8003008:	08003411 	.word	0x08003411
 800300c:	40003800 	.word	0x40003800
 8003010:	40003400 	.word	0x40003400

08003014 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4aa2      	ldr	r2, [pc, #648]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800302e:	4ba2      	ldr	r3, [pc, #648]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003030:	e001      	b.n	8003036 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003032:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a9b      	ldr	r2, [pc, #620]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d101      	bne.n	8003050 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800304c:	4b9a      	ldr	r3, [pc, #616]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800304e:	e001      	b.n	8003054 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d004      	beq.n	800306c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 8099 	bne.w	800319e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d107      	bne.n	8003086 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fa05 	bl	8003490 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 faa8 	bl	80035f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d13a      	bne.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d035      	beq.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a7e      	ldr	r2, [pc, #504]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80030be:	4b7e      	ldr	r3, [pc, #504]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030c0:	e001      	b.n	80030c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80030c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4979      	ldr	r1, [pc, #484]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030ce:	428b      	cmp	r3, r1
 80030d0:	d101      	bne.n	80030d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80030d2:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030d4:	e001      	b.n	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80030d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f043 0202 	orr.w	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fcfe 	bl	8002b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	f040 80be 	bne.w	80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80b8 	beq.w	80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003146:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003152:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003154:	e001      	b.n	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4954      	ldr	r1, [pc, #336]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003162:	428b      	cmp	r3, r1
 8003164:	d101      	bne.n	800316a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003168:	e001      	b.n	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800316a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003172:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f043 0204 	orr.w	r2, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fcc0 	bl	8002b1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800319c:	e084      	b.n	80032a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d107      	bne.n	80031b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f99e 	bl	80034f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9dd 	bl	800358c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d12f      	bne.n	800323c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02a      	beq.n	800323c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2e      	ldr	r2, [pc, #184]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003202:	e001      	b.n	8003208 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4929      	ldr	r1, [pc, #164]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003210:	428b      	cmp	r3, r1
 8003212:	d101      	bne.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003216:	e001      	b.n	800321c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003220:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fc70 	bl	8002b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d131      	bne.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02c      	beq.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800325c:	e001      	b.n	8003262 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800325e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4912      	ldr	r1, [pc, #72]	; (80032b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800326a:	428b      	cmp	r3, r1
 800326c:	d101      	bne.n	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003270:	e001      	b.n	8003276 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003276:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800327a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800328a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fc3b 	bl	8002b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032a6:	e000      	b.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032a8:	bf00      	nop
}
 80032aa:	bf00      	nop
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40003800 	.word	0x40003800
 80032b8:	40003400 	.word	0x40003400

080032bc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7fe fa02 	bl	80016d4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 8084 	bne.w	80033f8 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d13c      	bne.n	8003374 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003308:	d006      	beq.n	8003318 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003314:	2b00      	cmp	r3, #0
 8003316:	d116      	bne.n	8003346 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3a      	ldr	r2, [pc, #232]	; (8003408 <I2SEx_TxRxDMACplt+0x130>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <I2SEx_TxRxDMACplt+0x4e>
 8003322:	4b3a      	ldr	r3, [pc, #232]	; (800340c <I2SEx_TxRxDMACplt+0x134>)
 8003324:	e001      	b.n	800332a <I2SEx_TxRxDMACplt+0x52>
 8003326:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <I2SEx_TxRxDMACplt+0x130>)
 8003332:	428b      	cmp	r3, r1
 8003334:	d101      	bne.n	800333a <I2SEx_TxRxDMACplt+0x62>
 8003336:	4b35      	ldr	r3, [pc, #212]	; (800340c <I2SEx_TxRxDMACplt+0x134>)
 8003338:	e001      	b.n	800333e <I2SEx_TxRxDMACplt+0x66>
 800333a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	e007      	b.n	8003356 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7fe f9f2 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d13c      	bne.n	80033f8 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d006      	beq.n	800339c <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003398:	2b00      	cmp	r3, #0
 800339a:	d108      	bne.n	80033ae <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0202 	bic.w	r2, r2, #2
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e015      	b.n	80033da <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <I2SEx_TxRxDMACplt+0x130>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <I2SEx_TxRxDMACplt+0xe4>
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <I2SEx_TxRxDMACplt+0x134>)
 80033ba:	e001      	b.n	80033c0 <I2SEx_TxRxDMACplt+0xe8>
 80033bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <I2SEx_TxRxDMACplt+0x130>)
 80033c8:	428b      	cmp	r3, r1
 80033ca:	d101      	bne.n	80033d0 <I2SEx_TxRxDMACplt+0xf8>
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <I2SEx_TxRxDMACplt+0x134>)
 80033ce:	e001      	b.n	80033d4 <I2SEx_TxRxDMACplt+0xfc>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	f022 0202 	bic.w	r2, r2, #2
 80033d8:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7fe f9b0 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7fe f9ad 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40003800 	.word	0x40003800
 800340c:	40003400 	.word	0x40003400

08003410 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0203 	bic.w	r2, r2, #3
 800342c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <I2SEx_TxRxDMAError+0x78>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <I2SEx_TxRxDMAError+0x2c>
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <I2SEx_TxRxDMAError+0x7c>)
 800343a:	e001      	b.n	8003440 <I2SEx_TxRxDMAError+0x30>
 800343c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4910      	ldr	r1, [pc, #64]	; (8003488 <I2SEx_TxRxDMAError+0x78>)
 8003448:	428b      	cmp	r3, r1
 800344a:	d101      	bne.n	8003450 <I2SEx_TxRxDMAError+0x40>
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <I2SEx_TxRxDMAError+0x7c>)
 800344e:	e001      	b.n	8003454 <I2SEx_TxRxDMAError+0x44>
 8003450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003454:	f022 0203 	bic.w	r2, r2, #3
 8003458:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f043 0208 	orr.w	r2, r3, #8
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff fb4e 	bl	8002b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40003800 	.word	0x40003800
 800348c:	40003400 	.word	0x40003400

08003490 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c99      	adds	r1, r3, #2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6251      	str	r1, [r2, #36]	; 0x24
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fe f937 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c99      	adds	r1, r3, #2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6251      	str	r1, [r2, #36]	; 0x24
 8003506:	8819      	ldrh	r1, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <I2SEx_TxISR_I2SExt+0x90>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <I2SEx_TxISR_I2SExt+0x22>
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <I2SEx_TxISR_I2SExt+0x94>)
 8003514:	e001      	b.n	800351a <I2SEx_TxISR_I2SExt+0x26>
 8003516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351a:	460a      	mov	r2, r1
 800351c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d121      	bne.n	800357a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <I2SEx_TxISR_I2SExt+0x90>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <I2SEx_TxISR_I2SExt+0x50>
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <I2SEx_TxISR_I2SExt+0x94>)
 8003542:	e001      	b.n	8003548 <I2SEx_TxISR_I2SExt+0x54>
 8003544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	490d      	ldr	r1, [pc, #52]	; (8003584 <I2SEx_TxISR_I2SExt+0x90>)
 8003550:	428b      	cmp	r3, r1
 8003552:	d101      	bne.n	8003558 <I2SEx_TxISR_I2SExt+0x64>
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <I2SEx_TxISR_I2SExt+0x94>)
 8003556:	e001      	b.n	800355c <I2SEx_TxISR_I2SExt+0x68>
 8003558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003560:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe f8ef 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40003800 	.word	0x40003800
 8003588:	40003400 	.word	0x40003400

0800358c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68d8      	ldr	r0, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	1c99      	adds	r1, r3, #2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80035a4:	b282      	uxth	r2, r0
 80035a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d113      	bne.n	80035e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe f8b8 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <I2SEx_RxISR_I2SExt+0x90>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <I2SEx_RxISR_I2SExt+0x16>
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <I2SEx_RxISR_I2SExt+0x94>)
 8003604:	e001      	b.n	800360a <I2SEx_RxISR_I2SExt+0x1a>
 8003606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360a:	68d8      	ldr	r0, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	1c99      	adds	r1, r3, #2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003616:	b282      	uxth	r2, r0
 8003618:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d121      	bne.n	8003676 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <I2SEx_RxISR_I2SExt+0x90>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <I2SEx_RxISR_I2SExt+0x50>
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <I2SEx_RxISR_I2SExt+0x94>)
 800363e:	e001      	b.n	8003644 <I2SEx_RxISR_I2SExt+0x54>
 8003640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	490d      	ldr	r1, [pc, #52]	; (8003680 <I2SEx_RxISR_I2SExt+0x90>)
 800364c:	428b      	cmp	r3, r1
 800364e:	d101      	bne.n	8003654 <I2SEx_RxISR_I2SExt+0x64>
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <I2SEx_RxISR_I2SExt+0x94>)
 8003652:	e001      	b.n	8003658 <I2SEx_RxISR_I2SExt+0x68>
 8003654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003658:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fe f871 	bl	8001758 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40003800 	.word	0x40003800
 8003684:	40003400 	.word	0x40003400

08003688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e25b      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d075      	beq.n	8003792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a6:	4ba3      	ldr	r3, [pc, #652]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d00c      	beq.n	80036cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4ba0      	ldr	r3, [pc, #640]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d112      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036be:	4b9d      	ldr	r3, [pc, #628]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	4b99      	ldr	r3, [pc, #612]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05b      	beq.n	8003790 <HAL_RCC_OscConfig+0x108>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d157      	bne.n	8003790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e236      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d106      	bne.n	80036fc <HAL_RCC_OscConfig+0x74>
 80036ee:	4b91      	ldr	r3, [pc, #580]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a90      	ldr	r2, [pc, #576]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e01d      	b.n	8003738 <HAL_RCC_OscConfig+0xb0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003704:	d10c      	bne.n	8003720 <HAL_RCC_OscConfig+0x98>
 8003706:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	4b88      	ldr	r3, [pc, #544]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a87      	ldr	r2, [pc, #540]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e00b      	b.n	8003738 <HAL_RCC_OscConfig+0xb0>
 8003720:	4b84      	ldr	r3, [pc, #528]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a83      	ldr	r2, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b81      	ldr	r3, [pc, #516]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a80      	ldr	r2, [pc, #512]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe fa72 	bl	8001c28 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003748:	f7fe fa6e 	bl	8001c28 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1fb      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b76      	ldr	r3, [pc, #472]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0xc0>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fa5e 	bl	8001c28 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003770:	f7fe fa5a 	bl	8001c28 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1e7      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0xe8>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d063      	beq.n	8003866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b62      	ldr	r3, [pc, #392]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d11c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	4b5c      	ldr	r3, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x152>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e1bb      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b56      	ldr	r3, [pc, #344]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4952      	ldr	r1, [pc, #328]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	e03a      	b.n	8003866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f8:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCC_OscConfig+0x2b0>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fe fa13 	bl	8001c28 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003806:	f7fe fa0f 	bl	8001c28 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e19c      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003824:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4940      	ldr	r1, [pc, #256]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x2b0>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe f9f2 	bl	8001c28 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003848:	f7fe f9ee 	bl	8001c28 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e17b      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d030      	beq.n	80038d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_RCC_OscConfig+0x2b4>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe f9d2 	bl	8001c28 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003888:	f7fe f9ce 	bl	8001c28 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e15b      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x200>
 80038a6:	e015      	b.n	80038d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x2b4>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fe f9bb 	bl	8001c28 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fe f9b7 	bl	8001c28 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e144      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a0 	beq.w	8003a22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x2b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d121      	bne.n	8003962 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x2b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_RCC_OscConfig+0x2b8>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe f97d 	bl	8001c28 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e011      	b.n	8003956 <HAL_RCC_OscConfig+0x2ce>
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	42470000 	.word	0x42470000
 800393c:	42470e80 	.word	0x42470e80
 8003940:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fe f970 	bl	8001c28 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0fd      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b81      	ldr	r3, [pc, #516]	; (8003b5c <HAL_RCC_OscConfig+0x4d4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d106      	bne.n	8003978 <HAL_RCC_OscConfig+0x2f0>
 800396a:	4b7d      	ldr	r3, [pc, #500]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a7c      	ldr	r2, [pc, #496]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x32a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x312>
 8003980:	4b77      	ldr	r3, [pc, #476]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a76      	ldr	r2, [pc, #472]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b74      	ldr	r3, [pc, #464]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a73      	ldr	r2, [pc, #460]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x32a>
 800399a:	4b71      	ldr	r3, [pc, #452]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a70      	ldr	r2, [pc, #448]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	4b6e      	ldr	r3, [pc, #440]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a6d      	ldr	r2, [pc, #436]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fe f935 	bl	8001c28 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fe f931 	bl	8001c28 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0bc      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x33a>
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe f91f 	bl	8001c28 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fe f91b 	bl	8001c28 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0a6      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	4b56      	ldr	r3, [pc, #344]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b52      	ldr	r3, [pc, #328]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a51      	ldr	r2, [pc, #324]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8092 	beq.w	8003b50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2c:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d05c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d141      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <HAL_RCC_OscConfig+0x4dc>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7fe f8ef 	bl	8001c28 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fe f8eb 	bl	8001c28 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e078      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	019b      	lsls	r3, r3, #6
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	4933      	ldr	r1, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a96:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCC_OscConfig+0x4dc>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f8c4 	bl	8001c28 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe f8c0 	bl	8001c28 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04d      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x41c>
 8003ac2:	e045      	b.n	8003b50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_RCC_OscConfig+0x4dc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fe f8ad 	bl	8001c28 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fe f8a9 	bl	8001c28 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e036      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x44a>
 8003af0:	e02e      	b.n	8003b50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e029      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_RCC_OscConfig+0x4d8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d115      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b26:	4013      	ands	r3, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	40023800 	.word	0x40023800
 8003b64:	42470060 	.word	0x42470060

08003b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0cc      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d90c      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b63      	ldr	r3, [pc, #396]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b8      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bbc:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a58      	ldr	r2, [pc, #352]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd4:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be0:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	494d      	ldr	r1, [pc, #308]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d044      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d119      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e07f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e06f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e067      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4934      	ldr	r1, [pc, #208]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c58:	f7fd ffe6 	bl	8001c28 <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fd ffe2 	bl	8001c28 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e04f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d20c      	bcs.n	8003cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e032      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4916      	ldr	r1, [pc, #88]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cee:	f000 f821 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	5cd3      	ldrb	r3, [r2, r3]
 8003d02:	fa21 f303 	lsr.w	r3, r1, r3
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd ff46 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023c00 	.word	0x40023c00
 8003d24:	40023800 	.word	0x40023800
 8003d28:	08004ef4 	.word	0x08004ef4
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	20000004 	.word	0x20000004

08003d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	2300      	movs	r3, #0
 8003d44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d007      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0x32>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d008      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x38>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 80b4 	bne.w	8003ec8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d62:	60bb      	str	r3, [r7, #8]
       break;
 8003d64:	e0b3      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d66:	4b5d      	ldr	r3, [pc, #372]	; (8003edc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d68:	60bb      	str	r3, [r7, #8]
      break;
 8003d6a:	e0b0      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d6c:	4b5a      	ldr	r3, [pc, #360]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d76:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04a      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea03 0501 	and.w	r5, r3, r1
 8003d98:	ea04 0602 	and.w	r6, r4, r2
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4632      	mov	r2, r6
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	0154      	lsls	r4, r2, #5
 8003daa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dae:	014b      	lsls	r3, r1, #5
 8003db0:	4619      	mov	r1, r3
 8003db2:	4622      	mov	r2, r4
 8003db4:	1b49      	subs	r1, r1, r5
 8003db6:	eb62 0206 	sbc.w	r2, r2, r6
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	0194      	lsls	r4, r2, #6
 8003dc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dc8:	018b      	lsls	r3, r1, #6
 8003dca:	1a5b      	subs	r3, r3, r1
 8003dcc:	eb64 0402 	sbc.w	r4, r4, r2
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	00e2      	lsls	r2, r4, #3
 8003dda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dde:	00d9      	lsls	r1, r3, #3
 8003de0:	460b      	mov	r3, r1
 8003de2:	4614      	mov	r4, r2
 8003de4:	195b      	adds	r3, r3, r5
 8003de6:	eb44 0406 	adc.w	r4, r4, r6
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	02a2      	lsls	r2, r4, #10
 8003df4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003df8:	0299      	lsls	r1, r3, #10
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4621      	mov	r1, r4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f04f 0400 	mov.w	r4, #0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	f7fc feaa 	bl	8000b64 <__aeabi_uldivmod>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e049      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e18:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	f04f 0400 	mov.w	r4, #0
 8003e22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	ea03 0501 	and.w	r5, r3, r1
 8003e2e:	ea04 0602 	and.w	r6, r4, r2
 8003e32:	4629      	mov	r1, r5
 8003e34:	4632      	mov	r2, r6
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	f04f 0400 	mov.w	r4, #0
 8003e3e:	0154      	lsls	r4, r2, #5
 8003e40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e44:	014b      	lsls	r3, r1, #5
 8003e46:	4619      	mov	r1, r3
 8003e48:	4622      	mov	r2, r4
 8003e4a:	1b49      	subs	r1, r1, r5
 8003e4c:	eb62 0206 	sbc.w	r2, r2, r6
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	f04f 0400 	mov.w	r4, #0
 8003e58:	0194      	lsls	r4, r2, #6
 8003e5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e5e:	018b      	lsls	r3, r1, #6
 8003e60:	1a5b      	subs	r3, r3, r1
 8003e62:	eb64 0402 	sbc.w	r4, r4, r2
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e74:	00d9      	lsls	r1, r3, #3
 8003e76:	460b      	mov	r3, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	195b      	adds	r3, r3, r5
 8003e7c:	eb44 0406 	adc.w	r4, r4, r6
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	02a2      	lsls	r2, r4, #10
 8003e8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e8e:	0299      	lsls	r1, r3, #10
 8003e90:	460b      	mov	r3, r1
 8003e92:	4614      	mov	r4, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	4621      	mov	r1, r4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f04f 0400 	mov.w	r4, #0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	f7fc fe5f 	bl	8000b64 <__aeabi_uldivmod>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eca:	60bb      	str	r3, [r7, #8]
      break;
 8003ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ece:	68bb      	ldr	r3, [r7, #8]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00f42400 	.word	0x00f42400

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d035      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f08:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fe8b 	bl	8001c28 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f16:	f7fd fe87 	bl	8001c28 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0b0      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f28:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	019a      	lsls	r2, r3, #6
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	071b      	lsls	r3, r3, #28
 8003f40:	4955      	ldr	r1, [pc, #340]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f48:	4b52      	ldr	r3, [pc, #328]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f4e:	f7fd fe6b 	bl	8001c28 <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f56:	f7fd fe67 	bl	8001c28 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e090      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8083 	beq.w	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a43      	ldr	r2, [pc, #268]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f9e:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a3e      	ldr	r2, [pc, #248]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003faa:	f7fd fe3d 	bl	8001c28 <HAL_GetTick>
 8003fae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fd fe39 	bl	8001c28 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e062      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd0:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d02f      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d028      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff8:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004004:	4a24      	ldr	r2, [pc, #144]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800400a:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d114      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004016:	f7fd fe07 	bl	8001c28 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fe03 	bl	8001c28 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e02a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	4b18      	ldr	r3, [pc, #96]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ee      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404c:	d10d      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	490d      	ldr	r1, [pc, #52]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]
 8004068:	e005      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004070:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004074:	6093      	str	r3, [r2, #8]
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004078:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	4905      	ldr	r1, [pc, #20]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004084:	4313      	orrs	r3, r2
 8004086:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	42470068 	.word	0x42470068
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	42470e40 	.word	0x42470e40

080040a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d13d      	bne.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ca:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d12f      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040d8:	617b      	str	r3, [r7, #20]
          break;
 80040da:	e02f      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e8:	d108      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e007      	b.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040fc:	4b13      	ldr	r3, [pc, #76]	; (800414c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	4a13      	ldr	r2, [pc, #76]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800410e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004126:	0f1b      	lsrs	r3, r3, #28
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	617b      	str	r3, [r7, #20]
          break;
 8004134:	e002      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
          break;
 800413a:	bf00      	nop
        }
      }
      break;
 800413c:	bf00      	nop
    }
  }
  return frequency;
 800413e:	697b      	ldr	r3, [r7, #20]
}
 8004140:	4618      	mov	r0, r3
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40023800 	.word	0x40023800
 8004150:	00bb8000 	.word	0x00bb8000
 8004154:	00f42400 	.word	0x00f42400

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4e0d      	ldr	r6, [pc, #52]	; (800419c <__libc_init_array+0x38>)
 8004168:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416a:	1ba4      	subs	r4, r4, r6
 800416c:	10a4      	asrs	r4, r4, #2
 800416e:	2500      	movs	r5, #0
 8004170:	42a5      	cmp	r5, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	4e0b      	ldr	r6, [pc, #44]	; (80041a4 <__libc_init_array+0x40>)
 8004176:	4c0c      	ldr	r4, [pc, #48]	; (80041a8 <__libc_init_array+0x44>)
 8004178:	f000 feb0 	bl	8004edc <_init>
 800417c:	1ba4      	subs	r4, r4, r6
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	2500      	movs	r5, #0
 8004182:	42a5      	cmp	r5, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800418c:	4798      	blx	r3
 800418e:	3501      	adds	r5, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004196:	4798      	blx	r3
 8004198:	3501      	adds	r5, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	080052e4 	.word	0x080052e4
 80041a0:	080052e4 	.word	0x080052e4
 80041a4:	080052e4 	.word	0x080052e4
 80041a8:	080052e8 	.word	0x080052e8

080041ac <malloc>:
 80041ac:	4b02      	ldr	r3, [pc, #8]	; (80041b8 <malloc+0xc>)
 80041ae:	4601      	mov	r1, r0
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f000 b861 	b.w	8004278 <_malloc_r>
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c

080041bc <free>:
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <free+0xc>)
 80041be:	4601      	mov	r1, r0
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	f000 b80b 	b.w	80041dc <_free_r>
 80041c6:	bf00      	nop
 80041c8:	2000000c 	.word	0x2000000c

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d045      	beq.n	8004270 <_free_r+0x94>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f000 f8ac 	bl	800434c <__malloc_lock>
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <_free_r+0x98>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	4610      	mov	r0, r2
 80041fa:	b933      	cbnz	r3, 800420a <_free_r+0x2e>
 80041fc:	6063      	str	r3, [r4, #4]
 80041fe:	6014      	str	r4, [r2, #0]
 8004200:	4628      	mov	r0, r5
 8004202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004206:	f000 b8a2 	b.w	800434e <__malloc_unlock>
 800420a:	42a3      	cmp	r3, r4
 800420c:	d90c      	bls.n	8004228 <_free_r+0x4c>
 800420e:	6821      	ldr	r1, [r4, #0]
 8004210:	1862      	adds	r2, r4, r1
 8004212:	4293      	cmp	r3, r2
 8004214:	bf04      	itt	eq
 8004216:	681a      	ldreq	r2, [r3, #0]
 8004218:	685b      	ldreq	r3, [r3, #4]
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	bf04      	itt	eq
 800421e:	1852      	addeq	r2, r2, r1
 8004220:	6022      	streq	r2, [r4, #0]
 8004222:	6004      	str	r4, [r0, #0]
 8004224:	e7ec      	b.n	8004200 <_free_r+0x24>
 8004226:	4613      	mov	r3, r2
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	b10a      	cbz	r2, 8004230 <_free_r+0x54>
 800422c:	42a2      	cmp	r2, r4
 800422e:	d9fa      	bls.n	8004226 <_free_r+0x4a>
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	1858      	adds	r0, r3, r1
 8004234:	42a0      	cmp	r0, r4
 8004236:	d10b      	bne.n	8004250 <_free_r+0x74>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	4401      	add	r1, r0
 800423c:	1858      	adds	r0, r3, r1
 800423e:	4282      	cmp	r2, r0
 8004240:	6019      	str	r1, [r3, #0]
 8004242:	d1dd      	bne.n	8004200 <_free_r+0x24>
 8004244:	6810      	ldr	r0, [r2, #0]
 8004246:	6852      	ldr	r2, [r2, #4]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	4401      	add	r1, r0
 800424c:	6019      	str	r1, [r3, #0]
 800424e:	e7d7      	b.n	8004200 <_free_r+0x24>
 8004250:	d902      	bls.n	8004258 <_free_r+0x7c>
 8004252:	230c      	movs	r3, #12
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	e7d3      	b.n	8004200 <_free_r+0x24>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	1821      	adds	r1, r4, r0
 800425c:	428a      	cmp	r2, r1
 800425e:	bf04      	itt	eq
 8004260:	6811      	ldreq	r1, [r2, #0]
 8004262:	6852      	ldreq	r2, [r2, #4]
 8004264:	6062      	str	r2, [r4, #4]
 8004266:	bf04      	itt	eq
 8004268:	1809      	addeq	r1, r1, r0
 800426a:	6021      	streq	r1, [r4, #0]
 800426c:	605c      	str	r4, [r3, #4]
 800426e:	e7c7      	b.n	8004200 <_free_r+0x24>
 8004270:	bd38      	pop	{r3, r4, r5, pc}
 8004272:	bf00      	nop
 8004274:	2001f87c 	.word	0x2001f87c

08004278 <_malloc_r>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	1ccd      	adds	r5, r1, #3
 800427c:	f025 0503 	bic.w	r5, r5, #3
 8004280:	3508      	adds	r5, #8
 8004282:	2d0c      	cmp	r5, #12
 8004284:	bf38      	it	cc
 8004286:	250c      	movcc	r5, #12
 8004288:	2d00      	cmp	r5, #0
 800428a:	4606      	mov	r6, r0
 800428c:	db01      	blt.n	8004292 <_malloc_r+0x1a>
 800428e:	42a9      	cmp	r1, r5
 8004290:	d903      	bls.n	800429a <_malloc_r+0x22>
 8004292:	230c      	movs	r3, #12
 8004294:	6033      	str	r3, [r6, #0]
 8004296:	2000      	movs	r0, #0
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	f000 f857 	bl	800434c <__malloc_lock>
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <_malloc_r+0xac>)
 80042a0:	6814      	ldr	r4, [r2, #0]
 80042a2:	4621      	mov	r1, r4
 80042a4:	b991      	cbnz	r1, 80042cc <_malloc_r+0x54>
 80042a6:	4c20      	ldr	r4, [pc, #128]	; (8004328 <_malloc_r+0xb0>)
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	b91b      	cbnz	r3, 80042b4 <_malloc_r+0x3c>
 80042ac:	4630      	mov	r0, r6
 80042ae:	f000 f83d 	bl	800432c <_sbrk_r>
 80042b2:	6020      	str	r0, [r4, #0]
 80042b4:	4629      	mov	r1, r5
 80042b6:	4630      	mov	r0, r6
 80042b8:	f000 f838 	bl	800432c <_sbrk_r>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d124      	bne.n	800430a <_malloc_r+0x92>
 80042c0:	230c      	movs	r3, #12
 80042c2:	6033      	str	r3, [r6, #0]
 80042c4:	4630      	mov	r0, r6
 80042c6:	f000 f842 	bl	800434e <__malloc_unlock>
 80042ca:	e7e4      	b.n	8004296 <_malloc_r+0x1e>
 80042cc:	680b      	ldr	r3, [r1, #0]
 80042ce:	1b5b      	subs	r3, r3, r5
 80042d0:	d418      	bmi.n	8004304 <_malloc_r+0x8c>
 80042d2:	2b0b      	cmp	r3, #11
 80042d4:	d90f      	bls.n	80042f6 <_malloc_r+0x7e>
 80042d6:	600b      	str	r3, [r1, #0]
 80042d8:	50cd      	str	r5, [r1, r3]
 80042da:	18cc      	adds	r4, r1, r3
 80042dc:	4630      	mov	r0, r6
 80042de:	f000 f836 	bl	800434e <__malloc_unlock>
 80042e2:	f104 000b 	add.w	r0, r4, #11
 80042e6:	1d23      	adds	r3, r4, #4
 80042e8:	f020 0007 	bic.w	r0, r0, #7
 80042ec:	1ac3      	subs	r3, r0, r3
 80042ee:	d0d3      	beq.n	8004298 <_malloc_r+0x20>
 80042f0:	425a      	negs	r2, r3
 80042f2:	50e2      	str	r2, [r4, r3]
 80042f4:	e7d0      	b.n	8004298 <_malloc_r+0x20>
 80042f6:	428c      	cmp	r4, r1
 80042f8:	684b      	ldr	r3, [r1, #4]
 80042fa:	bf16      	itet	ne
 80042fc:	6063      	strne	r3, [r4, #4]
 80042fe:	6013      	streq	r3, [r2, #0]
 8004300:	460c      	movne	r4, r1
 8004302:	e7eb      	b.n	80042dc <_malloc_r+0x64>
 8004304:	460c      	mov	r4, r1
 8004306:	6849      	ldr	r1, [r1, #4]
 8004308:	e7cc      	b.n	80042a4 <_malloc_r+0x2c>
 800430a:	1cc4      	adds	r4, r0, #3
 800430c:	f024 0403 	bic.w	r4, r4, #3
 8004310:	42a0      	cmp	r0, r4
 8004312:	d005      	beq.n	8004320 <_malloc_r+0xa8>
 8004314:	1a21      	subs	r1, r4, r0
 8004316:	4630      	mov	r0, r6
 8004318:	f000 f808 	bl	800432c <_sbrk_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d0cf      	beq.n	80042c0 <_malloc_r+0x48>
 8004320:	6025      	str	r5, [r4, #0]
 8004322:	e7db      	b.n	80042dc <_malloc_r+0x64>
 8004324:	2001f87c 	.word	0x2001f87c
 8004328:	2001f880 	.word	0x2001f880

0800432c <_sbrk_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4c06      	ldr	r4, [pc, #24]	; (8004348 <_sbrk_r+0x1c>)
 8004330:	2300      	movs	r3, #0
 8004332:	4605      	mov	r5, r0
 8004334:	4608      	mov	r0, r1
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	f7fd fba4 	bl	8001a84 <_sbrk>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_sbrk_r+0x1a>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	b103      	cbz	r3, 8004346 <_sbrk_r+0x1a>
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	2001f9c8 	.word	0x2001f9c8

0800434c <__malloc_lock>:
 800434c:	4770      	bx	lr

0800434e <__malloc_unlock>:
 800434e:	4770      	bx	lr

08004350 <fmax>:
 8004350:	b508      	push	{r3, lr}
 8004352:	ed2d 8b04 	vpush	{d8-d9}
 8004356:	eeb0 8a40 	vmov.f32	s16, s0
 800435a:	eef0 8a60 	vmov.f32	s17, s1
 800435e:	eeb0 9a41 	vmov.f32	s18, s2
 8004362:	eef0 9a61 	vmov.f32	s19, s3
 8004366:	f000 f841 	bl	80043ec <__fpclassifyd>
 800436a:	b168      	cbz	r0, 8004388 <fmax+0x38>
 800436c:	eeb0 0a49 	vmov.f32	s0, s18
 8004370:	eef0 0a69 	vmov.f32	s1, s19
 8004374:	f000 f83a 	bl	80043ec <__fpclassifyd>
 8004378:	b150      	cbz	r0, 8004390 <fmax+0x40>
 800437a:	ec53 2b19 	vmov	r2, r3, d9
 800437e:	ec51 0b18 	vmov	r0, r1, d8
 8004382:	f7fc fb6d 	bl	8000a60 <__aeabi_dcmpgt>
 8004386:	b918      	cbnz	r0, 8004390 <fmax+0x40>
 8004388:	eeb0 8a49 	vmov.f32	s16, s18
 800438c:	eef0 8a69 	vmov.f32	s17, s19
 8004390:	eeb0 0a48 	vmov.f32	s0, s16
 8004394:	eef0 0a68 	vmov.f32	s1, s17
 8004398:	ecbd 8b04 	vpop	{d8-d9}
 800439c:	bd08      	pop	{r3, pc}

0800439e <fmin>:
 800439e:	b508      	push	{r3, lr}
 80043a0:	ed2d 8b04 	vpush	{d8-d9}
 80043a4:	eeb0 8a40 	vmov.f32	s16, s0
 80043a8:	eef0 8a60 	vmov.f32	s17, s1
 80043ac:	eeb0 9a41 	vmov.f32	s18, s2
 80043b0:	eef0 9a61 	vmov.f32	s19, s3
 80043b4:	f000 f81a 	bl	80043ec <__fpclassifyd>
 80043b8:	b168      	cbz	r0, 80043d6 <fmin+0x38>
 80043ba:	eeb0 0a49 	vmov.f32	s0, s18
 80043be:	eef0 0a69 	vmov.f32	s1, s19
 80043c2:	f000 f813 	bl	80043ec <__fpclassifyd>
 80043c6:	b150      	cbz	r0, 80043de <fmin+0x40>
 80043c8:	ec53 2b19 	vmov	r2, r3, d9
 80043cc:	ec51 0b18 	vmov	r0, r1, d8
 80043d0:	f7fc fb28 	bl	8000a24 <__aeabi_dcmplt>
 80043d4:	b918      	cbnz	r0, 80043de <fmin+0x40>
 80043d6:	eeb0 8a49 	vmov.f32	s16, s18
 80043da:	eef0 8a69 	vmov.f32	s17, s19
 80043de:	eeb0 0a48 	vmov.f32	s0, s16
 80043e2:	eef0 0a68 	vmov.f32	s1, s17
 80043e6:	ecbd 8b04 	vpop	{d8-d9}
 80043ea:	bd08      	pop	{r3, pc}

080043ec <__fpclassifyd>:
 80043ec:	ec51 0b10 	vmov	r0, r1, d0
 80043f0:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 80043f4:	b510      	push	{r4, lr}
 80043f6:	460b      	mov	r3, r1
 80043f8:	d01b      	beq.n	8004432 <__fpclassifyd+0x46>
 80043fa:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80043fe:	490f      	ldr	r1, [pc, #60]	; (800443c <__fpclassifyd+0x50>)
 8004400:	428c      	cmp	r4, r1
 8004402:	d910      	bls.n	8004426 <__fpclassifyd+0x3a>
 8004404:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8004408:	490c      	ldr	r1, [pc, #48]	; (800443c <__fpclassifyd+0x50>)
 800440a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800440e:	428b      	cmp	r3, r1
 8004410:	d909      	bls.n	8004426 <__fpclassifyd+0x3a>
 8004412:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004416:	d308      	bcc.n	800442a <__fpclassifyd+0x3e>
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <__fpclassifyd+0x54>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d107      	bne.n	800442e <__fpclassifyd+0x42>
 800441e:	fab0 f080 	clz	r0, r0
 8004422:	0940      	lsrs	r0, r0, #5
 8004424:	bd10      	pop	{r4, pc}
 8004426:	2004      	movs	r0, #4
 8004428:	e7fc      	b.n	8004424 <__fpclassifyd+0x38>
 800442a:	2003      	movs	r0, #3
 800442c:	e7fa      	b.n	8004424 <__fpclassifyd+0x38>
 800442e:	2000      	movs	r0, #0
 8004430:	e7f8      	b.n	8004424 <__fpclassifyd+0x38>
 8004432:	2800      	cmp	r0, #0
 8004434:	d1e6      	bne.n	8004404 <__fpclassifyd+0x18>
 8004436:	2002      	movs	r0, #2
 8004438:	e7f4      	b.n	8004424 <__fpclassifyd+0x38>
 800443a:	bf00      	nop
 800443c:	7fdfffff 	.word	0x7fdfffff
 8004440:	7ff00000 	.word	0x7ff00000

08004444 <floorf>:
 8004444:	ee10 3a10 	vmov	r3, s0
 8004448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800444c:	0dca      	lsrs	r2, r1, #23
 800444e:	3a7f      	subs	r2, #127	; 0x7f
 8004450:	2a16      	cmp	r2, #22
 8004452:	dc2a      	bgt.n	80044aa <floorf+0x66>
 8004454:	2a00      	cmp	r2, #0
 8004456:	da11      	bge.n	800447c <floorf+0x38>
 8004458:	eddf 7a18 	vldr	s15, [pc, #96]	; 80044bc <floorf+0x78>
 800445c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004460:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	dd05      	ble.n	8004476 <floorf+0x32>
 800446a:	2b00      	cmp	r3, #0
 800446c:	da23      	bge.n	80044b6 <floorf+0x72>
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <floorf+0x7c>)
 8004470:	2900      	cmp	r1, #0
 8004472:	bf18      	it	ne
 8004474:	4613      	movne	r3, r2
 8004476:	ee00 3a10 	vmov	s0, r3
 800447a:	4770      	bx	lr
 800447c:	4911      	ldr	r1, [pc, #68]	; (80044c4 <floorf+0x80>)
 800447e:	4111      	asrs	r1, r2
 8004480:	420b      	tst	r3, r1
 8004482:	d0fa      	beq.n	800447a <floorf+0x36>
 8004484:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80044bc <floorf+0x78>
 8004488:	ee30 0a27 	vadd.f32	s0, s0, s15
 800448c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	ddef      	ble.n	8004476 <floorf+0x32>
 8004496:	2b00      	cmp	r3, #0
 8004498:	bfbe      	ittt	lt
 800449a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800449e:	fa40 f202 	asrlt.w	r2, r0, r2
 80044a2:	189b      	addlt	r3, r3, r2
 80044a4:	ea23 0301 	bic.w	r3, r3, r1
 80044a8:	e7e5      	b.n	8004476 <floorf+0x32>
 80044aa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80044ae:	d3e4      	bcc.n	800447a <floorf+0x36>
 80044b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80044b4:	4770      	bx	lr
 80044b6:	2300      	movs	r3, #0
 80044b8:	e7dd      	b.n	8004476 <floorf+0x32>
 80044ba:	bf00      	nop
 80044bc:	7149f2ca 	.word	0x7149f2ca
 80044c0:	bf800000 	.word	0xbf800000
 80044c4:	007fffff 	.word	0x007fffff

080044c8 <sinf>:
 80044c8:	ee10 3a10 	vmov	r3, s0
 80044cc:	b507      	push	{r0, r1, r2, lr}
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <sinf+0x7c>)
 80044d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	4293      	cmp	r3, r2
 80044d6:	dc05      	bgt.n	80044e4 <sinf+0x1c>
 80044d8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004548 <sinf+0x80>
 80044dc:	2000      	movs	r0, #0
 80044de:	f000 fc41 	bl	8004d64 <__kernel_sinf>
 80044e2:	e004      	b.n	80044ee <sinf+0x26>
 80044e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80044e8:	db04      	blt.n	80044f4 <sinf+0x2c>
 80044ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80044ee:	b003      	add	sp, #12
 80044f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80044f4:	4668      	mov	r0, sp
 80044f6:	f000 f829 	bl	800454c <__ieee754_rem_pio2f>
 80044fa:	f000 0003 	and.w	r0, r0, #3
 80044fe:	2801      	cmp	r0, #1
 8004500:	d008      	beq.n	8004514 <sinf+0x4c>
 8004502:	2802      	cmp	r0, #2
 8004504:	d00d      	beq.n	8004522 <sinf+0x5a>
 8004506:	b9b0      	cbnz	r0, 8004536 <sinf+0x6e>
 8004508:	2001      	movs	r0, #1
 800450a:	eddd 0a01 	vldr	s1, [sp, #4]
 800450e:	ed9d 0a00 	vldr	s0, [sp]
 8004512:	e7e4      	b.n	80044de <sinf+0x16>
 8004514:	eddd 0a01 	vldr	s1, [sp, #4]
 8004518:	ed9d 0a00 	vldr	s0, [sp]
 800451c:	f000 f942 	bl	80047a4 <__kernel_cosf>
 8004520:	e7e5      	b.n	80044ee <sinf+0x26>
 8004522:	2001      	movs	r0, #1
 8004524:	eddd 0a01 	vldr	s1, [sp, #4]
 8004528:	ed9d 0a00 	vldr	s0, [sp]
 800452c:	f000 fc1a 	bl	8004d64 <__kernel_sinf>
 8004530:	eeb1 0a40 	vneg.f32	s0, s0
 8004534:	e7db      	b.n	80044ee <sinf+0x26>
 8004536:	eddd 0a01 	vldr	s1, [sp, #4]
 800453a:	ed9d 0a00 	vldr	s0, [sp]
 800453e:	f000 f931 	bl	80047a4 <__kernel_cosf>
 8004542:	e7f5      	b.n	8004530 <sinf+0x68>
 8004544:	3f490fd8 	.word	0x3f490fd8
 8004548:	00000000 	.word	0x00000000

0800454c <__ieee754_rem_pio2f>:
 800454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454e:	ee10 6a10 	vmov	r6, s0
 8004552:	4b86      	ldr	r3, [pc, #536]	; (800476c <__ieee754_rem_pio2f+0x220>)
 8004554:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8004558:	429c      	cmp	r4, r3
 800455a:	b087      	sub	sp, #28
 800455c:	4605      	mov	r5, r0
 800455e:	dc05      	bgt.n	800456c <__ieee754_rem_pio2f+0x20>
 8004560:	2300      	movs	r3, #0
 8004562:	ed85 0a00 	vstr	s0, [r5]
 8004566:	6043      	str	r3, [r0, #4]
 8004568:	2000      	movs	r0, #0
 800456a:	e020      	b.n	80045ae <__ieee754_rem_pio2f+0x62>
 800456c:	4b80      	ldr	r3, [pc, #512]	; (8004770 <__ieee754_rem_pio2f+0x224>)
 800456e:	429c      	cmp	r4, r3
 8004570:	dc38      	bgt.n	80045e4 <__ieee754_rem_pio2f+0x98>
 8004572:	2e00      	cmp	r6, #0
 8004574:	f024 040f 	bic.w	r4, r4, #15
 8004578:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004774 <__ieee754_rem_pio2f+0x228>
 800457c:	4b7e      	ldr	r3, [pc, #504]	; (8004778 <__ieee754_rem_pio2f+0x22c>)
 800457e:	dd18      	ble.n	80045b2 <__ieee754_rem_pio2f+0x66>
 8004580:	429c      	cmp	r4, r3
 8004582:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004586:	bf09      	itett	eq
 8004588:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800477c <__ieee754_rem_pio2f+0x230>
 800458c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004780 <__ieee754_rem_pio2f+0x234>
 8004590:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004594:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004784 <__ieee754_rem_pio2f+0x238>
 8004598:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800459c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045a0:	edc0 6a00 	vstr	s13, [r0]
 80045a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80045ac:	2001      	movs	r0, #1
 80045ae:	b007      	add	sp, #28
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b2:	429c      	cmp	r4, r3
 80045b4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80045b8:	bf09      	itett	eq
 80045ba:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800477c <__ieee754_rem_pio2f+0x230>
 80045be:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004780 <__ieee754_rem_pio2f+0x234>
 80045c2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80045c6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004784 <__ieee754_rem_pio2f+0x238>
 80045ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 80045ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045d2:	edc0 6a00 	vstr	s13, [r0]
 80045d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045da:	edc0 7a01 	vstr	s15, [r0, #4]
 80045de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e2:	e7e4      	b.n	80045ae <__ieee754_rem_pio2f+0x62>
 80045e4:	4b68      	ldr	r3, [pc, #416]	; (8004788 <__ieee754_rem_pio2f+0x23c>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	dc71      	bgt.n	80046ce <__ieee754_rem_pio2f+0x182>
 80045ea:	f000 fc03 	bl	8004df4 <fabsf>
 80045ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800478c <__ieee754_rem_pio2f+0x240>
 80045f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80045f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80045fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004602:	ee17 0a90 	vmov	r0, s15
 8004606:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004774 <__ieee754_rem_pio2f+0x228>
 800460a:	eeb1 7a46 	vneg.f32	s14, s12
 800460e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004612:	281f      	cmp	r0, #31
 8004614:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004780 <__ieee754_rem_pio2f+0x234>
 8004618:	ee66 7a27 	vmul.f32	s15, s12, s15
 800461c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004620:	ee16 3a90 	vmov	r3, s13
 8004624:	dc1c      	bgt.n	8004660 <__ieee754_rem_pio2f+0x114>
 8004626:	1e47      	subs	r7, r0, #1
 8004628:	4959      	ldr	r1, [pc, #356]	; (8004790 <__ieee754_rem_pio2f+0x244>)
 800462a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800462e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8004632:	428a      	cmp	r2, r1
 8004634:	d014      	beq.n	8004660 <__ieee754_rem_pio2f+0x114>
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	ed95 7a00 	vldr	s14, [r5]
 800463c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004640:	2e00      	cmp	r6, #0
 8004642:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004646:	ed85 0a01 	vstr	s0, [r5, #4]
 800464a:	dab0      	bge.n	80045ae <__ieee754_rem_pio2f+0x62>
 800464c:	eeb1 7a47 	vneg.f32	s14, s14
 8004650:	eeb1 0a40 	vneg.f32	s0, s0
 8004654:	ed85 7a00 	vstr	s14, [r5]
 8004658:	ed85 0a01 	vstr	s0, [r5, #4]
 800465c:	4240      	negs	r0, r0
 800465e:	e7a6      	b.n	80045ae <__ieee754_rem_pio2f+0x62>
 8004660:	15e4      	asrs	r4, r4, #23
 8004662:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004666:	1aa2      	subs	r2, r4, r2
 8004668:	2a08      	cmp	r2, #8
 800466a:	dde4      	ble.n	8004636 <__ieee754_rem_pio2f+0xea>
 800466c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800477c <__ieee754_rem_pio2f+0x230>
 8004670:	eef0 6a40 	vmov.f32	s13, s0
 8004674:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004678:	ee30 0a66 	vsub.f32	s0, s0, s13
 800467c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004680:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004784 <__ieee754_rem_pio2f+0x238>
 8004684:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8004688:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800468c:	eef0 7a40 	vmov.f32	s15, s0
 8004690:	ee15 3a90 	vmov	r3, s11
 8004694:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004698:	1aa4      	subs	r4, r4, r2
 800469a:	2c19      	cmp	r4, #25
 800469c:	dc04      	bgt.n	80046a8 <__ieee754_rem_pio2f+0x15c>
 800469e:	edc5 5a00 	vstr	s11, [r5]
 80046a2:	eeb0 0a66 	vmov.f32	s0, s13
 80046a6:	e7c7      	b.n	8004638 <__ieee754_rem_pio2f+0xec>
 80046a8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004794 <__ieee754_rem_pio2f+0x248>
 80046ac:	eeb0 0a66 	vmov.f32	s0, s13
 80046b0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80046b4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80046b8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80046bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004798 <__ieee754_rem_pio2f+0x24c>
 80046c0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80046c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80046c8:	ed85 7a00 	vstr	s14, [r5]
 80046cc:	e7b4      	b.n	8004638 <__ieee754_rem_pio2f+0xec>
 80046ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80046d2:	db06      	blt.n	80046e2 <__ieee754_rem_pio2f+0x196>
 80046d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80046d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80046dc:	edc0 7a00 	vstr	s15, [r0]
 80046e0:	e742      	b.n	8004568 <__ieee754_rem_pio2f+0x1c>
 80046e2:	15e2      	asrs	r2, r4, #23
 80046e4:	3a86      	subs	r2, #134	; 0x86
 80046e6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80046f2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800479c <__ieee754_rem_pio2f+0x250>
 80046f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80046fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046fe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004702:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004706:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800470a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800470e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004712:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004716:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800471a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	edcd 7a05 	vstr	s15, [sp, #20]
 8004726:	d11e      	bne.n	8004766 <__ieee754_rem_pio2f+0x21a>
 8004728:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2302      	movne	r3, #2
 8004736:	491a      	ldr	r1, [pc, #104]	; (80047a0 <__ieee754_rem_pio2f+0x254>)
 8004738:	9101      	str	r1, [sp, #4]
 800473a:	2102      	movs	r1, #2
 800473c:	9100      	str	r1, [sp, #0]
 800473e:	a803      	add	r0, sp, #12
 8004740:	4629      	mov	r1, r5
 8004742:	f000 f88d 	bl	8004860 <__kernel_rem_pio2f>
 8004746:	2e00      	cmp	r6, #0
 8004748:	f6bf af31 	bge.w	80045ae <__ieee754_rem_pio2f+0x62>
 800474c:	edd5 7a00 	vldr	s15, [r5]
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	edc5 7a00 	vstr	s15, [r5]
 8004758:	edd5 7a01 	vldr	s15, [r5, #4]
 800475c:	eef1 7a67 	vneg.f32	s15, s15
 8004760:	edc5 7a01 	vstr	s15, [r5, #4]
 8004764:	e77a      	b.n	800465c <__ieee754_rem_pio2f+0x110>
 8004766:	2303      	movs	r3, #3
 8004768:	e7e5      	b.n	8004736 <__ieee754_rem_pio2f+0x1ea>
 800476a:	bf00      	nop
 800476c:	3f490fd8 	.word	0x3f490fd8
 8004770:	4016cbe3 	.word	0x4016cbe3
 8004774:	3fc90f80 	.word	0x3fc90f80
 8004778:	3fc90fd0 	.word	0x3fc90fd0
 800477c:	37354400 	.word	0x37354400
 8004780:	37354443 	.word	0x37354443
 8004784:	2e85a308 	.word	0x2e85a308
 8004788:	43490f80 	.word	0x43490f80
 800478c:	3f22f984 	.word	0x3f22f984
 8004790:	08004f0c 	.word	0x08004f0c
 8004794:	2e85a300 	.word	0x2e85a300
 8004798:	248d3132 	.word	0x248d3132
 800479c:	43800000 	.word	0x43800000
 80047a0:	08004f8c 	.word	0x08004f8c

080047a4 <__kernel_cosf>:
 80047a4:	ee10 3a10 	vmov	r3, s0
 80047a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80047b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b4:	da05      	bge.n	80047c2 <__kernel_cosf+0x1e>
 80047b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80047ba:	ee17 2a90 	vmov	r2, s15
 80047be:	2a00      	cmp	r2, #0
 80047c0:	d03b      	beq.n	800483a <__kernel_cosf+0x96>
 80047c2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80047c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004840 <__kernel_cosf+0x9c>
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <__kernel_cosf+0xa0>)
 80047d0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80047d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004848 <__kernel_cosf+0xa4>
 80047d8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80047dc:	4293      	cmp	r3, r2
 80047de:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800484c <__kernel_cosf+0xa8>
 80047e2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80047e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004850 <__kernel_cosf+0xac>
 80047ea:	eea5 7a86 	vfma.f32	s14, s11, s12
 80047ee:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004854 <__kernel_cosf+0xb0>
 80047f2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80047f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004858 <__kernel_cosf+0xb4>
 80047fa:	eea5 7a86 	vfma.f32	s14, s11, s12
 80047fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004802:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004806:	eee6 0a07 	vfma.f32	s1, s12, s14
 800480a:	dc04      	bgt.n	8004816 <__kernel_cosf+0x72>
 800480c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8004810:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004814:	4770      	bx	lr
 8004816:	4a11      	ldr	r2, [pc, #68]	; (800485c <__kernel_cosf+0xb8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	bfda      	itte	le
 800481c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004820:	ee07 3a10 	vmovle	s14, r3
 8004824:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8004828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800482c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004830:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004834:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004838:	4770      	bx	lr
 800483a:	eeb0 0a66 	vmov.f32	s0, s13
 800483e:	4770      	bx	lr
 8004840:	ad47d74e 	.word	0xad47d74e
 8004844:	3e999999 	.word	0x3e999999
 8004848:	310f74f6 	.word	0x310f74f6
 800484c:	b493f27c 	.word	0xb493f27c
 8004850:	37d00d01 	.word	0x37d00d01
 8004854:	bab60b61 	.word	0xbab60b61
 8004858:	3d2aaaab 	.word	0x3d2aaaab
 800485c:	3f480000 	.word	0x3f480000

08004860 <__kernel_rem_pio2f>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	ed2d 8b04 	vpush	{d8-d9}
 8004868:	b0d7      	sub	sp, #348	; 0x15c
 800486a:	469b      	mov	fp, r3
 800486c:	460e      	mov	r6, r1
 800486e:	4bbe      	ldr	r3, [pc, #760]	; (8004b68 <__kernel_rem_pio2f+0x308>)
 8004870:	9964      	ldr	r1, [sp, #400]	; 0x190
 8004872:	9002      	str	r0, [sp, #8]
 8004874:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8004878:	9865      	ldr	r0, [sp, #404]	; 0x194
 800487a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8004b78 <__kernel_rem_pio2f+0x318>
 800487e:	1ed1      	subs	r1, r2, #3
 8004880:	2308      	movs	r3, #8
 8004882:	fb91 f1f3 	sdiv	r1, r1, r3
 8004886:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800488a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800488e:	1c4c      	adds	r4, r1, #1
 8004890:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8004894:	eba1 050a 	sub.w	r5, r1, sl
 8004898:	aa1a      	add	r2, sp, #104	; 0x68
 800489a:	eb09 070a 	add.w	r7, r9, sl
 800489e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80048a2:	4696      	mov	lr, r2
 80048a4:	2300      	movs	r3, #0
 80048a6:	42bb      	cmp	r3, r7
 80048a8:	dd0f      	ble.n	80048ca <__kernel_rem_pio2f+0x6a>
 80048aa:	af42      	add	r7, sp, #264	; 0x108
 80048ac:	2200      	movs	r2, #0
 80048ae:	454a      	cmp	r2, r9
 80048b0:	dc27      	bgt.n	8004902 <__kernel_rem_pio2f+0xa2>
 80048b2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80048b6:	eb0b 0302 	add.w	r3, fp, r2
 80048ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80048be:	9d02      	ldr	r5, [sp, #8]
 80048c0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8004b78 <__kernel_rem_pio2f+0x318>
 80048c4:	f04f 0c00 	mov.w	ip, #0
 80048c8:	e015      	b.n	80048f6 <__kernel_rem_pio2f+0x96>
 80048ca:	42dd      	cmn	r5, r3
 80048cc:	bf5d      	ittte	pl
 80048ce:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80048d2:	ee07 2a90 	vmovpl	s15, r2
 80048d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80048da:	eef0 7a47 	vmovmi.f32	s15, s14
 80048de:	ecee 7a01 	vstmia	lr!, {s15}
 80048e2:	3301      	adds	r3, #1
 80048e4:	e7df      	b.n	80048a6 <__kernel_rem_pio2f+0x46>
 80048e6:	ecf5 6a01 	vldmia	r5!, {s13}
 80048ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80048ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80048f2:	f10c 0c01 	add.w	ip, ip, #1
 80048f6:	45d4      	cmp	ip, sl
 80048f8:	ddf5      	ble.n	80048e6 <__kernel_rem_pio2f+0x86>
 80048fa:	ece7 7a01 	vstmia	r7!, {s15}
 80048fe:	3201      	adds	r2, #1
 8004900:	e7d5      	b.n	80048ae <__kernel_rem_pio2f+0x4e>
 8004902:	ab06      	add	r3, sp, #24
 8004904:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8004b74 <__kernel_rem_pio2f+0x314>
 800490e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8004b70 <__kernel_rem_pio2f+0x310>
 8004912:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004916:	9303      	str	r3, [sp, #12]
 8004918:	464d      	mov	r5, r9
 800491a:	ab56      	add	r3, sp, #344	; 0x158
 800491c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8004920:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004924:	3f01      	subs	r7, #1
 8004926:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800492a:	00bf      	lsls	r7, r7, #2
 800492c:	ab56      	add	r3, sp, #344	; 0x158
 800492e:	19da      	adds	r2, r3, r7
 8004930:	3a4c      	subs	r2, #76	; 0x4c
 8004932:	2300      	movs	r3, #0
 8004934:	1ae9      	subs	r1, r5, r3
 8004936:	2900      	cmp	r1, #0
 8004938:	dc4c      	bgt.n	80049d4 <__kernel_rem_pio2f+0x174>
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fa62 	bl	8004e04 <scalbnf>
 8004940:	eeb0 8a40 	vmov.f32	s16, s0
 8004944:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004948:	ee28 0a00 	vmul.f32	s0, s16, s0
 800494c:	f7ff fd7a 	bl	8004444 <floorf>
 8004950:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004954:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004958:	2c00      	cmp	r4, #0
 800495a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800495e:	edcd 7a01 	vstr	s15, [sp, #4]
 8004962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004966:	ee38 8a67 	vsub.f32	s16, s16, s15
 800496a:	dd48      	ble.n	80049fe <__kernel_rem_pio2f+0x19e>
 800496c:	1e69      	subs	r1, r5, #1
 800496e:	ab06      	add	r3, sp, #24
 8004970:	f1c4 0008 	rsb	r0, r4, #8
 8004974:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8004978:	9a01      	ldr	r2, [sp, #4]
 800497a:	fa4c f300 	asr.w	r3, ip, r0
 800497e:	441a      	add	r2, r3
 8004980:	4083      	lsls	r3, r0
 8004982:	9201      	str	r2, [sp, #4]
 8004984:	ebac 0203 	sub.w	r2, ip, r3
 8004988:	ab06      	add	r3, sp, #24
 800498a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800498e:	f1c4 0307 	rsb	r3, r4, #7
 8004992:	fa42 f803 	asr.w	r8, r2, r3
 8004996:	f1b8 0f00 	cmp.w	r8, #0
 800499a:	dd41      	ble.n	8004a20 <__kernel_rem_pio2f+0x1c0>
 800499c:	9b01      	ldr	r3, [sp, #4]
 800499e:	2000      	movs	r0, #0
 80049a0:	3301      	adds	r3, #1
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	4601      	mov	r1, r0
 80049a6:	4285      	cmp	r5, r0
 80049a8:	dc6d      	bgt.n	8004a86 <__kernel_rem_pio2f+0x226>
 80049aa:	2c00      	cmp	r4, #0
 80049ac:	dd04      	ble.n	80049b8 <__kernel_rem_pio2f+0x158>
 80049ae:	2c01      	cmp	r4, #1
 80049b0:	d07e      	beq.n	8004ab0 <__kernel_rem_pio2f+0x250>
 80049b2:	2c02      	cmp	r4, #2
 80049b4:	f000 8086 	beq.w	8004ac4 <__kernel_rem_pio2f+0x264>
 80049b8:	f1b8 0f02 	cmp.w	r8, #2
 80049bc:	d130      	bne.n	8004a20 <__kernel_rem_pio2f+0x1c0>
 80049be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80049c6:	b359      	cbz	r1, 8004a20 <__kernel_rem_pio2f+0x1c0>
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fa1b 	bl	8004e04 <scalbnf>
 80049ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80049d2:	e025      	b.n	8004a20 <__kernel_rem_pio2f+0x1c0>
 80049d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80049d8:	a806      	add	r0, sp, #24
 80049da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80049e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80049ea:	ee10 1a10 	vmov	r1, s0
 80049ee:	ed32 0a01 	vldmdb	r2!, {s0}
 80049f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80049f6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80049fa:	3301      	adds	r3, #1
 80049fc:	e79a      	b.n	8004934 <__kernel_rem_pio2f+0xd4>
 80049fe:	d106      	bne.n	8004a0e <__kernel_rem_pio2f+0x1ae>
 8004a00:	1e6b      	subs	r3, r5, #1
 8004a02:	aa06      	add	r2, sp, #24
 8004a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a08:	ea4f 2822 	mov.w	r8, r2, asr #8
 8004a0c:	e7c3      	b.n	8004996 <__kernel_rem_pio2f+0x136>
 8004a0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1a:	da31      	bge.n	8004a80 <__kernel_rem_pio2f+0x220>
 8004a1c:	f04f 0800 	mov.w	r8, #0
 8004a20:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	f040 80a8 	bne.w	8004b7c <__kernel_rem_pio2f+0x31c>
 8004a2c:	1e6b      	subs	r3, r5, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	2200      	movs	r2, #0
 8004a32:	4548      	cmp	r0, r9
 8004a34:	da4d      	bge.n	8004ad2 <__kernel_rem_pio2f+0x272>
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	f000 8087 	beq.w	8004b4a <__kernel_rem_pio2f+0x2ea>
 8004a3c:	aa06      	add	r2, sp, #24
 8004a3e:	3c08      	subs	r4, #8
 8004a40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a44:	2900      	cmp	r1, #0
 8004a46:	f000 808d 	beq.w	8004b64 <__kernel_rem_pio2f+0x304>
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	f000 f9d7 	bl	8004e04 <scalbnf>
 8004a56:	9b02      	ldr	r3, [sp, #8]
 8004a58:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004b74 <__kernel_rem_pio2f+0x314>
 8004a5c:	0099      	lsls	r1, r3, #2
 8004a5e:	aa42      	add	r2, sp, #264	; 0x108
 8004a60:	1850      	adds	r0, r2, r1
 8004a62:	1d05      	adds	r5, r0, #4
 8004a64:	461c      	mov	r4, r3
 8004a66:	2c00      	cmp	r4, #0
 8004a68:	f280 80b8 	bge.w	8004bdc <__kernel_rem_pio2f+0x37c>
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	1b5c      	subs	r4, r3, r5
 8004a70:	2c00      	cmp	r4, #0
 8004a72:	f2c0 80d8 	blt.w	8004c26 <__kernel_rem_pio2f+0x3c6>
 8004a76:	4f3d      	ldr	r7, [pc, #244]	; (8004b6c <__kernel_rem_pio2f+0x30c>)
 8004a78:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004b78 <__kernel_rem_pio2f+0x318>
 8004a7c:	2400      	movs	r4, #0
 8004a7e:	e0c6      	b.n	8004c0e <__kernel_rem_pio2f+0x3ae>
 8004a80:	f04f 0802 	mov.w	r8, #2
 8004a84:	e78a      	b.n	800499c <__kernel_rem_pio2f+0x13c>
 8004a86:	ab06      	add	r3, sp, #24
 8004a88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004a8c:	b949      	cbnz	r1, 8004aa2 <__kernel_rem_pio2f+0x242>
 8004a8e:	b12b      	cbz	r3, 8004a9c <__kernel_rem_pio2f+0x23c>
 8004a90:	aa06      	add	r2, sp, #24
 8004a92:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004a96:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	e781      	b.n	80049a6 <__kernel_rem_pio2f+0x146>
 8004aa2:	aa06      	add	r2, sp, #24
 8004aa4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004aa8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004aac:	460b      	mov	r3, r1
 8004aae:	e7f5      	b.n	8004a9c <__kernel_rem_pio2f+0x23c>
 8004ab0:	1e68      	subs	r0, r5, #1
 8004ab2:	ab06      	add	r3, sp, #24
 8004ab4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abc:	aa06      	add	r2, sp, #24
 8004abe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004ac2:	e779      	b.n	80049b8 <__kernel_rem_pio2f+0x158>
 8004ac4:	1e68      	subs	r0, r5, #1
 8004ac6:	ab06      	add	r3, sp, #24
 8004ac8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	e7f4      	b.n	8004abc <__kernel_rem_pio2f+0x25c>
 8004ad2:	a906      	add	r1, sp, #24
 8004ad4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004ad8:	3801      	subs	r0, #1
 8004ada:	430a      	orrs	r2, r1
 8004adc:	e7a9      	b.n	8004a32 <__kernel_rem_pio2f+0x1d2>
 8004ade:	f10c 0c01 	add.w	ip, ip, #1
 8004ae2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	d0f9      	beq.n	8004ade <__kernel_rem_pio2f+0x27e>
 8004aea:	eb0b 0305 	add.w	r3, fp, r5
 8004aee:	aa1a      	add	r2, sp, #104	; 0x68
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	1898      	adds	r0, r3, r2
 8004af4:	3004      	adds	r0, #4
 8004af6:	1c69      	adds	r1, r5, #1
 8004af8:	3704      	adds	r7, #4
 8004afa:	2200      	movs	r2, #0
 8004afc:	4465      	add	r5, ip
 8004afe:	9005      	str	r0, [sp, #20]
 8004b00:	428d      	cmp	r5, r1
 8004b02:	f6ff af0a 	blt.w	800491a <__kernel_rem_pio2f+0xba>
 8004b06:	a81a      	add	r0, sp, #104	; 0x68
 8004b08:	eb02 0c03 	add.w	ip, r2, r3
 8004b0c:	4484      	add	ip, r0
 8004b0e:	9803      	ldr	r0, [sp, #12]
 8004b10:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004b14:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8004b18:	9001      	str	r0, [sp, #4]
 8004b1a:	ee07 0a90 	vmov	s15, r0
 8004b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b22:	9805      	ldr	r0, [sp, #20]
 8004b24:	edcc 7a00 	vstr	s15, [ip]
 8004b28:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004b78 <__kernel_rem_pio2f+0x318>
 8004b2c:	eb00 0802 	add.w	r8, r0, r2
 8004b30:	f04f 0c00 	mov.w	ip, #0
 8004b34:	45d4      	cmp	ip, sl
 8004b36:	dd0c      	ble.n	8004b52 <__kernel_rem_pio2f+0x2f2>
 8004b38:	eb02 0c07 	add.w	ip, r2, r7
 8004b3c:	a842      	add	r0, sp, #264	; 0x108
 8004b3e:	4484      	add	ip, r0
 8004b40:	edcc 7a01 	vstr	s15, [ip, #4]
 8004b44:	3101      	adds	r1, #1
 8004b46:	3204      	adds	r2, #4
 8004b48:	e7da      	b.n	8004b00 <__kernel_rem_pio2f+0x2a0>
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	f04f 0c01 	mov.w	ip, #1
 8004b50:	e7c7      	b.n	8004ae2 <__kernel_rem_pio2f+0x282>
 8004b52:	ecfe 6a01 	vldmia	lr!, {s13}
 8004b56:	ed38 7a01 	vldmdb	r8!, {s14}
 8004b5a:	f10c 0c01 	add.w	ip, ip, #1
 8004b5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b62:	e7e7      	b.n	8004b34 <__kernel_rem_pio2f+0x2d4>
 8004b64:	3b01      	subs	r3, #1
 8004b66:	e769      	b.n	8004a3c <__kernel_rem_pio2f+0x1dc>
 8004b68:	080052d0 	.word	0x080052d0
 8004b6c:	080052a4 	.word	0x080052a4
 8004b70:	43800000 	.word	0x43800000
 8004b74:	3b800000 	.word	0x3b800000
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	4260      	negs	r0, r4
 8004b7e:	eeb0 0a48 	vmov.f32	s0, s16
 8004b82:	f000 f93f 	bl	8004e04 <scalbnf>
 8004b86:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004b70 <__kernel_rem_pio2f+0x310>
 8004b8a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	db1a      	blt.n	8004bca <__kernel_rem_pio2f+0x36a>
 8004b94:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004b74 <__kernel_rem_pio2f+0x314>
 8004b98:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b9c:	aa06      	add	r2, sp, #24
 8004b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ba2:	a906      	add	r1, sp, #24
 8004ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba8:	3408      	adds	r4, #8
 8004baa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bb6:	ee10 3a10 	vmov	r3, s0
 8004bba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004bbe:	1c6b      	adds	r3, r5, #1
 8004bc0:	ee17 2a90 	vmov	r2, s15
 8004bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004bc8:	e73f      	b.n	8004a4a <__kernel_rem_pio2f+0x1ea>
 8004bca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bce:	aa06      	add	r2, sp, #24
 8004bd0:	ee10 3a10 	vmov	r3, s0
 8004bd4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004bd8:	462b      	mov	r3, r5
 8004bda:	e736      	b.n	8004a4a <__kernel_rem_pio2f+0x1ea>
 8004bdc:	aa06      	add	r2, sp, #24
 8004bde:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004be2:	9202      	str	r2, [sp, #8]
 8004be4:	ee07 2a90 	vmov	s15, r2
 8004be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bec:	3c01      	subs	r4, #1
 8004bee:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004bf2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004bf6:	ed65 7a01 	vstmdb	r5!, {s15}
 8004bfa:	e734      	b.n	8004a66 <__kernel_rem_pio2f+0x206>
 8004bfc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8004c00:	ecf7 6a01 	vldmia	r7!, {s13}
 8004c04:	ed9c 7a00 	vldr	s14, [ip]
 8004c08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c0c:	3401      	adds	r4, #1
 8004c0e:	454c      	cmp	r4, r9
 8004c10:	dc01      	bgt.n	8004c16 <__kernel_rem_pio2f+0x3b6>
 8004c12:	42a5      	cmp	r5, r4
 8004c14:	daf2      	bge.n	8004bfc <__kernel_rem_pio2f+0x39c>
 8004c16:	aa56      	add	r2, sp, #344	; 0x158
 8004c18:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8004c1c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8004c20:	3501      	adds	r5, #1
 8004c22:	3804      	subs	r0, #4
 8004c24:	e723      	b.n	8004a6e <__kernel_rem_pio2f+0x20e>
 8004c26:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004c28:	2a03      	cmp	r2, #3
 8004c2a:	d84d      	bhi.n	8004cc8 <__kernel_rem_pio2f+0x468>
 8004c2c:	e8df f002 	tbb	[pc, r2]
 8004c30:	021f1f3e 	.word	0x021f1f3e
 8004c34:	aa56      	add	r2, sp, #344	; 0x158
 8004c36:	4411      	add	r1, r2
 8004c38:	399c      	subs	r1, #156	; 0x9c
 8004c3a:	4608      	mov	r0, r1
 8004c3c:	461c      	mov	r4, r3
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	dc5f      	bgt.n	8004d02 <__kernel_rem_pio2f+0x4a2>
 8004c42:	4608      	mov	r0, r1
 8004c44:	461c      	mov	r4, r3
 8004c46:	2c01      	cmp	r4, #1
 8004c48:	dc6b      	bgt.n	8004d22 <__kernel_rem_pio2f+0x4c2>
 8004c4a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8004b78 <__kernel_rem_pio2f+0x318>
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	dc77      	bgt.n	8004d42 <__kernel_rem_pio2f+0x4e2>
 8004c52:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004c56:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004c5a:	f1b8 0f00 	cmp.w	r8, #0
 8004c5e:	d176      	bne.n	8004d4e <__kernel_rem_pio2f+0x4ee>
 8004c60:	edc6 6a00 	vstr	s13, [r6]
 8004c64:	ed86 7a01 	vstr	s14, [r6, #4]
 8004c68:	edc6 7a02 	vstr	s15, [r6, #8]
 8004c6c:	e02c      	b.n	8004cc8 <__kernel_rem_pio2f+0x468>
 8004c6e:	aa56      	add	r2, sp, #344	; 0x158
 8004c70:	4411      	add	r1, r2
 8004c72:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8004b78 <__kernel_rem_pio2f+0x318>
 8004c76:	399c      	subs	r1, #156	; 0x9c
 8004c78:	4618      	mov	r0, r3
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	da32      	bge.n	8004ce4 <__kernel_rem_pio2f+0x484>
 8004c7e:	f1b8 0f00 	cmp.w	r8, #0
 8004c82:	d035      	beq.n	8004cf0 <__kernel_rem_pio2f+0x490>
 8004c84:	eef1 7a47 	vneg.f32	s15, s14
 8004c88:	edc6 7a00 	vstr	s15, [r6]
 8004c8c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004c90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c94:	a82f      	add	r0, sp, #188	; 0xbc
 8004c96:	2101      	movs	r1, #1
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	da2c      	bge.n	8004cf6 <__kernel_rem_pio2f+0x496>
 8004c9c:	f1b8 0f00 	cmp.w	r8, #0
 8004ca0:	d001      	beq.n	8004ca6 <__kernel_rem_pio2f+0x446>
 8004ca2:	eef1 7a67 	vneg.f32	s15, s15
 8004ca6:	edc6 7a01 	vstr	s15, [r6, #4]
 8004caa:	e00d      	b.n	8004cc8 <__kernel_rem_pio2f+0x468>
 8004cac:	aa56      	add	r2, sp, #344	; 0x158
 8004cae:	4411      	add	r1, r2
 8004cb0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8004b78 <__kernel_rem_pio2f+0x318>
 8004cb4:	399c      	subs	r1, #156	; 0x9c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da0e      	bge.n	8004cd8 <__kernel_rem_pio2f+0x478>
 8004cba:	f1b8 0f00 	cmp.w	r8, #0
 8004cbe:	d001      	beq.n	8004cc4 <__kernel_rem_pio2f+0x464>
 8004cc0:	eef1 7a67 	vneg.f32	s15, s15
 8004cc4:	edc6 7a00 	vstr	s15, [r6]
 8004cc8:	9b01      	ldr	r3, [sp, #4]
 8004cca:	f003 0007 	and.w	r0, r3, #7
 8004cce:	b057      	add	sp, #348	; 0x15c
 8004cd0:	ecbd 8b04 	vpop	{d8-d9}
 8004cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd8:	ed31 7a01 	vldmdb	r1!, {s14}
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ce2:	e7e8      	b.n	8004cb6 <__kernel_rem_pio2f+0x456>
 8004ce4:	ed71 7a01 	vldmdb	r1!, {s15}
 8004ce8:	3801      	subs	r0, #1
 8004cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cee:	e7c4      	b.n	8004c7a <__kernel_rem_pio2f+0x41a>
 8004cf0:	eef0 7a47 	vmov.f32	s15, s14
 8004cf4:	e7c8      	b.n	8004c88 <__kernel_rem_pio2f+0x428>
 8004cf6:	ecb0 7a01 	vldmia	r0!, {s14}
 8004cfa:	3101      	adds	r1, #1
 8004cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d00:	e7ca      	b.n	8004c98 <__kernel_rem_pio2f+0x438>
 8004d02:	ed50 7a02 	vldr	s15, [r0, #-8]
 8004d06:	ed70 6a01 	vldmdb	r0!, {s13}
 8004d0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d0e:	3c01      	subs	r4, #1
 8004d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d14:	ed00 7a01 	vstr	s14, [r0, #-4]
 8004d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1c:	edc0 7a00 	vstr	s15, [r0]
 8004d20:	e78d      	b.n	8004c3e <__kernel_rem_pio2f+0x3de>
 8004d22:	ed50 7a02 	vldr	s15, [r0, #-8]
 8004d26:	ed70 6a01 	vldmdb	r0!, {s13}
 8004d2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d2e:	3c01      	subs	r4, #1
 8004d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d34:	ed00 7a01 	vstr	s14, [r0, #-4]
 8004d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3c:	edc0 7a00 	vstr	s15, [r0]
 8004d40:	e781      	b.n	8004c46 <__kernel_rem_pio2f+0x3e6>
 8004d42:	ed31 7a01 	vldmdb	r1!, {s14}
 8004d46:	3b01      	subs	r3, #1
 8004d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d4c:	e77f      	b.n	8004c4e <__kernel_rem_pio2f+0x3ee>
 8004d4e:	eef1 6a66 	vneg.f32	s13, s13
 8004d52:	eeb1 7a47 	vneg.f32	s14, s14
 8004d56:	edc6 6a00 	vstr	s13, [r6]
 8004d5a:	ed86 7a01 	vstr	s14, [r6, #4]
 8004d5e:	eef1 7a67 	vneg.f32	s15, s15
 8004d62:	e781      	b.n	8004c68 <__kernel_rem_pio2f+0x408>

08004d64 <__kernel_sinf>:
 8004d64:	ee10 3a10 	vmov	r3, s0
 8004d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004d70:	da04      	bge.n	8004d7c <__kernel_sinf+0x18>
 8004d72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004d76:	ee17 3a90 	vmov	r3, s15
 8004d7a:	b35b      	cbz	r3, 8004dd4 <__kernel_sinf+0x70>
 8004d7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004d80:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004dd8 <__kernel_sinf+0x74>
 8004d84:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004ddc <__kernel_sinf+0x78>
 8004d88:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d8c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004de0 <__kernel_sinf+0x7c>
 8004d90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d94:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004de4 <__kernel_sinf+0x80>
 8004d98:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d9c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004de8 <__kernel_sinf+0x84>
 8004da0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004da4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004da8:	b930      	cbnz	r0, 8004db8 <__kernel_sinf+0x54>
 8004daa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004dec <__kernel_sinf+0x88>
 8004dae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004db2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004db6:	4770      	bx	lr
 8004db8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004dbc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004dc0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004dc4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004dc8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004df0 <__kernel_sinf+0x8c>
 8004dcc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004dd0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	2f2ec9d3 	.word	0x2f2ec9d3
 8004ddc:	b2d72f34 	.word	0xb2d72f34
 8004de0:	3638ef1b 	.word	0x3638ef1b
 8004de4:	b9500d01 	.word	0xb9500d01
 8004de8:	3c088889 	.word	0x3c088889
 8004dec:	be2aaaab 	.word	0xbe2aaaab
 8004df0:	3e2aaaab 	.word	0x3e2aaaab

08004df4 <fabsf>:
 8004df4:	ee10 3a10 	vmov	r3, s0
 8004df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dfc:	ee00 3a10 	vmov	s0, r3
 8004e00:	4770      	bx	lr
	...

08004e04 <scalbnf>:
 8004e04:	b508      	push	{r3, lr}
 8004e06:	ee10 2a10 	vmov	r2, s0
 8004e0a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004e0e:	ed2d 8b02 	vpush	{d8}
 8004e12:	eef0 0a40 	vmov.f32	s1, s0
 8004e16:	d004      	beq.n	8004e22 <scalbnf+0x1e>
 8004e18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e1c:	d306      	bcc.n	8004e2c <scalbnf+0x28>
 8004e1e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8004e22:	ecbd 8b02 	vpop	{d8}
 8004e26:	eeb0 0a60 	vmov.f32	s0, s1
 8004e2a:	bd08      	pop	{r3, pc}
 8004e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e30:	d21c      	bcs.n	8004e6c <scalbnf+0x68>
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <scalbnf+0xac>)
 8004e34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004eb4 <scalbnf+0xb0>
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8004e3e:	db10      	blt.n	8004e62 <scalbnf+0x5e>
 8004e40:	ee10 2a90 	vmov	r2, s1
 8004e44:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8004e48:	3b19      	subs	r3, #25
 8004e4a:	4403      	add	r3, r0
 8004e4c:	2bfe      	cmp	r3, #254	; 0xfe
 8004e4e:	dd0f      	ble.n	8004e70 <scalbnf+0x6c>
 8004e50:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004eb8 <scalbnf+0xb4>
 8004e54:	eeb0 0a48 	vmov.f32	s0, s16
 8004e58:	f000 f834 	bl	8004ec4 <copysignf>
 8004e5c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8004e60:	e7df      	b.n	8004e22 <scalbnf+0x1e>
 8004e62:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004ebc <scalbnf+0xb8>
 8004e66:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8004e6a:	e7da      	b.n	8004e22 <scalbnf+0x1e>
 8004e6c:	0ddb      	lsrs	r3, r3, #23
 8004e6e:	e7ec      	b.n	8004e4a <scalbnf+0x46>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dd06      	ble.n	8004e82 <scalbnf+0x7e>
 8004e74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004e78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004e7c:	ee00 3a90 	vmov	s1, r3
 8004e80:	e7cf      	b.n	8004e22 <scalbnf+0x1e>
 8004e82:	f113 0f16 	cmn.w	r3, #22
 8004e86:	da06      	bge.n	8004e96 <scalbnf+0x92>
 8004e88:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e8c:	4298      	cmp	r0, r3
 8004e8e:	dcdf      	bgt.n	8004e50 <scalbnf+0x4c>
 8004e90:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8004ebc <scalbnf+0xb8>
 8004e94:	e7de      	b.n	8004e54 <scalbnf+0x50>
 8004e96:	3319      	adds	r3, #25
 8004e98:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004e9c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004ea0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004ec0 <scalbnf+0xbc>
 8004ea4:	ee07 3a10 	vmov	s14, r3
 8004ea8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8004eac:	e7b9      	b.n	8004e22 <scalbnf+0x1e>
 8004eae:	bf00      	nop
 8004eb0:	ffff3cb0 	.word	0xffff3cb0
 8004eb4:	4c000000 	.word	0x4c000000
 8004eb8:	7149f2ca 	.word	0x7149f2ca
 8004ebc:	0da24260 	.word	0x0da24260
 8004ec0:	33000000 	.word	0x33000000

08004ec4 <copysignf>:
 8004ec4:	ee10 3a10 	vmov	r3, s0
 8004ec8:	ee10 2a90 	vmov	r2, s1
 8004ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ed0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	ee00 3a10 	vmov	s0, r3
 8004eda:	4770      	bx	lr

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
