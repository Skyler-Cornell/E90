
Audio_Processor_E90.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007434  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080075c0  080075c0  000175c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b8  080077b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c0  080077c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080077c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  20000010  080077d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  080077d8  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001499b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc3  00000000  00000000  000349db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a0c  00000000  00000000  00039b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff80  00000000  00000000  0005c55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1b48  00000000  00000000  0006c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  0013e0a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075a4 	.word	0x080075a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080075a4 	.word	0x080075a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <process_init>:
/*
 * Executes once before entering program loop
 */

void process_init()
{
 8000e68:	b598      	push	{r3, r4, r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  //reset biquad history
  LPF_biquad.yn2 = 0;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <process_init+0x90>)
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  LPF_biquad.yn1 = 0;
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <process_init+0x90>)
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  LPF_biquad.xn2 = 0;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <process_init+0x90>)
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  LPF_biquad.xn1 = 0;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <process_init+0x90>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]


  F0 = 400; // start off at 1000 Hz center freq;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <process_init+0x94>)
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <process_init+0x98>)
 8000e90:	601a      	str	r2, [r3, #0]
  w0 = 2*3.141592*(F0/Fs);
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <process_init+0x94>)
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <process_init+0x9c>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ea2:	ee16 0a90 	vmov	r0, s13
 8000ea6:	f7ff faf3 	bl	8000490 <__aeabi_f2d>
 8000eaa:	a311      	add	r3, pc, #68	; (adr r3, 8000ef0 <process_init+0x88>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f7ff fb46 	bl	8000540 <__aeabi_dmul>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4621      	mov	r1, r4
 8000ebc:	f7ff fe02 	bl	8000ac4 <__aeabi_d2f>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <process_init+0xa0>)
 8000ec4:	601a      	str	r2, [r3, #0]
  Q = 1;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <process_init+0xa4>)
 8000ec8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ecc:	601a      	str	r2, [r3, #0]

  //compute an initial set of coefficients to avoid Nan
  compute_LPF_coeff(&LPF_biquad, w0, Q);
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <process_init+0xa0>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <process_init+0xa4>)
 8000ed6:	ed93 7a00 	vldr	s14, [r3]
 8000eda:	eef0 0a47 	vmov.f32	s1, s14
 8000ede:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <process_init+0x90>)
 8000ee4:	f000 f83a 	bl	8000f5c <compute_LPF_coeff>

}
 8000ee8:	bf00      	nop
 8000eea:	bd98      	pop	{r3, r4, r7, pc}
 8000eec:	f3af 8000 	nop.w
 8000ef0:	fc8b007a 	.word	0xfc8b007a
 8000ef4:	401921fa 	.word	0x401921fa
 8000ef8:	20000040 	.word	0x20000040
 8000efc:	2000003c 	.word	0x2000003c
 8000f00:	43c80000 	.word	0x43c80000
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000038 	.word	0x20000038
 8000f0c:	20000030 	.word	0x20000030

08000f10 <process>:

   //handle LEDs and Pots on slower time scale
}

void process(int *in_sample, int *out_sample)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]

  in = (float)*in_sample;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <process+0x40>)
 8000f28:	edc3 7a00 	vstr	s15, [r3]

  //produce filtered output sample
  compute_biquad(&LPF_biquad, &in, &out);
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <process+0x44>)
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <process+0x40>)
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <process+0x48>)
 8000f32:	f000 f89f 	bl	8001074 <compute_biquad>

  //cast float to int
  *out_sample = (int)out;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <process+0x44>)
 8000f38:	edd3 7a00 	vldr	s15, [r3]
 8000f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f40:	ee17 2a90 	vmov	r2, s15
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	601a      	str	r2, [r3, #0]
  //*out_sample = *out_sample>>1;
  //*out_sample = *in_sample;
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000002c 	.word	0x2000002c
 8000f54:	20000034 	.word	0x20000034
 8000f58:	20000040 	.word	0x20000040

08000f5c <compute_LPF_coeff>:

#include "biquads.h"
#include <math.h>
#include <stdint.h>

void compute_LPF_coeff(biquad_t *bq, float w0, float Q){
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f68:	edc7 0a01 	vstr	s1, [r7, #4]

  float one_minus_cosw0 = 1-cos(w0);
 8000f6c:	68b8      	ldr	r0, [r7, #8]
 8000f6e:	f7ff fa8f 	bl	8000490 <__aeabi_f2d>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	ec44 3b10 	vmov	d0, r3, r4
 8000f7a:	f005 fabd 	bl	80064f8 <cos>
 8000f7e:	ec54 3b10 	vmov	r3, r4, d0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4939      	ldr	r1, [pc, #228]	; (8001070 <compute_LPF_coeff+0x114>)
 8000f8c:	f7ff f920 	bl	80001d0 <__aeabi_dsub>
 8000f90:	4603      	mov	r3, r0
 8000f92:	460c      	mov	r4, r1
 8000f94:	4618      	mov	r0, r3
 8000f96:	4621      	mov	r1, r4
 8000f98:	f7ff fd94 	bl	8000ac4 <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	617b      	str	r3, [r7, #20]
  float alpha = sin(w0)/(2*Q);
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f7ff fa75 	bl	8000490 <__aeabi_f2d>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	ec44 3b10 	vmov	d0, r3, r4
 8000fae:	f005 fae7 	bl	8006580 <sin>
 8000fb2:	ec56 5b10 	vmov	r5, r6, d0
 8000fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fbe:	ee17 0a90 	vmov	r0, s15
 8000fc2:	f7ff fa65 	bl	8000490 <__aeabi_f2d>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4623      	mov	r3, r4
 8000fce:	4628      	mov	r0, r5
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	f7ff fbdf 	bl	8000794 <__aeabi_ddiv>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4621      	mov	r1, r4
 8000fde:	f7ff fd71 	bl	8000ac4 <__aeabi_d2f>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]

  bq->b0 = one_minus_cosw0/2;
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	edc3 7a04 	vstr	s15, [r3, #16]
  bq->b1 = one_minus_cosw0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	615a      	str	r2, [r3, #20]
  bq->b2 = one_minus_cosw0/2;
 8000ffe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001002:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	edc3 7a06 	vstr	s15, [r3, #24]

  bq->a0 = 1+alpha;
 8001010:	edd7 7a04 	vldr	s15, [r7, #16]
 8001014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edc3 7a07 	vstr	s15, [r3, #28]
  bq->a1 = -2*cos(w0);
 8001022:	68b8      	ldr	r0, [r7, #8]
 8001024:	f7ff fa34 	bl	8000490 <__aeabi_f2d>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	ec44 3b10 	vmov	d0, r3, r4
 8001030:	f005 fa62 	bl	80064f8 <cos>
 8001034:	ec51 0b10 	vmov	r0, r1, d0
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001040:	f7ff fa7e 	bl	8000540 <__aeabi_dmul>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	4618      	mov	r0, r3
 800104a:	4621      	mov	r1, r4
 800104c:	f7ff fd3a 	bl	8000ac4 <__aeabi_d2f>
 8001050:	4602      	mov	r2, r0
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	621a      	str	r2, [r3, #32]
  bq->a2 = 1-alpha;
 8001056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800105a:	edd7 7a04 	vldr	s15, [r7, #16]
 800105e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

}
 8001068:	bf00      	nop
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001070:	3ff00000 	.word	0x3ff00000

08001074 <compute_biquad>:
  bq->a2 = 1-alpha;

}


void compute_biquad(biquad_t *bq, float *in, float *out){
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	; 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]


  float b0 = bq->b0;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  float b1 = bq->b1;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	623b      	str	r3, [r7, #32]
  float b2 = bq->b2;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	61fb      	str	r3, [r7, #28]

  float a0 = bq->a0;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	61bb      	str	r3, [r7, #24]
  float a1 = bq->a1;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	617b      	str	r3, [r7, #20]
  float a2 = bq->a2;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	613b      	str	r3, [r7, #16]

  // Direct Form 1 Biquad Implementation
  *out = (*in)*(b0/a0);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	ed93 7a00 	vldr	s14, [r3]
 80010aa:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80010ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80010b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edc3 7a00 	vstr	s15, [r3]
  *out += bq->xn1*(b1/a0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	edd3 6a00 	vldr	s13, [r3]
 80010cc:	edd7 5a08 	vldr	s11, [r7, #32]
 80010d0:	ed97 6a06 	vldr	s12, [r7, #24]
 80010d4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edc3 7a00 	vstr	s15, [r3]
  *out += bq->xn2*(b2/a0);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80010f2:	edd7 5a07 	vldr	s11, [r7, #28]
 80010f6:	ed97 6a06 	vldr	s12, [r7, #24]
 80010fa:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80010fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edc3 7a00 	vstr	s15, [r3]
  *out -= bq->yn1*(a1/a0);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edd3 6a02 	vldr	s13, [r3, #8]
 8001118:	edd7 5a05 	vldr	s11, [r7, #20]
 800111c:	ed97 6a06 	vldr	s12, [r7, #24]
 8001120:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a00 	vstr	s15, [r3]
  *out -= bq->yn2*(a2/a0);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	edd3 6a03 	vldr	s13, [r3, #12]
 800113e:	edd7 5a04 	vldr	s11, [r7, #16]
 8001142:	ed97 6a06 	vldr	s12, [r7, #24]
 8001146:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800114a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edc3 7a00 	vstr	s15, [r3]

  //update biquad history
  bq->yn2 = bq->yn1;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	60da      	str	r2, [r3, #12]
  bq->yn1 = *out;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	609a      	str	r2, [r3, #8]
  bq->xn2 = bq->xn1;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	605a      	str	r2, [r3, #4]
  bq->xn1 = *in;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	372c      	adds	r7, #44	; 0x2c
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f001 f81e 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f000 f82a 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f000 fb24 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001194:	f000 faec 	bl	8001770 <MX_DMA_Init>
  MX_ADC1_Init();
 8001198:	f000 f8a4 	bl	80012e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800119c:	f000 f910 	bl	80013c0 <MX_I2C1_Init>
  MX_I2S2_Init();
 80011a0:	f000 f93c 	bl	800141c <MX_I2S2_Init>
  MX_TIM2_Init();
 80011a4:	f000 f968 	bl	8001478 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011a8:	f000 f9ca 	bl	8001540 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ac:	f000 fa42 	bl	8001634 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011b0:	f000 fab0 	bl	8001714 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  process_init();
 80011b4:	f7ff fe58 	bl	8000e68 <process_init>

  // Start Audio Double Buffer DMA transfers
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_buf, rx_buf, 2);
 80011b8:	2302      	movs	r3, #2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <main+0x4c>)
 80011bc:	4905      	ldr	r1, [pc, #20]	; (80011d4 <main+0x50>)
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <main+0x54>)
 80011c0:	f002 ff92 	bl	80040e8 <HAL_I2SEx_TransmitReceive_DMA>

  // Start ADC1 DMA transfers for Pot values
  HAL_ADC_Start_DMA(&hadc1, adc_buf, 3);
 80011c4:	2203      	movs	r2, #3
 80011c6:	4905      	ldr	r1, [pc, #20]	; (80011dc <main+0x58>)
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <main+0x5c>)
 80011ca:	f001 fa15 	bl	80025f8 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x4a>
 80011d0:	20000600 	.word	0x20000600
 80011d4:	20000608 	.word	0x20000608
 80011d8:	20000720 	.word	0x20000720
 80011dc:	20000610 	.word	0x20000610
 80011e0:	20000554 	.word	0x20000554

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b098      	sub	sp, #96	; 0x60
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 f976 	bl	80064e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <SystemClock_Config+0xf8>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <SystemClock_Config+0xf8>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <SystemClock_Config+0xf8>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <SystemClock_Config+0xfc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <SystemClock_Config+0xfc>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <SystemClock_Config+0xfc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124e:	2301      	movs	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001262:	2308      	movs	r3, #8
 8001264:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001266:	23a8      	movs	r3, #168	; 0xa8
 8001268:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126e:	2307      	movs	r3, #7
 8001270:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fd14 	bl	8004ca4 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001282:	f000 fbc1 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2302      	movs	r3, #2
 800128c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001292:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2105      	movs	r1, #5
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 ff6d 	bl	8005184 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80012b0:	f000 fbaa 	bl	8001a08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012b8:	23c0      	movs	r3, #192	; 0xc0
 80012ba:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 f939 	bl	800553c <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80012d0:	f000 fb9a 	bl	8001a08 <Error_Handler>
  }
}
 80012d4:	bf00      	nop
 80012d6:	3760      	adds	r7, #96	; 0x60
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <MX_ADC1_Init+0xd0>)
 80012f8:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <MX_ADC1_Init+0xd4>)
 80012fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <MX_ADC1_Init+0xd0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001308:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <MX_ADC1_Init+0xd0>)
 800130c:	2201      	movs	r2, #1
 800130e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001312:	2201      	movs	r2, #1
 8001314:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <MX_ADC1_Init+0xd8>)
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_ADC1_Init+0xd0>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001332:	2203      	movs	r2, #3
 8001334:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001340:	2201      	movs	r2, #1
 8001342:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001346:	f000 ffd3 	bl	80022f0 <HAL_ADC_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 fb5a 	bl	8001a08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001354:	2301      	movs	r3, #1
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001358:	2301      	movs	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800135c:	2307      	movs	r3, #7
 800135e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4813      	ldr	r0, [pc, #76]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001366:	f001 fa57 	bl	8002818 <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001370:	f000 fb4a 	bl	8001a08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001374:	2302      	movs	r3, #2
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_ADC1_Init+0xd0>)
 8001382:	f001 fa49 	bl	8002818 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800138c:	f000 fb3c 	bl	8001a08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001390:	2303      	movs	r3, #3
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001394:	2303      	movs	r3, #3
 8001396:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_ADC1_Init+0xd0>)
 800139e:	f001 fa3b 	bl	8002818 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013a8:	f000 fb2e 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000554 	.word	0x20000554
 80013b8:	40012000 	.word	0x40012000
 80013bc:	0f000001 	.word	0x0f000001

080013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f002 fae9 	bl	80039d4 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 fafe 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000ac 	.word	0x200000ac
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_I2S2_Init+0x54>)
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <MX_I2S2_Init+0x58>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2S2_Init+0x54>)
 8001428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_I2S2_Init+0x54>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_I2S2_Init+0x54>)
 8001436:	2203      	movs	r2, #3
 8001438:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <MX_I2S2_Init+0x54>)
 800143c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001440:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_I2S2_Init+0x54>)
 8001444:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001448:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_I2S2_Init+0x54>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_I2S2_Init+0x54>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_I2S2_Init+0x54>)
 8001458:	2201      	movs	r2, #1
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_I2S2_Init+0x54>)
 800145e:	f002 fbf1 	bl	8003c44 <HAL_I2S_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001468:	f000 face 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000720 	.word	0x20000720
 8001474:	40003800 	.word	0x40003800

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <MX_TIM2_Init+0xc4>)
 800149c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_TIM2_Init+0xc4>)
 80014a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <MX_TIM2_Init+0xc4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 254;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_TIM2_Init+0xc4>)
 80014b2:	22fe      	movs	r2, #254	; 0xfe
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_TIM2_Init+0xc4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_TIM2_Init+0xc4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <MX_TIM2_Init+0xc4>)
 80014c4:	f004 f976 	bl	80057b4 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f000 fa9b 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4619      	mov	r1, r3
 80014e0:	4816      	ldr	r0, [pc, #88]	; (800153c <MX_TIM2_Init+0xc4>)
 80014e2:	f004 fca9 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014ec:	f000 fa8c 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM2_Init+0xc4>)
 8001508:	f004 f980 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001512:	f000 fa79 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	220c      	movs	r2, #12
 800151a:	4619      	mov	r1, r3
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM2_Init+0xc4>)
 800151e:	f004 f975 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001528:	f000 fa6e 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM2_Init+0xc4>)
 800152e:	f000 fc99 	bl	8001e64 <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000061c 	.word	0x2000061c

08001540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <MX_TIM3_Init+0xec>)
 8001564:	4a32      	ldr	r2, [pc, #200]	; (8001630 <MX_TIM3_Init+0xf0>)
 8001566:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000;
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <MX_TIM3_Init+0xec>)
 800156a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800156e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <MX_TIM3_Init+0xec>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MX_TIM3_Init+0xec>)
 8001578:	22fe      	movs	r2, #254	; 0xfe
 800157a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <MX_TIM3_Init+0xec>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <MX_TIM3_Init+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001588:	4828      	ldr	r0, [pc, #160]	; (800162c <MX_TIM3_Init+0xec>)
 800158a:	f004 f913 	bl	80057b4 <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001594:	f000 fa38 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4619      	mov	r1, r3
 80015a6:	4821      	ldr	r0, [pc, #132]	; (800162c <MX_TIM3_Init+0xec>)
 80015a8:	f004 fc46 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015b2:	f000 fa29 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b6:	2360      	movs	r3, #96	; 0x60
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4817      	ldr	r0, [pc, #92]	; (800162c <MX_TIM3_Init+0xec>)
 80015ce:	f004 f91d 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015d8:	f000 fa16 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4812      	ldr	r0, [pc, #72]	; (800162c <MX_TIM3_Init+0xec>)
 80015e4:	f004 f912 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015ee:	f000 fa0b 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2208      	movs	r2, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM3_Init+0xec>)
 80015fa:	f004 f907 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001604:	f000 fa00 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	220c      	movs	r2, #12
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM3_Init+0xec>)
 8001610:	f004 f8fc 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800161a:	f000 f9f5 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM3_Init+0xec>)
 8001620:	f000 fc20 	bl	8001e64 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000508 	.word	0x20000508
 8001630:	40000400 	.word	0x40000400

08001634 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <MX_TIM4_Init+0xd8>)
 8001658:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <MX_TIM4_Init+0xdc>)
 800165a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000;
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <MX_TIM4_Init+0xd8>)
 800165e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001662:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <MX_TIM4_Init+0xd8>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_TIM4_Init+0xd8>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <MX_TIM4_Init+0xd8>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_TIM4_Init+0xd8>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800167c:	4823      	ldr	r0, [pc, #140]	; (800170c <MX_TIM4_Init+0xd8>)
 800167e:	f004 f899 	bl	80057b4 <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001688:	f000 f9be 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	481c      	ldr	r0, [pc, #112]	; (800170c <MX_TIM4_Init+0xd8>)
 800169c:	f004 fbcc 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80016a6:	f000 f9af 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <MX_TIM4_Init+0xd8>)
 80016c2:	f004 f8a3 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016cc:	f000 f99c 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2204      	movs	r2, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <MX_TIM4_Init+0xd8>)
 80016d8:	f004 f898 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016e2:	f000 f991 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2208      	movs	r2, #8
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <MX_TIM4_Init+0xd8>)
 80016ee:	f004 f88d 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80016f8:	f000 f986 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <MX_TIM4_Init+0xd8>)
 80016fe:	f000 fbb1 	bl	8001e64 <HAL_TIM_MspPostInit>

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000006c 	.word	0x2000006c
 8001710:	40000800 	.word	0x40000800

08001714 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800171e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001722:	2204      	movs	r2, #4
 8001724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001728:	2202      	movs	r2, #2
 800172a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001734:	2202      	movs	r2, #2
 8001736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001758:	f003 f986 	bl	8004a68 <HAL_PCD_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001762:	f000 f951 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000100 	.word	0x20000100

08001770 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_DMA_Init+0x68>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <MX_DMA_Init+0x68>)
 8001780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_DMA_Init+0x68>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_DMA_Init+0x68>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <MX_DMA_Init+0x68>)
 800179c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_DMA_Init+0x68>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	200e      	movs	r0, #14
 80017b4:	f001 fbb5 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017b8:	200e      	movs	r0, #14
 80017ba:	f001 fbce 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);

  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2038      	movs	r0, #56	; 0x38
 80017c4:	f001 fbad 	bl	8002f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017c8:	2038      	movs	r0, #56	; 0x38
 80017ca:	f001 fbc6 	bl	8002f5a <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <MX_GPIO_Init+0x130>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a44      	ldr	r2, [pc, #272]	; (800190c <MX_GPIO_Init+0x130>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b42      	ldr	r3, [pc, #264]	; (800190c <MX_GPIO_Init+0x130>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MX_GPIO_Init+0x130>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a3d      	ldr	r2, [pc, #244]	; (800190c <MX_GPIO_Init+0x130>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <MX_GPIO_Init+0x130>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <MX_GPIO_Init+0x130>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a36      	ldr	r2, [pc, #216]	; (800190c <MX_GPIO_Init+0x130>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <MX_GPIO_Init+0x130>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <MX_GPIO_Init+0x130>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <MX_GPIO_Init+0x130>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <MX_GPIO_Init+0x130>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_GPIO_Init+0x130>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a28      	ldr	r2, [pc, #160]	; (800190c <MX_GPIO_Init+0x130>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_GPIO_Init+0x130>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <MX_GPIO_Init+0x130>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <MX_GPIO_Init+0x130>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <MX_GPIO_Init+0x130>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80018a0:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0x134>)
 80018a2:	f002 f87d 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2107      	movs	r1, #7
 80018aa:	481a      	ldr	r0, [pc, #104]	; (8001914 <MX_GPIO_Init+0x138>)
 80018ac:	f002 f878 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4812      	ldr	r0, [pc, #72]	; (8001910 <MX_GPIO_Init+0x134>)
 80018c6:	f001 fed1 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <MX_GPIO_Init+0x134>)
 80018e4:	f001 fec2 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018e8:	2307      	movs	r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_GPIO_Init+0x138>)
 8001900:	f001 feb4 	bl	800366c <HAL_GPIO_Init>

}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	40021000 	.word	0x40021000
 8001914:	40020c00 	.word	0x40020c00

08001918 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  for(i=0; i<3; i++){
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_ADC_ConvCpltCallback+0x44>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e00f      	b.n	8001948 <HAL_ADC_ConvCpltCallback+0x30>
      pot_vals[i] = adc_buf[i];
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_ADC_ConvCpltCallback+0x44>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_ADC_ConvCpltCallback+0x48>)
 800192e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_ADC_ConvCpltCallback+0x44>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4611      	mov	r1, r2
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_ADC_ConvCpltCallback+0x4c>)
 800193a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0; i<3; i++){
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_ADC_ConvCpltCallback+0x44>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_ADC_ConvCpltCallback+0x44>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <HAL_ADC_ConvCpltCallback+0x44>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	ddeb      	ble.n	8001928 <HAL_ADC_ConvCpltCallback+0x10>
  }
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	2000059c 	.word	0x2000059c
 8001960:	20000610 	.word	0x20000610
 8001964:	20000548 	.word	0x20000548

08001968 <HAL_I2SEx_TxRxHalfCpltCallback>:


//I2S RX line DMA transfer half complete callback
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[0]<<16)|rx_buf[1])>>8;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8001978:	8852      	ldrh	r2, [r2, #2]
 800197a:	4313      	orrs	r3, r2
 800197c:	121b      	asrs	r3, r3, #8
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8001980:	6013      	str	r3, [r2, #0]

  // do audio processing
  process(&in_sample, &out_sample);
 8001982:	490b      	ldr	r1, [pc, #44]	; (80019b0 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8001986:	f7ff fac3 	bl	8000f10 <process>

  //place processed sample into tx_buf
  tx_buf[0] = (out_sample>>8) & 0xFFFF;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	121b      	asrs	r3, r3, #8
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8001994:	801a      	strh	r2, [r3, #0]
  tx_buf[1] = out_sample & 0xFFFF;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 800199e:	805a      	strh	r2, [r3, #2]


}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000600 	.word	0x20000600
 80019ac:	2000065c 	.word	0x2000065c
 80019b0:	20000068 	.word	0x20000068
 80019b4:	20000608 	.word	0x20000608

080019b8 <HAL_I2SEx_TxRxCpltCallback>:

//I2S RX line DMA transfer complete callback
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  //retrieve sample from rx_buf
  in_sample  = (((int)rx_buf[2]<<16)|rx_buf[3])>>8;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80019c2:	889b      	ldrh	r3, [r3, #4]
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80019c8:	88d2      	ldrh	r2, [r2, #6]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	121b      	asrs	r3, r3, #8
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_I2SEx_TxRxCpltCallback+0x44>)
 80019d0:	6013      	str	r3, [r2, #0]

  // does audio processing
  process(&in_sample, &out_sample);
 80019d2:	490b      	ldr	r1, [pc, #44]	; (8001a00 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_I2SEx_TxRxCpltCallback+0x44>)
 80019d6:	f7ff fa9b 	bl	8000f10 <process>

  //place processed sample into tx_buf
  tx_buf[2] = (out_sample>>8) & 0xFFFF;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	121b      	asrs	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 80019e4:	809a      	strh	r2, [r3, #4]
  tx_buf[3] = out_sample & 0xFFFF;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 80019ee:	80da      	strh	r2, [r3, #6]

}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000600 	.word	0x20000600
 80019fc:	2000065c 	.word	0x2000065c
 8001a00:	20000068 	.word	0x20000068
 8001a04:	20000608 	.word	0x20000608

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a33      	ldr	r2, [pc, #204]	; (8001b54 <HAL_ADC_MspInit+0xec>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d15f      	bne.n	8001b4a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ac2:	230e      	movs	r3, #14
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4821      	ldr	r0, [pc, #132]	; (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001ad6:	f001 fdc9 	bl	800366c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_ADC_MspInit+0xfc>)
 8001ade:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b1e:	4810      	ldr	r0, [pc, #64]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b20:	f001 fa36 	bl	8002f90 <HAL_DMA_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b2a:	f7ff ff6d 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2012      	movs	r0, #18
 8001b40:	f001 f9ef 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b44:	2012      	movs	r0, #18
 8001b46:	f001 fa08 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	200005a0 	.word	0x200005a0
 8001b64:	40026410 	.word	0x40026410

08001b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_I2C_MspInit+0x84>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d12b      	bne.n	8001be2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_I2C_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_I2C_MspInit+0x88>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_I2C_MspInit+0x88>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001baa:	2312      	movs	r3, #18
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <HAL_I2C_MspInit+0x8c>)
 8001bc2:	f001 fd53 	bl	800366c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_I2C_MspInit+0x88>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_I2C_MspInit+0x88>)
 8001bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_I2C_MspInit+0x88>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_I2S_MspInit+0x1b4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	f040 80c4 	bne.w	8001da4 <HAL_I2S_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a62      	ldr	r2, [pc, #392]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b5c      	ldr	r3, [pc, #368]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_I2S_MspInit+0x1b8>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c70:	2304      	movs	r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001c80:	2306      	movs	r3, #6
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	484a      	ldr	r0, [pc, #296]	; (8001db4 <HAL_I2S_MspInit+0x1bc>)
 8001c8c:	f001 fcee 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001c90:	2348      	movs	r3, #72	; 0x48
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4842      	ldr	r0, [pc, #264]	; (8001db4 <HAL_I2S_MspInit+0x1bc>)
 8001cac:	f001 fcde 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001cb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	483a      	ldr	r0, [pc, #232]	; (8001db8 <HAL_I2S_MspInit+0x1c0>)
 8001cce:	f001 fccd 	bl	800366c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001cd4:	4a3a      	ldr	r2, [pc, #232]	; (8001dc0 <HAL_I2S_MspInit+0x1c8>)
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001cda:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001cde:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cec:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfa:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d02:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001d18:	4828      	ldr	r0, [pc, #160]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001d1a:	f001 f939 	bl	8002f90 <HAL_DMA_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 8001d24:	f7ff fe70 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001d2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_I2S_MspInit+0x1c4>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d36:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <HAL_I2S_MspInit+0x1d0>)
 8001d38:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d52:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d62:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d78:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d7a:	f001 f909 	bl	8002f90 <HAL_DMA_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2S_MspInit+0x190>
    {
      Error_Handler();
 8001d84:	f7ff fe40 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d8e:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_I2S_MspInit+0x1cc>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2024      	movs	r0, #36	; 0x24
 8001d9a:	f001 f8c2 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d9e:	2024      	movs	r0, #36	; 0x24
 8001da0:	f001 f8db 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40003800 	.word	0x40003800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	20000660 	.word	0x20000660
 8001dc0:	40026058 	.word	0x40026058
 8001dc4:	200006c0 	.word	0x200006c0
 8001dc8:	40026070 	.word	0x40026070

08001dcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dfa:	e026      	b.n	8001e4a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_TIM_PWM_MspInit+0x90>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
}
 8001e22:	e012      	b.n	8001e4a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_TIM_PWM_MspInit+0x94>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10d      	bne.n	8001e4a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800

08001e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e84:	d13d      	bne.n	8001f02 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a4b      	ldr	r2, [pc, #300]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4840      	ldr	r0, [pc, #256]	; (8001fdc <HAL_TIM_MspPostInit+0x178>)
 8001eda:	f001 fbc7 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4839      	ldr	r0, [pc, #228]	; (8001fe0 <HAL_TIM_MspPostInit+0x17c>)
 8001efc:	f001 fbb6 	bl	800366c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f00:	e065      	b.n	8001fce <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a37      	ldr	r2, [pc, #220]	; (8001fe4 <HAL_TIM_MspPostInit+0x180>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d13c      	bne.n	8001f86 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f44:	23c0      	movs	r3, #192	; 0xc0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f54:	2302      	movs	r3, #2
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481f      	ldr	r0, [pc, #124]	; (8001fdc <HAL_TIM_MspPostInit+0x178>)
 8001f60:	f001 fb84 	bl	800366c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f64:	2303      	movs	r3, #3
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f74:	2302      	movs	r3, #2
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4818      	ldr	r0, [pc, #96]	; (8001fe0 <HAL_TIM_MspPostInit+0x17c>)
 8001f80:	f001 fb74 	bl	800366c <HAL_GPIO_Init>
}
 8001f84:	e023      	b.n	8001fce <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_TIM_MspPostInit+0x184>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d11e      	bne.n	8001fce <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_TIM_MspPostInit+0x174>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001fac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4808      	ldr	r0, [pc, #32]	; (8001fec <HAL_TIM_MspPostInit+0x188>)
 8001fca:	f001 fb4f 	bl	800366c <HAL_GPIO_Init>
}
 8001fce:	bf00      	nop
 8001fd0:	3730      	adds	r7, #48	; 0x30
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40020c00 	.word	0x40020c00

08001ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002010:	d132      	bne.n	8002078 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_PCD_MspInit+0x90>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_PCD_MspInit+0x90>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_PCD_MspInit+0x90>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800202e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002040:	230a      	movs	r3, #10
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	480e      	ldr	r0, [pc, #56]	; (8002084 <HAL_PCD_MspInit+0x94>)
 800204c:	f001 fb0e 	bl	800366c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_PCD_MspInit+0x90>)
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_PCD_MspInit+0x90>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205a:	6353      	str	r3, [r2, #52]	; 0x34
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_PCD_MspInit+0x90>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_PCD_MspInit+0x90>)
 8002066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206a:	6453      	str	r3, [r2, #68]	; 0x44
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_PCD_MspInit+0x90>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020dc:	f000 f8c6 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <DMA1_Stream3_IRQHandler+0x10>)
 80020ea:	f001 f857 	bl	800319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000660 	.word	0x20000660

080020f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <DMA1_Stream4_IRQHandler+0x10>)
 80020fe:	f001 f84d 	bl	800319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200006c0 	.word	0x200006c0

0800210c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <ADC_IRQHandler+0x10>)
 8002112:	f000 f930 	bl	8002376 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000554 	.word	0x20000554

08002120 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <SPI2_IRQHandler+0x10>)
 8002126:	f001 fecd 	bl	8003ec4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000720 	.word	0x20000720

08002134 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA2_Stream0_IRQHandler+0x10>)
 800213a:	f001 f82f 	bl	800319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200005a0 	.word	0x200005a0

08002148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <SystemInit+0x28>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <SystemInit+0x28>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SystemInit+0x28>)
 800215e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002162:	609a      	str	r2, [r3, #8]
#endif
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800217a:	e003      	b.n	8002184 <LoopCopyDataInit>

0800217c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800217e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002182:	3104      	adds	r1, #4

08002184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800218a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800218c:	d3f6      	bcc.n	800217c <CopyDataInit>
  ldr  r2, =_sbss
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002190:	e002      	b.n	8002198 <LoopFillZerobss>

08002192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002194:	f842 3b04 	str.w	r3, [r2], #4

08002198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800219a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800219c:	d3f9      	bcc.n	8002192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800219e:	f7ff ffd3 	bl	8002148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f004 f97b 	bl	800649c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7fe ffed 	bl	8001184 <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021b0:	080077c8 	.word	0x080077c8
  ldr  r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021b8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80021bc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80021c0:	2000076c 	.word	0x2000076c

080021c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <CAN1_RX0_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_Init+0x40>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_Init+0x40>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_Init+0x40>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 fe8b 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fc0c 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fea3 	bl	8002f76 <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002248:	f000 fe6b 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000004 	.word	0x20000004
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000008 	.word	0x20000008

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	2000000c 	.word	0x2000000c
 8002290:	20000768 	.word	0x20000768

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000768 	.word	0x20000768

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_Delay+0x40>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e033      	b.n	800236e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fbaa 	bl	8001a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002336:	f023 0302 	bic.w	r3, r3, #2
 800233a:	f043 0202 	orr.w	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fb8a 	bl	8002a5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
 800235e:	e001      	b.n	8002364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d049      	beq.n	800244c <HAL_ADC_IRQHandler+0xd6>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d046      	beq.n	800244c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d12b      	bne.n	800243c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d127      	bne.n	800243c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002404:	2b00      	cmp	r3, #0
 8002406:	d119      	bne.n	800243c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0220 	bic.w	r2, r2, #32
 8002416:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fa6b 	bl	8001918 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0212 	mvn.w	r2, #18
 800244a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf0c      	ite	eq
 800245a:	2301      	moveq	r3, #1
 800245c:	2300      	movne	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d057      	beq.n	800252e <HAL_ADC_IRQHandler+0x1b8>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d054      	beq.n	800252e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d139      	bne.n	800251e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d12b      	bne.n	800251e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d124      	bne.n	800251e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11d      	bne.n	800251e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fc1a 	bl	8002d58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 020c 	mvn.w	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	bf0c      	ite	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	2300      	movne	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <HAL_ADC_IRQHandler+0x21a>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d014      	beq.n	8002590 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10d      	bne.n	8002590 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f935 	bl	80027f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f06f 0201 	mvn.w	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b20      	cmp	r3, #32
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x27a>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f043 0202 	orr.w	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0220 	mvn.w	r2, #32
 80025de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f90f 	bl	8002804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f06f 0220 	mvn.w	r2, #32
 80025ee:	601a      	str	r2, [r3, #0]
  }
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Start_DMA+0x1e>
 8002612:	2302      	movs	r3, #2
 8002614:	e0cc      	b.n	80027b0 <HAL_ADC_Start_DMA+0x1b8>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d018      	beq.n	800265e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800263c:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <HAL_ADC_Start_DMA+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a5e      	ldr	r2, [pc, #376]	; (80027bc <HAL_ADC_Start_DMA+0x1c4>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9a      	lsrs	r2, r3, #18
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002650:	e002      	b.n	8002658 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	3b01      	subs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 80a0 	bne.w	80027ae <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002698:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f023 0206 	bic.w	r2, r3, #6
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
 80026ba:	e002      	b.n	80026c2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_ADC_Start_DMA+0x1c8>)
 80026cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <HAL_ADC_Start_DMA+0x1cc>)
 80026d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_ADC_Start_DMA+0x1d0>)
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_ADC_Start_DMA+0x1d4>)
 80026e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	334c      	adds	r3, #76	; 0x4c
 800271a:	4619      	mov	r1, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f000 fce4 	bl	80030ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2b00      	cmp	r3, #0
 800272e:	d12a      	bne.n	8002786 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <HAL_ADC_Start_DMA+0x1d8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d015      	beq.n	8002766 <HAL_ADC_Start_DMA+0x16e>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_ADC_Start_DMA+0x1dc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d105      	bne.n	8002750 <HAL_ADC_Start_DMA+0x158>
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_ADC_Start_DMA+0x1c8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <HAL_ADC_Start_DMA+0x1e0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d129      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1b6>
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_ADC_Start_DMA+0x1c8>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2b0f      	cmp	r3, #15
 8002764:	d823      	bhi.n	80027ae <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11c      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	e013      	b.n	80027ae <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_ADC_Start_DMA+0x1d8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d10e      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1b6>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ac:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000004 	.word	0x20000004
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	40012300 	.word	0x40012300
 80027c4:	08002c55 	.word	0x08002c55
 80027c8:	08002d0f 	.word	0x08002d0f
 80027cc:	08002d2b 	.word	0x08002d2b
 80027d0:	40012000 	.word	0x40012000
 80027d4:	40012100 	.word	0x40012100
 80027d8:	40012200 	.word	0x40012200

080027dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1c>
 8002830:	2302      	movs	r3, #2
 8002832:	e105      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x228>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b09      	cmp	r3, #9
 8002842:	d925      	bls.n	8002890 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68d9      	ldr	r1, [r3, #12]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	3b1e      	subs	r3, #30
 800285a:	2207      	movs	r2, #7
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43da      	mvns	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	400a      	ands	r2, r1
 8002868:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68d9      	ldr	r1, [r3, #12]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	4603      	mov	r3, r0
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4403      	add	r3, r0
 8002882:	3b1e      	subs	r3, #30
 8002884:	409a      	lsls	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	e022      	b.n	80028d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6919      	ldr	r1, [r3, #16]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	2207      	movs	r2, #7
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	400a      	ands	r2, r1
 80028b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4403      	add	r3, r0
 80028cc:	409a      	lsls	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d824      	bhi.n	8002928 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b05      	subs	r3, #5
 80028f0:	221f      	movs	r2, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	400a      	ands	r2, r1
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	4618      	mov	r0, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b05      	subs	r3, #5
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
 8002926:	e04c      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b0c      	cmp	r3, #12
 800292e:	d824      	bhi.n	800297a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b23      	subs	r3, #35	; 0x23
 8002942:	221f      	movs	r2, #31
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43da      	mvns	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	400a      	ands	r2, r1
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	4618      	mov	r0, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b23      	subs	r3, #35	; 0x23
 800296c:	fa00 f203 	lsl.w	r2, r0, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
 8002978:	e023      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b41      	subs	r3, #65	; 0x41
 800298c:	221f      	movs	r2, #31
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	400a      	ands	r2, r1
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b41      	subs	r3, #65	; 0x41
 80029b6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_ADC_ConfigChannel+0x234>)
 80029c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_ADC_ConfigChannel+0x238>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d109      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1cc>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b12      	cmp	r3, #18
 80029d6:	d105      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_ADC_ConfigChannel+0x238>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d123      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x21e>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d003      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x1e6>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b11      	cmp	r3, #17
 80029fc:	d11b      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d111      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_ADC_ConfigChannel+0x23c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_ADC_ConfigChannel+0x240>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	0c9a      	lsrs	r2, r3, #18
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a28:	e002      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f9      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	40012000 	.word	0x40012000
 8002a54:	20000004 	.word	0x20000004
 8002a58:	431bde83 	.word	0x431bde83

08002a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a64:	4b79      	ldr	r3, [pc, #484]	; (8002c4c <ADC_Init+0x1f0>)
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <ADC_Init+0x1f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e00f      	b.n	8002b5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0202 	bic.w	r2, r2, #2
 8002b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
 8002b74:	005a      	lsls	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	035a      	lsls	r2, r3, #13
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e007      	b.n	8002bd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	051a      	lsls	r2, r3, #20
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c12:	025a      	lsls	r2, r3, #9
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	029a      	lsls	r2, r3, #10
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	0f000001 	.word	0x0f000001

08002c54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d13c      	bne.n	8002ce8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d12b      	bne.n	8002ce0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d127      	bne.n	8002ce0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d119      	bne.n	8002ce0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0220 	bic.w	r2, r2, #32
 8002cba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7fe fe19 	bl	8001918 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce6:	e00e      	b.n	8002d06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fd85 	bl	8002804 <HAL_ADC_ErrorCallback>
}
 8002cfa:	e004      	b.n	8002d06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff fd5d 	bl	80027dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2240      	movs	r2, #64	; 0x40
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fd5a 	bl	8002804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	; (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eec:	f7ff ff8e 	bl	8002e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff29 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff3e 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff8e 	bl	8002e60 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5d 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff31 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa2 	bl	8002ec8 <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff f97a 	bl	8002294 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e099      	b.n	80030e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fcc:	e00f      	b.n	8002fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fce:	f7ff f961 	bl	8002294 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d908      	bls.n	8002fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e078      	b.n	80030e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e8      	bne.n	8002fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_DMA_Init+0x158>)
 8003008:	4013      	ands	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b04      	cmp	r3, #4
 8003046:	d107      	bne.n	8003058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	4313      	orrs	r3, r2
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0307 	bic.w	r3, r3, #7
 800306e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2b04      	cmp	r3, #4
 8003080:	d117      	bne.n	80030b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa6f 	bl	8003578 <DMA_CheckFifoParam>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ae:	2301      	movs	r3, #1
 80030b0:	e016      	b.n	80030e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa26 	bl	800350c <DMA_CalcBaseAndBitshift>
 80030c0:	4603      	mov	r3, r0
 80030c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	223f      	movs	r2, #63	; 0x3f
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	f010803f 	.word	0xf010803f

080030ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_DMA_Start_IT+0x26>
 800310e:	2302      	movs	r3, #2
 8003110:	e040      	b.n	8003194 <HAL_DMA_Start_IT+0xa8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d12f      	bne.n	8003186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f9b8 	bl	80034b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	223f      	movs	r2, #63	; 0x3f
 8003146:	409a      	lsls	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0216 	orr.w	r2, r2, #22
 800315a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0208 	orr.w	r2, r2, #8
 8003172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e005      	b.n	8003192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a8:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_DMA_IRQHandler+0x258>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a92      	ldr	r2, [pc, #584]	; (80033f8 <HAL_DMA_IRQHandler+0x25c>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2208      	movs	r2, #8
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01a      	beq.n	8003208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	2208      	movs	r2, #8
 80031f6:	409a      	lsls	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	2201      	movs	r2, #1
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	2204      	movs	r2, #4
 8003244:	409a      	lsls	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	2204      	movs	r2, #4
 8003262:	409a      	lsls	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	2210      	movs	r2, #16
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d043      	beq.n	800330c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d03c      	beq.n	800330c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2210      	movs	r2, #16
 8003298:	409a      	lsls	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d018      	beq.n	80032de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d024      	beq.n	800330c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
 80032ca:	e01f      	b.n	800330c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
 80032dc:	e016      	b.n	800330c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0208 	bic.w	r2, r2, #8
 80032fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	2220      	movs	r2, #32
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 808e 	beq.w	800343a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8086 	beq.w	800343a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	2220      	movs	r2, #32
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b05      	cmp	r3, #5
 8003344:	d136      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0216 	bic.w	r2, r2, #22
 8003354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_DMA_IRQHandler+0x1da>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0208 	bic.w	r2, r2, #8
 8003384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	223f      	movs	r2, #63	; 0x3f
 800338c:	409a      	lsls	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d07d      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
        }
        return;
 80033b2:	e078      	b.n	80034a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01c      	beq.n	80033fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d108      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d030      	beq.n	800343a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
 80033e0:	e02b      	b.n	800343a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d027      	beq.n	800343a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	e022      	b.n	800343a <HAL_DMA_IRQHandler+0x29e>
 80033f4:	20000004 	.word	0x20000004
 80033f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0210 	bic.w	r2, r2, #16
 8003418:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	2b00      	cmp	r3, #0
 8003440:	d032      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d022      	beq.n	8003494 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2205      	movs	r2, #5
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3301      	adds	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	429a      	cmp	r2, r3
 8003470:	d307      	bcc.n	8003482 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f2      	bne.n	8003466 <HAL_DMA_IRQHandler+0x2ca>
 8003480:	e000      	b.n	8003484 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003482:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
 80034a4:	e000      	b.n	80034a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80034a6:	bf00      	nop
    }
  }
}
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop

080034b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d108      	bne.n	80034f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ee:	e007      	b.n	8003500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	60da      	str	r2, [r3, #12]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	3b10      	subs	r3, #16
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <DMA_CalcBaseAndBitshift+0x64>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <DMA_CalcBaseAndBitshift+0x68>)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d909      	bls.n	800354e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	1d1a      	adds	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	659a      	str	r2, [r3, #88]	; 0x58
 800354c:	e007      	b.n	800355e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	aaaaaaab 	.word	0xaaaaaaab
 8003574:	080075d8 	.word	0x080075d8

08003578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11f      	bne.n	80035d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d855      	bhi.n	8003644 <DMA_CheckFifoParam+0xcc>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <DMA_CheckFifoParam+0x28>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035c3 	.word	0x080035c3
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	08003645 	.word	0x08003645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d045      	beq.n	8003648 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c0:	e042      	b.n	8003648 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ca:	d13f      	bne.n	800364c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d0:	e03c      	b.n	800364c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	d121      	bne.n	8003620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d836      	bhi.n	8003650 <DMA_CheckFifoParam+0xd8>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <DMA_CheckFifoParam+0x70>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	080035ff 	.word	0x080035ff
 80035f0:	080035f9 	.word	0x080035f9
 80035f4:	08003611 	.word	0x08003611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e02f      	b.n	800365e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d024      	beq.n	8003654 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360e:	e021      	b.n	8003654 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003618:	d11e      	bne.n	8003658 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800361e:	e01b      	b.n	8003658 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <DMA_CheckFifoParam+0xb4>
 8003626:	2b03      	cmp	r3, #3
 8003628:	d003      	beq.n	8003632 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800362a:	e018      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e015      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
      break;
 8003642:	e00b      	b.n	800365c <DMA_CheckFifoParam+0xe4>
      break;
 8003644:	bf00      	nop
 8003646:	e00a      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      break;
 8003648:	bf00      	nop
 800364a:	e008      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      break;
 800364c:	bf00      	nop
 800364e:	e006      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      break;   
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <DMA_CheckFifoParam+0xe6>
      break;
 800365c:	bf00      	nop
    }
  } 
  
  return status; 
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e16b      	b.n	8003960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f040 815a 	bne.w	800395a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d00b      	beq.n	80036c6 <HAL_GPIO_Init+0x5a>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ba:	2b11      	cmp	r3, #17
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b12      	cmp	r3, #18
 80036c4:	d130      	bne.n	8003728 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 0201 	and.w	r2, r3, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0xfc>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b12      	cmp	r3, #18
 8003766:	d123      	bne.n	80037b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80b4 	beq.w	800395a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_GPIO_Init+0x308>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_GPIO_Init+0x308>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <HAL_GPIO_Init+0x308>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380e:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_GPIO_Init+0x30c>)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a51      	ldr	r2, [pc, #324]	; (800397c <HAL_GPIO_Init+0x310>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a50      	ldr	r2, [pc, #320]	; (8003980 <HAL_GPIO_Init+0x314>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d025      	beq.n	800388e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4f      	ldr	r2, [pc, #316]	; (8003984 <HAL_GPIO_Init+0x318>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4e      	ldr	r2, [pc, #312]	; (8003988 <HAL_GPIO_Init+0x31c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x21a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4d      	ldr	r2, [pc, #308]	; (800398c <HAL_GPIO_Init+0x320>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x216>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_GPIO_Init+0x324>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x212>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4b      	ldr	r2, [pc, #300]	; (8003994 <HAL_GPIO_Init+0x328>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_GPIO_Init+0x32c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x20a>
 8003872:	2307      	movs	r3, #7
 8003874:	e00e      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003876:	2308      	movs	r3, #8
 8003878:	e00c      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387a:	2306      	movs	r3, #6
 800387c:	e00a      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387e:	2305      	movs	r3, #5
 8003880:	e008      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003882:	2304      	movs	r3, #4
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003886:	2303      	movs	r3, #3
 8003888:	e004      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388a:	2302      	movs	r3, #2
 800388c:	e002      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003892:	2300      	movs	r3, #0
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f002 0203 	and.w	r2, r2, #3
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	4093      	lsls	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a4:	4934      	ldr	r1, [pc, #208]	; (8003978 <HAL_GPIO_Init+0x30c>)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_GPIO_Init+0x330>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d6:	4a31      	ldr	r2, [pc, #196]	; (800399c <HAL_GPIO_Init+0x330>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_GPIO_Init+0x330>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <HAL_GPIO_Init+0x330>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_GPIO_Init+0x330>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_GPIO_Init+0x330>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_GPIO_Init+0x330>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_GPIO_Init+0x330>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	f67f ae90 	bls.w	8003688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003968:	bf00      	nop
 800396a:	3724      	adds	r7, #36	; 0x24
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40023800 	.word	0x40023800
 8003978:	40013800 	.word	0x40013800
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40021400 	.word	0x40021400
 8003994:	40021800 	.word	0x40021800
 8003998:	40021c00 	.word	0x40021c00
 800399c:	40013c00 	.word	0x40013c00

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039bc:	e003      	b.n	80039c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	041a      	lsls	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	619a      	str	r2, [r3, #24]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e11f      	b.n	8003c26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe f8b4 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a38:	f001 fd6c 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_I2C_Init+0x25c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d807      	bhi.n	8003a58 <HAL_I2C_Init+0x84>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a7a      	ldr	r2, [pc, #488]	; (8003c34 <HAL_I2C_Init+0x260>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	bf94      	ite	ls
 8003a50:	2301      	movls	r3, #1
 8003a52:	2300      	movhi	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e006      	b.n	8003a66 <HAL_I2C_Init+0x92>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a77      	ldr	r2, [pc, #476]	; (8003c38 <HAL_I2C_Init+0x264>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	bf94      	ite	ls
 8003a60:	2301      	movls	r3, #1
 8003a62:	2300      	movhi	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0db      	b.n	8003c26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a72      	ldr	r2, [pc, #456]	; (8003c3c <HAL_I2C_Init+0x268>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0c9b      	lsrs	r3, r3, #18
 8003a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a64      	ldr	r2, [pc, #400]	; (8003c30 <HAL_I2C_Init+0x25c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d802      	bhi.n	8003aa8 <HAL_I2C_Init+0xd4>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	e009      	b.n	8003abc <HAL_I2C_Init+0xe8>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <HAL_I2C_Init+0x26c>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	3301      	adds	r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4956      	ldr	r1, [pc, #344]	; (8003c30 <HAL_I2C_Init+0x25c>)
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	d80d      	bhi.n	8003af8 <HAL_I2C_Init+0x124>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e59      	subs	r1, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	bf38      	it	cc
 8003af4:	2304      	movcc	r3, #4
 8003af6:	e04f      	b.n	8003b98 <HAL_I2C_Init+0x1c4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <HAL_I2C_Init+0x150>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e012      	b.n	8003b4a <HAL_I2C_Init+0x176>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Init+0x17e>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e022      	b.n	8003b98 <HAL_I2C_Init+0x1c4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_I2C_Init+0x1a4>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1e58      	subs	r0, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	440b      	add	r3, r1
 8003b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_Init+0x1c4>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6809      	ldr	r1, [r1, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6911      	ldr	r1, [r2, #16]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	000186a0 	.word	0x000186a0
 8003c34:	001e847f 	.word	0x001e847f
 8003c38:	003d08ff 	.word	0x003d08ff
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e128      	b.n	8003ea8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a90      	ldr	r2, [pc, #576]	; (8003eb0 <HAL_I2S_Init+0x26c>)
 8003c6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fd ffc1 	bl	8001bf8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c8c:	f023 030f 	bic.w	r3, r3, #15
 8003c90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2202      	movs	r2, #2
 8003c98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d060      	beq.n	8003d64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003caa:	2310      	movs	r3, #16
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e001      	b.n	8003cb4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d802      	bhi.n	8003cc2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f001 fd1c 	bl	8005700 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cc8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd2:	d125      	bne.n	8003d20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	3305      	adds	r3, #5
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	e01f      	b.n	8003d3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	3305      	adds	r3, #5
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	e00e      	b.n	8003d3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	3305      	adds	r3, #5
 8003d3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <HAL_I2S_Init+0x270>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e003      	b.n	8003d6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d64:	2302      	movs	r3, #2
 8003d66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d902      	bls.n	8003d78 <HAL_I2S_Init+0x134>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2bff      	cmp	r3, #255	; 0xff
 8003d76:	d907      	bls.n	8003d88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e08f      	b.n	8003ea8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	ea42 0103 	orr.w	r1, r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003da6:	f023 030f 	bic.w	r3, r3, #15
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6851      	ldr	r1, [r2, #4]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68d2      	ldr	r2, [r2, #12]
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6992      	ldr	r2, [r2, #24]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d161      	bne.n	8003e98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a38      	ldr	r2, [pc, #224]	; (8003eb8 <HAL_I2S_Init+0x274>)
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a37      	ldr	r2, [pc, #220]	; (8003ebc <HAL_I2S_Init+0x278>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_I2S_Init+0x1a4>
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_I2S_Init+0x27c>)
 8003de6:	e001      	b.n	8003dec <HAL_I2S_Init+0x1a8>
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	4932      	ldr	r1, [pc, #200]	; (8003ebc <HAL_I2S_Init+0x278>)
 8003df4:	428a      	cmp	r2, r1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2S_Init+0x1b8>
 8003df8:	4a31      	ldr	r2, [pc, #196]	; (8003ec0 <HAL_I2S_Init+0x27c>)
 8003dfa:	e001      	b.n	8003e00 <HAL_I2S_Init+0x1bc>
 8003dfc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <HAL_I2S_Init+0x278>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_I2S_Init+0x1d4>
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <HAL_I2S_Init+0x27c>)
 8003e16:	e001      	b.n	8003e1c <HAL_I2S_Init+0x1d8>
 8003e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <HAL_I2S_Init+0x278>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_I2S_Init+0x1ea>
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_I2S_Init+0x27c>)
 8003e2c:	e001      	b.n	8003e32 <HAL_I2S_Init+0x1ee>
 8003e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3e:	d003      	beq.n	8003e48 <HAL_I2S_Init+0x204>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e001      	b.n	8003e54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	b299      	uxth	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003e6a:	4303      	orrs	r3, r0
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <HAL_I2S_Init+0x278>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2S_Init+0x24c>
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_I2S_Init+0x27c>)
 8003e8e:	e001      	b.n	8003e94 <HAL_I2S_Init+0x250>
 8003e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e94:	897a      	ldrh	r2, [r7, #10]
 8003e96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	08003fd3 	.word	0x08003fd3
 8003eb4:	cccccccd 	.word	0xcccccccd
 8003eb8:	080043fd 	.word	0x080043fd
 8003ebc:	40003800 	.word	0x40003800
 8003ec0:	40003400 	.word	0x40003400

08003ec4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10e      	bne.n	8003f6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ffb8 	bl	8003edc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	b292      	uxth	r2, r2
 8003f88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10e      	bne.n	8003fca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff93 	bl	8003ef0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d13a      	bne.n	8004064 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d109      	bne.n	800400c <I2S_IRQHandler+0x3a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d102      	bne.n	800400c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ffb4 	bl	8003f74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d126      	bne.n	8004064 <I2S_IRQHandler+0x92>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d11f      	bne.n	8004064 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004032:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff50 	bl	8003f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d136      	bne.n	80040de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d109      	bne.n	800408e <I2S_IRQHandler+0xbc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d102      	bne.n	800408e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ff45 	bl	8003f18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d122      	bne.n	80040de <I2S_IRQHandler+0x10c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d11b      	bne.n	80040de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f043 0204 	orr.w	r2, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff13 	bl	8003f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d002      	beq.n	8004114 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800410e:	2302      	movs	r3, #2
 8004110:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004112:	e160      	b.n	80043d6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e15a      	b.n	80043e0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8004136:	2302      	movs	r3, #2
 8004138:	e152      	b.n	80043e0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d002      	beq.n	8004166 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d114      	bne.n	8004190 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800417a:	887b      	ldrh	r3, [r7, #2]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	865a      	strh	r2, [r3, #50]	; 0x32
 800418e:	e00b      	b.n	80041a8 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	4a8b      	ldr	r2, [pc, #556]	; (80043e8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	4a8a      	ldr	r2, [pc, #552]	; (80043ec <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	4a89      	ldr	r2, [pc, #548]	; (80043f0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80041cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4a85      	ldr	r2, [pc, #532]	; (80043e8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	4a84      	ldr	r2, [pc, #528]	; (80043ec <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80041dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	4a83      	ldr	r2, [pc, #524]	; (80043f0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80041e4:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f8:	d002      	beq.n	8004200 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d16b      	bne.n	80042d8 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a79      	ldr	r2, [pc, #484]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8004212:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004214:	e001      	b.n	800421a <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8004216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421a:	330c      	adds	r3, #12
 800421c:	4619      	mov	r1, r3
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004226:	b29b      	uxth	r3, r3
 8004228:	f7fe ff60 	bl	80030ec <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a70      	ldr	r2, [pc, #448]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004238:	e001      	b.n	800423e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	496b      	ldr	r1, [pc, #428]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004246:	428b      	cmp	r3, r1
 8004248:	d101      	bne.n	800424e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800424a:	4b6b      	ldr	r3, [pc, #428]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800424c:	e001      	b.n	8004252 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800424e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	b29b      	uxth	r3, r3
 8004274:	f7fe ff3a 	bl	80030ec <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0202 	orr.w	r2, r2, #2
 8004286:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	f000 809e 	beq.w	80043d6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a55      	ldr	r2, [pc, #340]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80042a4:	4b54      	ldr	r3, [pc, #336]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80042a6:	e001      	b.n	80042ac <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80042a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4950      	ldr	r1, [pc, #320]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80042b4:	428b      	cmp	r3, r1
 80042b6:	d101      	bne.n	80042bc <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80042ba:	e001      	b.n	80042c0 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80042bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c4:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d4:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80042d6:	e07e      	b.n	80043d6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e6:	d10a      	bne.n	80042fe <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a38      	ldr	r2, [pc, #224]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004318:	e001      	b.n	800431e <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800431a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800431e:	330c      	adds	r3, #12
 8004320:	461a      	mov	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	b29b      	uxth	r3, r3
 8004328:	f7fe fee0 	bl	80030ec <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a30      	ldr	r2, [pc, #192]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8004336:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004338:	e001      	b.n	800433e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800433a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	492b      	ldr	r1, [pc, #172]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004346:	428b      	cmp	r3, r1
 8004348:	d101      	bne.n	800434e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800434a:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800434c:	e001      	b.n	8004352 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800434e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004352:	f042 0202 	orr.w	r2, r2, #2
 8004356:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	4619      	mov	r1, r3
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004370:	b29b      	uxth	r3, r3
 8004372:	f7fe febb 	bl	80030ec <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d01e      	beq.n	80043d4 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80043a2:	e001      	b.n	80043a8 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80043a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4911      	ldr	r1, [pc, #68]	; (80043f4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80043b0:	428b      	cmp	r3, r1
 80043b2:	d101      	bne.n	80043b8 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80043b6:	e001      	b.n	80043bc <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80043b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043c0:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d0:	61da      	str	r2, [r3, #28]
 80043d2:	e000      	b.n	80043d6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80043d4:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80043de:	7ffb      	ldrb	r3, [r7, #31]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	080046a5 	.word	0x080046a5
 80043ec:	080046c1 	.word	0x080046c1
 80043f0:	080047f1 	.word	0x080047f1
 80043f4:	40003800 	.word	0x40003800
 80043f8:	40003400 	.word	0x40003400

080043fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4aa2      	ldr	r2, [pc, #648]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004416:	4ba2      	ldr	r3, [pc, #648]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004418:	e001      	b.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800441a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a9b      	ldr	r2, [pc, #620]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004434:	4b9a      	ldr	r3, [pc, #616]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004436:	e001      	b.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004448:	d004      	beq.n	8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 8099 	bne.w	8004586 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa01 	bl	8004870 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 faa4 	bl	80049d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d13a      	bne.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d035      	beq.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a7e      	ldr	r2, [pc, #504]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80044a6:	4b7e      	ldr	r3, [pc, #504]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044a8:	e001      	b.n	80044ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4979      	ldr	r1, [pc, #484]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044b6:	428b      	cmp	r3, r1
 80044b8:	d101      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044ba:	4b79      	ldr	r3, [pc, #484]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044bc:	e001      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0202 	orr.w	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fcfe 	bl	8003f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	f040 80be 	bne.w	8004690 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80b8 	beq.w	8004690 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800452e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a59      	ldr	r2, [pc, #356]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800453a:	4b59      	ldr	r3, [pc, #356]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800453c:	e001      	b.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800453e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4954      	ldr	r1, [pc, #336]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800454a:	428b      	cmp	r3, r1
 800454c:	d101      	bne.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800454e:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004550:	e001      	b.n	8004556 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800455a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fcc0 	bl	8003f04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004584:	e084      	b.n	8004690 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d107      	bne.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f99a 	bl	80048d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f9d9 	bl	800496c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d12f      	bne.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d02a      	beq.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2e      	ldr	r2, [pc, #184]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045e8:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045ea:	e001      	b.n	80045f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4929      	ldr	r1, [pc, #164]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d101      	bne.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045fe:	e001      	b.n	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004604:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004608:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fc70 	bl	8003f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d131      	bne.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02c      	beq.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004644:	e001      	b.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4912      	ldr	r1, [pc, #72]	; (800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004652:	428b      	cmp	r3, r1
 8004654:	d101      	bne.n	800465a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004658:	e001      	b.n	800465e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004662:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004672:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f043 0204 	orr.w	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fc3b 	bl	8003f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	e000      	b.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004690:	bf00      	nop
}
 8004692:	bf00      	nop
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40003800 	.word	0x40003800
 80046a0:	40003400 	.word	0x40003400

080046a4 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7fd f958 	bl	8001968 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 8084 	bne.w	80047e0 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d13c      	bne.n	800475c <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f0:	d006      	beq.n	8004700 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d116      	bne.n	800472e <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a38      	ldr	r2, [pc, #224]	; (80047e8 <I2SEx_TxRxDMACplt+0x128>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d101      	bne.n	800470e <I2SEx_TxRxDMACplt+0x4e>
 800470a:	4b38      	ldr	r3, [pc, #224]	; (80047ec <I2SEx_TxRxDMACplt+0x12c>)
 800470c:	e001      	b.n	8004712 <I2SEx_TxRxDMACplt+0x52>
 800470e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4933      	ldr	r1, [pc, #204]	; (80047e8 <I2SEx_TxRxDMACplt+0x128>)
 800471a:	428b      	cmp	r3, r1
 800471c:	d101      	bne.n	8004722 <I2SEx_TxRxDMACplt+0x62>
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <I2SEx_TxRxDMACplt+0x12c>)
 8004720:	e001      	b.n	8004726 <I2SEx_TxRxDMACplt+0x66>
 8004722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	e007      	b.n	800473e <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7fd f92e 	bl	80019b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d13c      	bne.n	80047e0 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004774:	d006      	beq.n	8004784 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0202 	bic.w	r2, r2, #2
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	e015      	b.n	80047c2 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <I2SEx_TxRxDMACplt+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <I2SEx_TxRxDMACplt+0xe4>
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <I2SEx_TxRxDMACplt+0x12c>)
 80047a2:	e001      	b.n	80047a8 <I2SEx_TxRxDMACplt+0xe8>
 80047a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	490e      	ldr	r1, [pc, #56]	; (80047e8 <I2SEx_TxRxDMACplt+0x128>)
 80047b0:	428b      	cmp	r3, r1
 80047b2:	d101      	bne.n	80047b8 <I2SEx_TxRxDMACplt+0xf8>
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <I2SEx_TxRxDMACplt+0x12c>)
 80047b6:	e001      	b.n	80047bc <I2SEx_TxRxDMACplt+0xfc>
 80047b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047bc:	f022 0202 	bic.w	r2, r2, #2
 80047c0:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7fd f8ec 	bl	80019b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40003800 	.word	0x40003800
 80047ec:	40003400 	.word	0x40003400

080047f0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0203 	bic.w	r2, r2, #3
 800480c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a15      	ldr	r2, [pc, #84]	; (8004868 <I2SEx_TxRxDMAError+0x78>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d101      	bne.n	800481c <I2SEx_TxRxDMAError+0x2c>
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <I2SEx_TxRxDMAError+0x7c>)
 800481a:	e001      	b.n	8004820 <I2SEx_TxRxDMAError+0x30>
 800481c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4910      	ldr	r1, [pc, #64]	; (8004868 <I2SEx_TxRxDMAError+0x78>)
 8004828:	428b      	cmp	r3, r1
 800482a:	d101      	bne.n	8004830 <I2SEx_TxRxDMAError+0x40>
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <I2SEx_TxRxDMAError+0x7c>)
 800482e:	e001      	b.n	8004834 <I2SEx_TxRxDMAError+0x44>
 8004830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004834:	f022 0203 	bic.w	r2, r2, #3
 8004838:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f043 0208 	orr.w	r2, r3, #8
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fb52 	bl	8003f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40003800 	.word	0x40003800
 800486c:	40003400 	.word	0x40003400

08004870 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	1c99      	adds	r1, r3, #2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6251      	str	r1, [r2, #36]	; 0x24
 8004882:	881a      	ldrh	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d113      	bne.n	80048ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fd f877 	bl	80019b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c99      	adds	r1, r3, #2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6251      	str	r1, [r2, #36]	; 0x24
 80048e6:	8819      	ldrh	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <I2SEx_TxISR_I2SExt+0x90>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <I2SEx_TxISR_I2SExt+0x22>
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <I2SEx_TxISR_I2SExt+0x94>)
 80048f4:	e001      	b.n	80048fa <I2SEx_TxISR_I2SExt+0x26>
 80048f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fa:	460a      	mov	r2, r1
 80048fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d121      	bne.n	800495a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <I2SEx_TxISR_I2SExt+0x90>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <I2SEx_TxISR_I2SExt+0x50>
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <I2SEx_TxISR_I2SExt+0x94>)
 8004922:	e001      	b.n	8004928 <I2SEx_TxISR_I2SExt+0x54>
 8004924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	490d      	ldr	r1, [pc, #52]	; (8004964 <I2SEx_TxISR_I2SExt+0x90>)
 8004930:	428b      	cmp	r3, r1
 8004932:	d101      	bne.n	8004938 <I2SEx_TxISR_I2SExt+0x64>
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <I2SEx_TxISR_I2SExt+0x94>)
 8004936:	e001      	b.n	800493c <I2SEx_TxISR_I2SExt+0x68>
 8004938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800493c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004940:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fd f82f 	bl	80019b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40003800 	.word	0x40003800
 8004968:	40003400 	.word	0x40003400

0800496c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68d8      	ldr	r0, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	1c99      	adds	r1, r3, #2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004984:	b282      	uxth	r2, r0
 8004986:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d113      	bne.n	80049c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fff8 	bl	80019b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a20      	ldr	r2, [pc, #128]	; (8004a60 <I2SEx_RxISR_I2SExt+0x90>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <I2SEx_RxISR_I2SExt+0x16>
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <I2SEx_RxISR_I2SExt+0x94>)
 80049e4:	e001      	b.n	80049ea <I2SEx_RxISR_I2SExt+0x1a>
 80049e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ea:	68d8      	ldr	r0, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	1c99      	adds	r1, r3, #2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049f6:	b282      	uxth	r2, r0
 80049f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d121      	bne.n	8004a56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <I2SEx_RxISR_I2SExt+0x90>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <I2SEx_RxISR_I2SExt+0x50>
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <I2SEx_RxISR_I2SExt+0x94>)
 8004a1e:	e001      	b.n	8004a24 <I2SEx_RxISR_I2SExt+0x54>
 8004a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	490d      	ldr	r1, [pc, #52]	; (8004a60 <I2SEx_RxISR_I2SExt+0x90>)
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	d101      	bne.n	8004a34 <I2SEx_RxISR_I2SExt+0x64>
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <I2SEx_RxISR_I2SExt+0x94>)
 8004a32:	e001      	b.n	8004a38 <I2SEx_RxISR_I2SExt+0x68>
 8004a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fc ffb1 	bl	80019b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40003800 	.word	0x40003800
 8004a64:	40003400 	.word	0x40003400

08004a68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6a:	b08f      	sub	sp, #60	; 0x3c
 8004a6c:	af0a      	add	r7, sp, #40	; 0x28
 8004a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e10f      	b.n	8004c9a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fd faab 	bl	8001ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fa9a 	bl	8005ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	687e      	ldr	r6, [r7, #4]
 8004ac6:	466d      	mov	r5, sp
 8004ac8:	f106 0410 	add.w	r4, r6, #16
 8004acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004adc:	1d33      	adds	r3, r6, #4
 8004ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae0:	6838      	ldr	r0, [r7, #0]
 8004ae2:	f001 fa25 	bl	8005f30 <USB_CoreInit>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0d0      	b.n	8004c9a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fa88 	bl	8006014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e04a      	b.n	8004ba0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	333d      	adds	r3, #61	; 0x3d
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	333c      	adds	r3, #60	; 0x3c
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	b298      	uxth	r0, r3
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	3342      	adds	r3, #66	; 0x42
 8004b46:	4602      	mov	r2, r0
 8004b48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	333f      	adds	r3, #63	; 0x3f
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3344      	adds	r3, #68	; 0x44
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3348      	adds	r3, #72	; 0x48
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b86:	7bfa      	ldrb	r2, [r7, #15]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	3350      	adds	r3, #80	; 0x50
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3af      	bcc.n	8004b0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	e044      	b.n	8004c3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	3301      	adds	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d3b5      	bcc.n	8004bb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	687e      	ldr	r6, [r7, #4]
 8004c4c:	466d      	mov	r5, sp
 8004c4e:	f106 0410 	add.w	r4, r6, #16
 8004c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c62:	1d33      	adds	r3, r6, #4
 8004c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c66:	6838      	ldr	r0, [r7, #0]
 8004c68:	f001 f9fe 	bl	8006068 <USB_DevInit>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e00d      	b.n	8004c9a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fbad 	bl	80063f2 <USB_DevDisconnect>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e25b      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d075      	beq.n	8004dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc2:	4ba3      	ldr	r3, [pc, #652]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cce:	4ba0      	ldr	r3, [pc, #640]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d112      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cda:	4b9d      	ldr	r3, [pc, #628]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b99      	ldr	r3, [pc, #612]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05b      	beq.n	8004dac <HAL_RCC_OscConfig+0x108>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d157      	bne.n	8004dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e236      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x74>
 8004d0a:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a90      	ldr	r2, [pc, #576]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0x98>
 8004d22:	4b8b      	ldr	r3, [pc, #556]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a8a      	ldr	r2, [pc, #552]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a87      	ldr	r2, [pc, #540]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xb0>
 8004d3c:	4b84      	ldr	r3, [pc, #528]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a83      	ldr	r2, [pc, #524]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b81      	ldr	r3, [pc, #516]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a80      	ldr	r2, [pc, #512]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fa9a 	bl	8002294 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd fa96 	bl	8002294 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1fb      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xc0>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fd fa86 	bl	8002294 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fd fa82 	bl	8002294 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e1e7      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0xe8>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d063      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dba:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc6:	4b62      	ldr	r3, [pc, #392]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd2:	4b5f      	ldr	r3, [pc, #380]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1bb      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b56      	ldr	r3, [pc, #344]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4952      	ldr	r1, [pc, #328]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	e03a      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e14:	4b4f      	ldr	r3, [pc, #316]	; (8004f54 <HAL_RCC_OscConfig+0x2b0>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fd fa3b 	bl	8002294 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fd fa37 	bl	8002294 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e19c      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	4b46      	ldr	r3, [pc, #280]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4940      	ldr	r1, [pc, #256]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <HAL_RCC_OscConfig+0x2b0>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fa1a 	bl	8002294 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fd fa16 	bl	8002294 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e17b      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d030      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <HAL_RCC_OscConfig+0x2b4>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fd f9fa 	bl	8002294 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fd f9f6 	bl	8002294 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e15b      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x200>
 8004ec2:	e015      	b.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <HAL_RCC_OscConfig+0x2b4>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fd f9e3 	bl	8002294 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fd f9df 	bl	8002294 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e144      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a0 	beq.w	800503e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_OscConfig+0x2b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d121      	bne.n	8004f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCC_OscConfig+0x2b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <HAL_RCC_OscConfig+0x2b8>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f46:	f7fd f9a5 	bl	8002294 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4c:	e011      	b.n	8004f72 <HAL_RCC_OscConfig+0x2ce>
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	42470000 	.word	0x42470000
 8004f58:	42470e80 	.word	0x42470e80
 8004f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f60:	f7fd f998 	bl	8002294 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0fd      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f72:	4b81      	ldr	r3, [pc, #516]	; (8005178 <HAL_RCC_OscConfig+0x4d4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d106      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2f0>
 8004f86:	4b7d      	ldr	r3, [pc, #500]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a7c      	ldr	r2, [pc, #496]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
 8004f92:	e01c      	b.n	8004fce <HAL_RCC_OscConfig+0x32a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b05      	cmp	r3, #5
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x312>
 8004f9c:	4b77      	ldr	r3, [pc, #476]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	4a76      	ldr	r2, [pc, #472]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004fa2:	f043 0304 	orr.w	r3, r3, #4
 8004fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa8:	4b74      	ldr	r3, [pc, #464]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a73      	ldr	r2, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb4:	e00b      	b.n	8004fce <HAL_RCC_OscConfig+0x32a>
 8004fb6:	4b71      	ldr	r3, [pc, #452]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a70      	ldr	r2, [pc, #448]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc2:	4b6e      	ldr	r3, [pc, #440]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	4a6d      	ldr	r2, [pc, #436]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d015      	beq.n	8005002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7fd f95d 	bl	8002294 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fd f959 	bl	8002294 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0bc      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ee      	beq.n	8004fde <HAL_RCC_OscConfig+0x33a>
 8005000:	e014      	b.n	800502c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005002:	f7fd f947 	bl	8002294 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005008:	e00a      	b.n	8005020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fd f943 	bl	8002294 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0a6      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005020:	4b56      	ldr	r3, [pc, #344]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ee      	bne.n	800500a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d105      	bne.n	800503e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005032:	4b52      	ldr	r3, [pc, #328]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	4a51      	ldr	r2, [pc, #324]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8005038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800503c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8092 	beq.w	800516c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005048:	4b4c      	ldr	r3, [pc, #304]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b08      	cmp	r3, #8
 8005052:	d05c      	beq.n	800510e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d141      	bne.n	80050e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	4b48      	ldr	r3, [pc, #288]	; (8005180 <HAL_RCC_OscConfig+0x4dc>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005062:	f7fd f917 	bl	8002294 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fd f913 	bl	8002294 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e078      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507c:	4b3f      	ldr	r3, [pc, #252]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	019b      	lsls	r3, r3, #6
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	3b01      	subs	r3, #1
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	4933      	ldr	r1, [pc, #204]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b2:	4b33      	ldr	r3, [pc, #204]	; (8005180 <HAL_RCC_OscConfig+0x4dc>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fd f8ec 	bl	8002294 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fd f8e8 	bl	8002294 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e04d      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	4b2a      	ldr	r3, [pc, #168]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0x41c>
 80050de:	e045      	b.n	800516c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e0:	4b27      	ldr	r3, [pc, #156]	; (8005180 <HAL_RCC_OscConfig+0x4dc>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fd f8d5 	bl	8002294 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fd f8d1 	bl	8002294 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e036      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005100:	4b1e      	ldr	r3, [pc, #120]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCC_OscConfig+0x44a>
 800510c:	e02e      	b.n	800516c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e029      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_RCC_OscConfig+0x4d8>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	429a      	cmp	r2, r3
 800512c:	d11c      	bne.n	8005168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d115      	bne.n	8005168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005142:	4013      	ands	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005148:	4293      	cmp	r3, r2
 800514a:	d10d      	bne.n	8005168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40007000 	.word	0x40007000
 800517c:	40023800 	.word	0x40023800
 8005180:	42470060 	.word	0x42470060

08005184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0cc      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d90c      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b65      	ldr	r3, [pc, #404]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d044      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d119      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b3f      	ldr	r3, [pc, #252]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e06f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e067      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b37      	ldr	r3, [pc, #220]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4934      	ldr	r1, [pc, #208]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7fd f80e 	bl	8002294 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7fd f80a 	bl	8002294 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e04f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d20c      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f821 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800530e:	4601      	mov	r1, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	5cd3      	ldrb	r3, [r2, r3]
 800531e:	fa21 f303 	lsr.w	r3, r1, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc ff6e 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023c00 	.word	0x40023c00
 8005340:	40023800 	.word	0x40023800
 8005344:	080075c0 	.word	0x080075c0
 8005348:	20000004 	.word	0x20000004
 800534c:	20000008 	.word	0x20000008

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	2300      	movs	r3, #0
 8005360:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005366:	4b63      	ldr	r3, [pc, #396]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b04      	cmp	r3, #4
 8005370:	d007      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x32>
 8005372:	2b08      	cmp	r3, #8
 8005374:	d008      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x38>
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 80b4 	bne.w	80054e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b5e      	ldr	r3, [pc, #376]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800537e:	60bb      	str	r3, [r7, #8]
       break;
 8005380:	e0b3      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b5d      	ldr	r3, [pc, #372]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005384:	60bb      	str	r3, [r7, #8]
      break;
 8005386:	e0b0      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b5a      	ldr	r3, [pc, #360]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b58      	ldr	r3, [pc, #352]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04a      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	f04f 0400 	mov.w	r4, #0
 80053a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	ea03 0501 	and.w	r5, r3, r1
 80053b4:	ea04 0602 	and.w	r6, r4, r2
 80053b8:	4629      	mov	r1, r5
 80053ba:	4632      	mov	r2, r6
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	f04f 0400 	mov.w	r4, #0
 80053c4:	0154      	lsls	r4, r2, #5
 80053c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053ca:	014b      	lsls	r3, r1, #5
 80053cc:	4619      	mov	r1, r3
 80053ce:	4622      	mov	r2, r4
 80053d0:	1b49      	subs	r1, r1, r5
 80053d2:	eb62 0206 	sbc.w	r2, r2, r6
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	f04f 0400 	mov.w	r4, #0
 80053de:	0194      	lsls	r4, r2, #6
 80053e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053e4:	018b      	lsls	r3, r1, #6
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	eb64 0402 	sbc.w	r4, r4, r2
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	00e2      	lsls	r2, r4, #3
 80053f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053fa:	00d9      	lsls	r1, r3, #3
 80053fc:	460b      	mov	r3, r1
 80053fe:	4614      	mov	r4, r2
 8005400:	195b      	adds	r3, r3, r5
 8005402:	eb44 0406 	adc.w	r4, r4, r6
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	02a2      	lsls	r2, r4, #10
 8005410:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005414:	0299      	lsls	r1, r3, #10
 8005416:	460b      	mov	r3, r1
 8005418:	4614      	mov	r4, r2
 800541a:	4618      	mov	r0, r3
 800541c:	4621      	mov	r1, r4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f04f 0400 	mov.w	r4, #0
 8005424:	461a      	mov	r2, r3
 8005426:	4623      	mov	r3, r4
 8005428:	f7fb fb9c 	bl	8000b64 <__aeabi_uldivmod>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e049      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005434:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	f04f 0400 	mov.w	r4, #0
 800543e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	ea03 0501 	and.w	r5, r3, r1
 800544a:	ea04 0602 	and.w	r6, r4, r2
 800544e:	4629      	mov	r1, r5
 8005450:	4632      	mov	r2, r6
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	f04f 0400 	mov.w	r4, #0
 800545a:	0154      	lsls	r4, r2, #5
 800545c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005460:	014b      	lsls	r3, r1, #5
 8005462:	4619      	mov	r1, r3
 8005464:	4622      	mov	r2, r4
 8005466:	1b49      	subs	r1, r1, r5
 8005468:	eb62 0206 	sbc.w	r2, r2, r6
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f04f 0400 	mov.w	r4, #0
 8005474:	0194      	lsls	r4, r2, #6
 8005476:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800547a:	018b      	lsls	r3, r1, #6
 800547c:	1a5b      	subs	r3, r3, r1
 800547e:	eb64 0402 	sbc.w	r4, r4, r2
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005490:	00d9      	lsls	r1, r3, #3
 8005492:	460b      	mov	r3, r1
 8005494:	4614      	mov	r4, r2
 8005496:	195b      	adds	r3, r3, r5
 8005498:	eb44 0406 	adc.w	r4, r4, r6
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	02a2      	lsls	r2, r4, #10
 80054a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80054aa:	0299      	lsls	r1, r3, #10
 80054ac:	460b      	mov	r3, r1
 80054ae:	4614      	mov	r4, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	4621      	mov	r1, r4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f04f 0400 	mov.w	r4, #0
 80054ba:	461a      	mov	r2, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	f7fb fb51 	bl	8000b64 <__aeabi_uldivmod>
 80054c2:	4603      	mov	r3, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	3301      	adds	r3, #1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	60bb      	str	r3, [r7, #8]
      break;
 80054e2:	e002      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e4:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054e6:	60bb      	str	r3, [r7, #8]
      break;
 80054e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ea:	68bb      	ldr	r3, [r7, #8]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f4:	40023800 	.word	0x40023800
 80054f8:	00f42400 	.word	0x00f42400

080054fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <HAL_RCC_GetHCLKFreq+0x14>)
 8005502:	681b      	ldr	r3, [r3, #0]
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000004 	.word	0x20000004

08005514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005518:	f7ff fff0 	bl	80054fc <HAL_RCC_GetHCLKFreq>
 800551c:	4601      	mov	r1, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0a9b      	lsrs	r3, r3, #10
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4a03      	ldr	r2, [pc, #12]	; (8005538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800552a:	5cd3      	ldrb	r3, [r2, r3]
 800552c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	080075d0 	.word	0x080075d0

0800553c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005560:	2b00      	cmp	r3, #0
 8005562:	d035      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005564:	4b62      	ldr	r3, [pc, #392]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800556a:	f7fc fe93 	bl	8002294 <HAL_GetTick>
 800556e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005572:	f7fc fe8f 	bl	8002294 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0b0      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005584:	4b5b      	ldr	r3, [pc, #364]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	019a      	lsls	r2, r3, #6
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	071b      	lsls	r3, r3, #28
 800559c:	4955      	ldr	r1, [pc, #340]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055a4:	4b52      	ldr	r3, [pc, #328]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055aa:	f7fc fe73 	bl	8002294 <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055b2:	f7fc fe6f 	bl	8002294 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e090      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055c4:	4b4b      	ldr	r3, [pc, #300]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8083 	beq.w	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	4a43      	ldr	r2, [pc, #268]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6413      	str	r3, [r2, #64]	; 0x40
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055fa:	4b3f      	ldr	r3, [pc, #252]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a3e      	ldr	r2, [pc, #248]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005604:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005606:	f7fc fe45 	bl	8002294 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800560e:	f7fc fe41 	bl	8002294 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e062      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005620:	4b35      	ldr	r3, [pc, #212]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800562c:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02f      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d028      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800564a:	4b2a      	ldr	r3, [pc, #168]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800565a:	4b28      	ldr	r3, [pc, #160]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005666:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d114      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005672:	f7fc fe0f 	bl	8002294 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	e00a      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fc fe0b 	bl	8002294 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	; 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e02a      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ee      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a8:	d10d      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	490d      	ldr	r1, [pc, #52]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]
 80056c4:	e005      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056d0:	6093      	str	r3, [r2, #8]
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056de:	4905      	ldr	r1, [pc, #20]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	42470068 	.word	0x42470068
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40007000 	.word	0x40007000
 80056fc:	42470e40 	.word	0x42470e40

08005700 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d13d      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800571e:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005726:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800572e:	2b01      	cmp	r3, #1
 8005730:	d12f      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005732:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005734:	617b      	str	r3, [r7, #20]
          break;
 8005736:	e02f      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005744:	d108      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e007      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576e:	099b      	lsrs	r3, r3, #6
 8005770:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005782:	0f1b      	lsrs	r3, r3, #28
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	fbb2 f3f3 	udiv	r3, r2, r3
 800578e:	617b      	str	r3, [r7, #20]
          break;
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
          break;
 8005796:	bf00      	nop
        }
      }
      break;
 8005798:	bf00      	nop
    }
  }
  return frequency;
 800579a:	697b      	ldr	r3, [r7, #20]
}
 800579c:	4618      	mov	r0, r3
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00bb8000 	.word	0x00bb8000
 80057b0:	00f42400 	.word	0x00f42400

080057b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e01d      	b.n	8005802 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc faf6 	bl	8001dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f000 f8d0 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005822:	2302      	movs	r3, #2
 8005824:	e0b4      	b.n	8005990 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b0c      	cmp	r3, #12
 800583a:	f200 809f 	bhi.w	800597c <HAL_TIM_PWM_ConfigChannel+0x170>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005879 	.word	0x08005879
 8005848:	0800597d 	.word	0x0800597d
 800584c:	0800597d 	.word	0x0800597d
 8005850:	0800597d 	.word	0x0800597d
 8005854:	080058b9 	.word	0x080058b9
 8005858:	0800597d 	.word	0x0800597d
 800585c:	0800597d 	.word	0x0800597d
 8005860:	0800597d 	.word	0x0800597d
 8005864:	080058fb 	.word	0x080058fb
 8005868:	0800597d 	.word	0x0800597d
 800586c:	0800597d 	.word	0x0800597d
 8005870:	0800597d 	.word	0x0800597d
 8005874:	0800593b 	.word	0x0800593b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f92a 	bl	8005ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0204 	bic.w	r2, r2, #4
 80058a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6999      	ldr	r1, [r3, #24]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	619a      	str	r2, [r3, #24]
      break;
 80058b6:	e062      	b.n	800597e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f97a 	bl	8005bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6999      	ldr	r1, [r3, #24]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	619a      	str	r2, [r3, #24]
      break;
 80058f8:	e041      	b.n	800597e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f9cf 	bl	8005ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0208 	orr.w	r2, r2, #8
 8005914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0204 	bic.w	r2, r2, #4
 8005924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69d9      	ldr	r1, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	61da      	str	r2, [r3, #28]
      break;
 8005938:	e021      	b.n	800597e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fa23 	bl	8005d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69d9      	ldr	r1, [r3, #28]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	021a      	lsls	r2, r3, #8
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	61da      	str	r2, [r3, #28]
      break;
 800597a:	e000      	b.n	800597e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800597c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a40      	ldr	r2, [pc, #256]	; (8005aac <TIM_Base_SetConfig+0x114>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3d      	ldr	r2, [pc, #244]	; (8005ab0 <TIM_Base_SetConfig+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a3c      	ldr	r2, [pc, #240]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3b      	ldr	r2, [pc, #236]	; (8005ab8 <TIM_Base_SetConfig+0x120>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a3a      	ldr	r2, [pc, #232]	; (8005abc <TIM_Base_SetConfig+0x124>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d108      	bne.n	80059ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2f      	ldr	r2, [pc, #188]	; (8005aac <TIM_Base_SetConfig+0x114>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d027      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <TIM_Base_SetConfig+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d023      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2a      	ldr	r2, [pc, #168]	; (8005ab8 <TIM_Base_SetConfig+0x120>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a29      	ldr	r2, [pc, #164]	; (8005abc <TIM_Base_SetConfig+0x124>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a28      	ldr	r2, [pc, #160]	; (8005ac0 <TIM_Base_SetConfig+0x128>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <TIM_Base_SetConfig+0x130>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_Base_SetConfig+0x134>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <TIM_Base_SetConfig+0x138>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <TIM_Base_SetConfig+0x13c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <TIM_Base_SetConfig+0x124>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40010400 	.word	0x40010400
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800
 8005acc:	40001800 	.word	0x40001800
 8005ad0:	40001c00 	.word	0x40001c00
 8005ad4:	40002000 	.word	0x40002000

08005ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 0302 	bic.w	r3, r3, #2
 8005b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <TIM_OC1_SetConfig+0xd8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC1_SetConfig+0x64>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <TIM_OC1_SetConfig+0xdc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d10c      	bne.n	8005b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0308 	bic.w	r3, r3, #8
 8005b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <TIM_OC1_SetConfig+0xd8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_OC1_SetConfig+0x8e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <TIM_OC1_SetConfig+0xdc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d111      	bne.n	8005b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400

08005bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0320 	bic.w	r3, r3, #32
 8005c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <TIM_OC2_SetConfig+0xe4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC2_SetConfig+0x68>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <TIM_OC2_SetConfig+0xe8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10d      	bne.n	8005c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <TIM_OC2_SetConfig+0xe4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_OC2_SetConfig+0x94>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <TIM_OC2_SetConfig+0xe8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d113      	bne.n	8005c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40010400 	.word	0x40010400

08005ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	; (8005d84 <TIM_OC3_SetConfig+0xe0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC3_SetConfig+0x66>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <TIM_OC3_SetConfig+0xe4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10d      	bne.n	8005d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <TIM_OC3_SetConfig+0xe0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC3_SetConfig+0x92>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <TIM_OC3_SetConfig+0xe4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d113      	bne.n	8005d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <TIM_OC4_SetConfig+0xa4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC4_SetConfig+0x68>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <TIM_OC4_SetConfig+0xa8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d109      	bne.n	8005e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40010400 	.word	0x40010400

08005e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e05a      	b.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d022      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d01d      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d018      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40001800 	.word	0x40001800

08005f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f30:	b084      	sub	sp, #16
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	f107 001c 	add.w	r0, r7, #28
 8005f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d122      	bne.n	8005f8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa56 	bl	8006434 <USB_CoreReset>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e01a      	b.n	8005fc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa4a 	bl	8006434 <USB_CoreReset>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fb6:	e005      	b.n	8005fc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10b      	bne.n	8005fe2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f043 0206 	orr.w	r2, r3, #6
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f043 0220 	orr.w	r2, r3, #32
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fee:	b004      	add	sp, #16
 8005ff0:	4770      	bx	lr

08005ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d106      	bne.n	8006040 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e00b      	b.n	8006058 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e001      	b.n	8006058 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e003      	b.n	8006060 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006058:	2032      	movs	r0, #50	; 0x32
 800605a:	f7fc f927 	bl	80022ac <HAL_Delay>

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006068:	b084      	sub	sp, #16
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	e009      	b.n	800609c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3340      	adds	r3, #64	; 0x40
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	2200      	movs	r2, #0
 8006094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b0e      	cmp	r3, #14
 80060a0:	d9f2      	bls.n	8006088 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d11c      	bne.n	80060e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b6:	f043 0302 	orr.w	r3, r3, #2
 80060ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
 80060e0:	e00b      	b.n	80060fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610c:	4619      	mov	r1, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	461a      	mov	r2, r3
 8006116:	680b      	ldr	r3, [r1, #0]
 8006118:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10c      	bne.n	800613a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006126:	2100      	movs	r1, #0
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f949 	bl	80063c0 <USB_SetDevSpeed>
 800612e:	e008      	b.n	8006142 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006130:	2101      	movs	r1, #1
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f944 	bl	80063c0 <USB_SetDevSpeed>
 8006138:	e003      	b.n	8006142 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800613a:	2103      	movs	r1, #3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f93f 	bl	80063c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006142:	2110      	movs	r1, #16
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8f3 	bl	8006330 <USB_FlushTxFifo>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f911 	bl	800637c <USB_FlushRxFifo>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	461a      	mov	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	e043      	b.n	8006216 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a4:	d118      	bne.n	80061d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	461a      	mov	r2, r3
 80061ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e013      	b.n	80061ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e008      	b.n	80061ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	461a      	mov	r2, r3
 80061e6:	2300      	movs	r3, #0
 80061e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	461a      	mov	r2, r3
 800620a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800620e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	3301      	adds	r3, #1
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d3b7      	bcc.n	800618e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e043      	b.n	80062ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623a:	d118      	bne.n	800626e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	461a      	mov	r2, r3
 8006250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e013      	b.n	8006280 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e008      	b.n	8006280 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	461a      	mov	r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	461a      	mov	r2, r3
 80062a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d3b7      	bcc.n	8006224 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f043 0210 	orr.w	r2, r3, #16
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699a      	ldr	r2, [r3, #24]
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <USB_DevInit+0x2c4>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f043 0208 	orr.w	r2, r3, #8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d107      	bne.n	800631c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006314:	f043 0304 	orr.w	r3, r3, #4
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006328:	b004      	add	sp, #16
 800632a:	4770      	bx	lr
 800632c:	803c3800 	.word	0x803c3800

08006330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3301      	adds	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a09      	ldr	r2, [pc, #36]	; (8006378 <USB_FlushTxFifo+0x48>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d901      	bls.n	800635c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e006      	b.n	800636a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b20      	cmp	r3, #32
 8006366:	d0f0      	beq.n	800634a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	00030d40 	.word	0x00030d40

0800637c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2210      	movs	r2, #16
 800638c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <USB_FlushRxFifo+0x40>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d901      	bls.n	80063a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e006      	b.n	80063ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d0f0      	beq.n	800638e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	00030d40 	.word	0x00030d40

080063c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006420:	f043 0302 	orr.w	r3, r3, #2
 8006424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <USB_CoreReset+0x64>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e01b      	b.n	800648a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	daf2      	bge.n	8006440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f043 0201 	orr.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <USB_CoreReset+0x64>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d0f0      	beq.n	800646a <USB_CoreReset+0x36>

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	00030d40 	.word	0x00030d40

0800649c <__libc_init_array>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	4e0d      	ldr	r6, [pc, #52]	; (80064d4 <__libc_init_array+0x38>)
 80064a0:	4c0d      	ldr	r4, [pc, #52]	; (80064d8 <__libc_init_array+0x3c>)
 80064a2:	1ba4      	subs	r4, r4, r6
 80064a4:	10a4      	asrs	r4, r4, #2
 80064a6:	2500      	movs	r5, #0
 80064a8:	42a5      	cmp	r5, r4
 80064aa:	d109      	bne.n	80064c0 <__libc_init_array+0x24>
 80064ac:	4e0b      	ldr	r6, [pc, #44]	; (80064dc <__libc_init_array+0x40>)
 80064ae:	4c0c      	ldr	r4, [pc, #48]	; (80064e0 <__libc_init_array+0x44>)
 80064b0:	f001 f878 	bl	80075a4 <_init>
 80064b4:	1ba4      	subs	r4, r4, r6
 80064b6:	10a4      	asrs	r4, r4, #2
 80064b8:	2500      	movs	r5, #0
 80064ba:	42a5      	cmp	r5, r4
 80064bc:	d105      	bne.n	80064ca <__libc_init_array+0x2e>
 80064be:	bd70      	pop	{r4, r5, r6, pc}
 80064c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064c4:	4798      	blx	r3
 80064c6:	3501      	adds	r5, #1
 80064c8:	e7ee      	b.n	80064a8 <__libc_init_array+0xc>
 80064ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ce:	4798      	blx	r3
 80064d0:	3501      	adds	r5, #1
 80064d2:	e7f2      	b.n	80064ba <__libc_init_array+0x1e>
 80064d4:	080077c0 	.word	0x080077c0
 80064d8:	080077c0 	.word	0x080077c0
 80064dc:	080077c0 	.word	0x080077c0
 80064e0:	080077c4 	.word	0x080077c4

080064e4 <memset>:
 80064e4:	4402      	add	r2, r0
 80064e6:	4603      	mov	r3, r0
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d100      	bne.n	80064ee <memset+0xa>
 80064ec:	4770      	bx	lr
 80064ee:	f803 1b01 	strb.w	r1, [r3], #1
 80064f2:	e7f9      	b.n	80064e8 <memset+0x4>
 80064f4:	0000      	movs	r0, r0
	...

080064f8 <cos>:
 80064f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064fa:	ec51 0b10 	vmov	r0, r1, d0
 80064fe:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <cos+0x80>)
 8006500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006504:	4293      	cmp	r3, r2
 8006506:	dc06      	bgt.n	8006516 <cos+0x1e>
 8006508:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006570 <cos+0x78>
 800650c:	f000 fa74 	bl	80069f8 <__kernel_cos>
 8006510:	ec51 0b10 	vmov	r0, r1, d0
 8006514:	e007      	b.n	8006526 <cos+0x2e>
 8006516:	4a19      	ldr	r2, [pc, #100]	; (800657c <cos+0x84>)
 8006518:	4293      	cmp	r3, r2
 800651a:	dd09      	ble.n	8006530 <cos+0x38>
 800651c:	ee10 2a10 	vmov	r2, s0
 8006520:	460b      	mov	r3, r1
 8006522:	f7f9 fe55 	bl	80001d0 <__aeabi_dsub>
 8006526:	ec41 0b10 	vmov	d0, r0, r1
 800652a:	b005      	add	sp, #20
 800652c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006530:	4668      	mov	r0, sp
 8006532:	f000 f86d 	bl	8006610 <__ieee754_rem_pio2>
 8006536:	f000 0003 	and.w	r0, r0, #3
 800653a:	2801      	cmp	r0, #1
 800653c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006540:	ed9d 0b00 	vldr	d0, [sp]
 8006544:	d007      	beq.n	8006556 <cos+0x5e>
 8006546:	2802      	cmp	r0, #2
 8006548:	d00e      	beq.n	8006568 <cos+0x70>
 800654a:	2800      	cmp	r0, #0
 800654c:	d0de      	beq.n	800650c <cos+0x14>
 800654e:	2001      	movs	r0, #1
 8006550:	f000 fe5a 	bl	8007208 <__kernel_sin>
 8006554:	e7dc      	b.n	8006510 <cos+0x18>
 8006556:	f000 fe57 	bl	8007208 <__kernel_sin>
 800655a:	ec53 2b10 	vmov	r2, r3, d0
 800655e:	ee10 0a10 	vmov	r0, s0
 8006562:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006566:	e7de      	b.n	8006526 <cos+0x2e>
 8006568:	f000 fa46 	bl	80069f8 <__kernel_cos>
 800656c:	e7f5      	b.n	800655a <cos+0x62>
 800656e:	bf00      	nop
	...
 8006578:	3fe921fb 	.word	0x3fe921fb
 800657c:	7fefffff 	.word	0x7fefffff

08006580 <sin>:
 8006580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006582:	ec51 0b10 	vmov	r0, r1, d0
 8006586:	4a20      	ldr	r2, [pc, #128]	; (8006608 <sin+0x88>)
 8006588:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800658c:	4293      	cmp	r3, r2
 800658e:	dc07      	bgt.n	80065a0 <sin+0x20>
 8006590:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006600 <sin+0x80>
 8006594:	2000      	movs	r0, #0
 8006596:	f000 fe37 	bl	8007208 <__kernel_sin>
 800659a:	ec51 0b10 	vmov	r0, r1, d0
 800659e:	e007      	b.n	80065b0 <sin+0x30>
 80065a0:	4a1a      	ldr	r2, [pc, #104]	; (800660c <sin+0x8c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	dd09      	ble.n	80065ba <sin+0x3a>
 80065a6:	ee10 2a10 	vmov	r2, s0
 80065aa:	460b      	mov	r3, r1
 80065ac:	f7f9 fe10 	bl	80001d0 <__aeabi_dsub>
 80065b0:	ec41 0b10 	vmov	d0, r0, r1
 80065b4:	b005      	add	sp, #20
 80065b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80065ba:	4668      	mov	r0, sp
 80065bc:	f000 f828 	bl	8006610 <__ieee754_rem_pio2>
 80065c0:	f000 0003 	and.w	r0, r0, #3
 80065c4:	2801      	cmp	r0, #1
 80065c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065ca:	ed9d 0b00 	vldr	d0, [sp]
 80065ce:	d004      	beq.n	80065da <sin+0x5a>
 80065d0:	2802      	cmp	r0, #2
 80065d2:	d005      	beq.n	80065e0 <sin+0x60>
 80065d4:	b970      	cbnz	r0, 80065f4 <sin+0x74>
 80065d6:	2001      	movs	r0, #1
 80065d8:	e7dd      	b.n	8006596 <sin+0x16>
 80065da:	f000 fa0d 	bl	80069f8 <__kernel_cos>
 80065de:	e7dc      	b.n	800659a <sin+0x1a>
 80065e0:	2001      	movs	r0, #1
 80065e2:	f000 fe11 	bl	8007208 <__kernel_sin>
 80065e6:	ec53 2b10 	vmov	r2, r3, d0
 80065ea:	ee10 0a10 	vmov	r0, s0
 80065ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80065f2:	e7dd      	b.n	80065b0 <sin+0x30>
 80065f4:	f000 fa00 	bl	80069f8 <__kernel_cos>
 80065f8:	e7f5      	b.n	80065e6 <sin+0x66>
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w
	...
 8006608:	3fe921fb 	.word	0x3fe921fb
 800660c:	7fefffff 	.word	0x7fefffff

08006610 <__ieee754_rem_pio2>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	ec57 6b10 	vmov	r6, r7, d0
 8006618:	4bc3      	ldr	r3, [pc, #780]	; (8006928 <__ieee754_rem_pio2+0x318>)
 800661a:	b08d      	sub	sp, #52	; 0x34
 800661c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006620:	4598      	cmp	r8, r3
 8006622:	4604      	mov	r4, r0
 8006624:	9704      	str	r7, [sp, #16]
 8006626:	dc07      	bgt.n	8006638 <__ieee754_rem_pio2+0x28>
 8006628:	2200      	movs	r2, #0
 800662a:	2300      	movs	r3, #0
 800662c:	ed84 0b00 	vstr	d0, [r4]
 8006630:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006634:	2500      	movs	r5, #0
 8006636:	e027      	b.n	8006688 <__ieee754_rem_pio2+0x78>
 8006638:	4bbc      	ldr	r3, [pc, #752]	; (800692c <__ieee754_rem_pio2+0x31c>)
 800663a:	4598      	cmp	r8, r3
 800663c:	dc75      	bgt.n	800672a <__ieee754_rem_pio2+0x11a>
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	4dbb      	ldr	r5, [pc, #748]	; (8006930 <__ieee754_rem_pio2+0x320>)
 8006642:	2b00      	cmp	r3, #0
 8006644:	ee10 0a10 	vmov	r0, s0
 8006648:	a3a9      	add	r3, pc, #676	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e0>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	4639      	mov	r1, r7
 8006650:	dd36      	ble.n	80066c0 <__ieee754_rem_pio2+0xb0>
 8006652:	f7f9 fdbd 	bl	80001d0 <__aeabi_dsub>
 8006656:	45a8      	cmp	r8, r5
 8006658:	4606      	mov	r6, r0
 800665a:	460f      	mov	r7, r1
 800665c:	d018      	beq.n	8006690 <__ieee754_rem_pio2+0x80>
 800665e:	a3a6      	add	r3, pc, #664	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2e8>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f7f9 fdb4 	bl	80001d0 <__aeabi_dsub>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e9c4 2300 	strd	r2, r3, [r4]
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7f9 fdac 	bl	80001d0 <__aeabi_dsub>
 8006678:	a39f      	add	r3, pc, #636	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2e8>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 fda7 	bl	80001d0 <__aeabi_dsub>
 8006682:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006686:	2501      	movs	r5, #1
 8006688:	4628      	mov	r0, r5
 800668a:	b00d      	add	sp, #52	; 0x34
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	a39b      	add	r3, pc, #620	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f0>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 fd9b 	bl	80001d0 <__aeabi_dsub>
 800669a:	a39b      	add	r3, pc, #620	; (adr r3, 8006908 <__ieee754_rem_pio2+0x2f8>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	4606      	mov	r6, r0
 80066a2:	460f      	mov	r7, r1
 80066a4:	f7f9 fd94 	bl	80001d0 <__aeabi_dsub>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	e9c4 2300 	strd	r2, r3, [r4]
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7f9 fd8c 	bl	80001d0 <__aeabi_dsub>
 80066b8:	a393      	add	r3, pc, #588	; (adr r3, 8006908 <__ieee754_rem_pio2+0x2f8>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	e7de      	b.n	800667e <__ieee754_rem_pio2+0x6e>
 80066c0:	f7f9 fd88 	bl	80001d4 <__adddf3>
 80066c4:	45a8      	cmp	r8, r5
 80066c6:	4606      	mov	r6, r0
 80066c8:	460f      	mov	r7, r1
 80066ca:	d016      	beq.n	80066fa <__ieee754_rem_pio2+0xea>
 80066cc:	a38a      	add	r3, pc, #552	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2e8>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f7f9 fd7f 	bl	80001d4 <__adddf3>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	e9c4 2300 	strd	r2, r3, [r4]
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 fd75 	bl	80001d0 <__aeabi_dsub>
 80066e6:	a384      	add	r3, pc, #528	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2e8>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7f9 fd72 	bl	80001d4 <__adddf3>
 80066f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80066f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066f8:	e7c6      	b.n	8006688 <__ieee754_rem_pio2+0x78>
 80066fa:	a381      	add	r3, pc, #516	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f0>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f7f9 fd68 	bl	80001d4 <__adddf3>
 8006704:	a380      	add	r3, pc, #512	; (adr r3, 8006908 <__ieee754_rem_pio2+0x2f8>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	f7f9 fd61 	bl	80001d4 <__adddf3>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	e9c4 2300 	strd	r2, r3, [r4]
 800671a:	4630      	mov	r0, r6
 800671c:	4639      	mov	r1, r7
 800671e:	f7f9 fd57 	bl	80001d0 <__aeabi_dsub>
 8006722:	a379      	add	r3, pc, #484	; (adr r3, 8006908 <__ieee754_rem_pio2+0x2f8>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	e7e0      	b.n	80066ec <__ieee754_rem_pio2+0xdc>
 800672a:	4b82      	ldr	r3, [pc, #520]	; (8006934 <__ieee754_rem_pio2+0x324>)
 800672c:	4598      	cmp	r8, r3
 800672e:	f300 80d0 	bgt.w	80068d2 <__ieee754_rem_pio2+0x2c2>
 8006732:	f000 fe23 	bl	800737c <fabs>
 8006736:	ec57 6b10 	vmov	r6, r7, d0
 800673a:	ee10 0a10 	vmov	r0, s0
 800673e:	a374      	add	r3, pc, #464	; (adr r3, 8006910 <__ieee754_rem_pio2+0x300>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	4639      	mov	r1, r7
 8006746:	f7f9 fefb 	bl	8000540 <__aeabi_dmul>
 800674a:	2200      	movs	r2, #0
 800674c:	4b7a      	ldr	r3, [pc, #488]	; (8006938 <__ieee754_rem_pio2+0x328>)
 800674e:	f7f9 fd41 	bl	80001d4 <__adddf3>
 8006752:	f7fa f98f 	bl	8000a74 <__aeabi_d2iz>
 8006756:	4605      	mov	r5, r0
 8006758:	f7f9 fe88 	bl	800046c <__aeabi_i2d>
 800675c:	a364      	add	r3, pc, #400	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e0>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006766:	f7f9 feeb 	bl	8000540 <__aeabi_dmul>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4630      	mov	r0, r6
 8006770:	4639      	mov	r1, r7
 8006772:	f7f9 fd2d 	bl	80001d0 <__aeabi_dsub>
 8006776:	a360      	add	r3, pc, #384	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2e8>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	4682      	mov	sl, r0
 800677e:	468b      	mov	fp, r1
 8006780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006784:	f7f9 fedc 	bl	8000540 <__aeabi_dmul>
 8006788:	2d1f      	cmp	r5, #31
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	dc0c      	bgt.n	80067aa <__ieee754_rem_pio2+0x19a>
 8006790:	1e6a      	subs	r2, r5, #1
 8006792:	4b6a      	ldr	r3, [pc, #424]	; (800693c <__ieee754_rem_pio2+0x32c>)
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	4543      	cmp	r3, r8
 800679a:	d006      	beq.n	80067aa <__ieee754_rem_pio2+0x19a>
 800679c:	4632      	mov	r2, r6
 800679e:	463b      	mov	r3, r7
 80067a0:	4650      	mov	r0, sl
 80067a2:	4659      	mov	r1, fp
 80067a4:	f7f9 fd14 	bl	80001d0 <__aeabi_dsub>
 80067a8:	e00e      	b.n	80067c8 <__ieee754_rem_pio2+0x1b8>
 80067aa:	4632      	mov	r2, r6
 80067ac:	463b      	mov	r3, r7
 80067ae:	4650      	mov	r0, sl
 80067b0:	4659      	mov	r1, fp
 80067b2:	f7f9 fd0d 	bl	80001d0 <__aeabi_dsub>
 80067b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	9a05      	ldr	r2, [sp, #20]
 80067be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	dc02      	bgt.n	80067ce <__ieee754_rem_pio2+0x1be>
 80067c8:	e9c4 0100 	strd	r0, r1, [r4]
 80067cc:	e039      	b.n	8006842 <__ieee754_rem_pio2+0x232>
 80067ce:	a34c      	add	r3, pc, #304	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f0>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d8:	f7f9 feb2 	bl	8000540 <__aeabi_dmul>
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4650      	mov	r0, sl
 80067e6:	4659      	mov	r1, fp
 80067e8:	f7f9 fcf2 	bl	80001d0 <__aeabi_dsub>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4680      	mov	r8, r0
 80067f2:	4689      	mov	r9, r1
 80067f4:	4650      	mov	r0, sl
 80067f6:	4659      	mov	r1, fp
 80067f8:	f7f9 fcea 	bl	80001d0 <__aeabi_dsub>
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	f7f9 fce6 	bl	80001d0 <__aeabi_dsub>
 8006804:	a340      	add	r3, pc, #256	; (adr r3, 8006908 <__ieee754_rem_pio2+0x2f8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006812:	f7f9 fe95 	bl	8000540 <__aeabi_dmul>
 8006816:	4632      	mov	r2, r6
 8006818:	463b      	mov	r3, r7
 800681a:	f7f9 fcd9 	bl	80001d0 <__aeabi_dsub>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4606      	mov	r6, r0
 8006824:	460f      	mov	r7, r1
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f7f9 fcd1 	bl	80001d0 <__aeabi_dsub>
 800682e:	9a05      	ldr	r2, [sp, #20]
 8006830:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b31      	cmp	r3, #49	; 0x31
 8006838:	dc20      	bgt.n	800687c <__ieee754_rem_pio2+0x26c>
 800683a:	e9c4 0100 	strd	r0, r1, [r4]
 800683e:	46c2      	mov	sl, r8
 8006840:	46cb      	mov	fp, r9
 8006842:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006846:	4650      	mov	r0, sl
 8006848:	4642      	mov	r2, r8
 800684a:	464b      	mov	r3, r9
 800684c:	4659      	mov	r1, fp
 800684e:	f7f9 fcbf 	bl	80001d0 <__aeabi_dsub>
 8006852:	463b      	mov	r3, r7
 8006854:	4632      	mov	r2, r6
 8006856:	f7f9 fcbb 	bl	80001d0 <__aeabi_dsub>
 800685a:	9b04      	ldr	r3, [sp, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006862:	f6bf af11 	bge.w	8006688 <__ieee754_rem_pio2+0x78>
 8006866:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	f8c4 8000 	str.w	r8, [r4]
 8006870:	60a0      	str	r0, [r4, #8]
 8006872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006876:	60e3      	str	r3, [r4, #12]
 8006878:	426d      	negs	r5, r5
 800687a:	e705      	b.n	8006688 <__ieee754_rem_pio2+0x78>
 800687c:	a326      	add	r3, pc, #152	; (adr r3, 8006918 <__ieee754_rem_pio2+0x308>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006886:	f7f9 fe5b 	bl	8000540 <__aeabi_dmul>
 800688a:	4606      	mov	r6, r0
 800688c:	460f      	mov	r7, r1
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7f9 fc9b 	bl	80001d0 <__aeabi_dsub>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4682      	mov	sl, r0
 80068a0:	468b      	mov	fp, r1
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7f9 fc93 	bl	80001d0 <__aeabi_dsub>
 80068aa:	4632      	mov	r2, r6
 80068ac:	463b      	mov	r3, r7
 80068ae:	f7f9 fc8f 	bl	80001d0 <__aeabi_dsub>
 80068b2:	a31b      	add	r3, pc, #108	; (adr r3, 8006920 <__ieee754_rem_pio2+0x310>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	4606      	mov	r6, r0
 80068ba:	460f      	mov	r7, r1
 80068bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c0:	f7f9 fe3e 	bl	8000540 <__aeabi_dmul>
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	f7f9 fc82 	bl	80001d0 <__aeabi_dsub>
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	e764      	b.n	800679c <__ieee754_rem_pio2+0x18c>
 80068d2:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <__ieee754_rem_pio2+0x330>)
 80068d4:	4598      	cmp	r8, r3
 80068d6:	dd35      	ble.n	8006944 <__ieee754_rem_pio2+0x334>
 80068d8:	ee10 2a10 	vmov	r2, s0
 80068dc:	463b      	mov	r3, r7
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 fc75 	bl	80001d0 <__aeabi_dsub>
 80068e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068ea:	e9c4 0100 	strd	r0, r1, [r4]
 80068ee:	e6a1      	b.n	8006634 <__ieee754_rem_pio2+0x24>
 80068f0:	54400000 	.word	0x54400000
 80068f4:	3ff921fb 	.word	0x3ff921fb
 80068f8:	1a626331 	.word	0x1a626331
 80068fc:	3dd0b461 	.word	0x3dd0b461
 8006900:	1a600000 	.word	0x1a600000
 8006904:	3dd0b461 	.word	0x3dd0b461
 8006908:	2e037073 	.word	0x2e037073
 800690c:	3ba3198a 	.word	0x3ba3198a
 8006910:	6dc9c883 	.word	0x6dc9c883
 8006914:	3fe45f30 	.word	0x3fe45f30
 8006918:	2e000000 	.word	0x2e000000
 800691c:	3ba3198a 	.word	0x3ba3198a
 8006920:	252049c1 	.word	0x252049c1
 8006924:	397b839a 	.word	0x397b839a
 8006928:	3fe921fb 	.word	0x3fe921fb
 800692c:	4002d97b 	.word	0x4002d97b
 8006930:	3ff921fb 	.word	0x3ff921fb
 8006934:	413921fb 	.word	0x413921fb
 8006938:	3fe00000 	.word	0x3fe00000
 800693c:	080075e0 	.word	0x080075e0
 8006940:	7fefffff 	.word	0x7fefffff
 8006944:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006948:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800694c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006950:	4630      	mov	r0, r6
 8006952:	460f      	mov	r7, r1
 8006954:	f7fa f88e 	bl	8000a74 <__aeabi_d2iz>
 8006958:	f7f9 fd88 	bl	800046c <__aeabi_i2d>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4630      	mov	r0, r6
 8006962:	4639      	mov	r1, r7
 8006964:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006968:	f7f9 fc32 	bl	80001d0 <__aeabi_dsub>
 800696c:	2200      	movs	r2, #0
 800696e:	4b1f      	ldr	r3, [pc, #124]	; (80069ec <__ieee754_rem_pio2+0x3dc>)
 8006970:	f7f9 fde6 	bl	8000540 <__aeabi_dmul>
 8006974:	460f      	mov	r7, r1
 8006976:	4606      	mov	r6, r0
 8006978:	f7fa f87c 	bl	8000a74 <__aeabi_d2iz>
 800697c:	f7f9 fd76 	bl	800046c <__aeabi_i2d>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800698c:	f7f9 fc20 	bl	80001d0 <__aeabi_dsub>
 8006990:	2200      	movs	r2, #0
 8006992:	4b16      	ldr	r3, [pc, #88]	; (80069ec <__ieee754_rem_pio2+0x3dc>)
 8006994:	f7f9 fdd4 	bl	8000540 <__aeabi_dmul>
 8006998:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800699c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80069a0:	f04f 0803 	mov.w	r8, #3
 80069a4:	2600      	movs	r6, #0
 80069a6:	2700      	movs	r7, #0
 80069a8:	4632      	mov	r2, r6
 80069aa:	463b      	mov	r3, r7
 80069ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80069b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80069b4:	f7fa f82c 	bl	8000a10 <__aeabi_dcmpeq>
 80069b8:	b9b0      	cbnz	r0, 80069e8 <__ieee754_rem_pio2+0x3d8>
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <__ieee754_rem_pio2+0x3e0>)
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	2302      	movs	r3, #2
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	462a      	mov	r2, r5
 80069c4:	4643      	mov	r3, r8
 80069c6:	4621      	mov	r1, r4
 80069c8:	a806      	add	r0, sp, #24
 80069ca:	f000 f8dd 	bl	8006b88 <__kernel_rem_pio2>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	4605      	mov	r5, r0
 80069d4:	f6bf ae58 	bge.w	8006688 <__ieee754_rem_pio2+0x78>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069de:	6063      	str	r3, [r4, #4]
 80069e0:	68e3      	ldr	r3, [r4, #12]
 80069e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069e6:	e746      	b.n	8006876 <__ieee754_rem_pio2+0x266>
 80069e8:	46d0      	mov	r8, sl
 80069ea:	e7dd      	b.n	80069a8 <__ieee754_rem_pio2+0x398>
 80069ec:	41700000 	.word	0x41700000
 80069f0:	08007660 	.word	0x08007660
 80069f4:	00000000 	.word	0x00000000

080069f8 <__kernel_cos>:
 80069f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	ec59 8b10 	vmov	r8, r9, d0
 8006a00:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006a04:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006a08:	ed2d 8b02 	vpush	{d8}
 8006a0c:	eeb0 8a41 	vmov.f32	s16, s2
 8006a10:	eef0 8a61 	vmov.f32	s17, s3
 8006a14:	da07      	bge.n	8006a26 <__kernel_cos+0x2e>
 8006a16:	ee10 0a10 	vmov	r0, s0
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7fa f82a 	bl	8000a74 <__aeabi_d2iz>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f000 8089 	beq.w	8006b38 <__kernel_cos+0x140>
 8006a26:	4642      	mov	r2, r8
 8006a28:	464b      	mov	r3, r9
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fd87 	bl	8000540 <__aeabi_dmul>
 8006a32:	2200      	movs	r2, #0
 8006a34:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <__kernel_cos+0x178>)
 8006a36:	4604      	mov	r4, r0
 8006a38:	460d      	mov	r5, r1
 8006a3a:	f7f9 fd81 	bl	8000540 <__aeabi_dmul>
 8006a3e:	a340      	add	r3, pc, #256	; (adr r3, 8006b40 <__kernel_cos+0x148>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	4682      	mov	sl, r0
 8006a46:	468b      	mov	fp, r1
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7f9 fd78 	bl	8000540 <__aeabi_dmul>
 8006a50:	a33d      	add	r3, pc, #244	; (adr r3, 8006b48 <__kernel_cos+0x150>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fbbd 	bl	80001d4 <__adddf3>
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	462b      	mov	r3, r5
 8006a5e:	f7f9 fd6f 	bl	8000540 <__aeabi_dmul>
 8006a62:	a33b      	add	r3, pc, #236	; (adr r3, 8006b50 <__kernel_cos+0x158>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 fbb2 	bl	80001d0 <__aeabi_dsub>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	f7f9 fd66 	bl	8000540 <__aeabi_dmul>
 8006a74:	a338      	add	r3, pc, #224	; (adr r3, 8006b58 <__kernel_cos+0x160>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbab 	bl	80001d4 <__adddf3>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	f7f9 fd5d 	bl	8000540 <__aeabi_dmul>
 8006a86:	a336      	add	r3, pc, #216	; (adr r3, 8006b60 <__kernel_cos+0x168>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fba0 	bl	80001d0 <__aeabi_dsub>
 8006a90:	4622      	mov	r2, r4
 8006a92:	462b      	mov	r3, r5
 8006a94:	f7f9 fd54 	bl	8000540 <__aeabi_dmul>
 8006a98:	a333      	add	r3, pc, #204	; (adr r3, 8006b68 <__kernel_cos+0x170>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fb99 	bl	80001d4 <__adddf3>
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	f7f9 fd4b 	bl	8000540 <__aeabi_dmul>
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	f7f9 fd47 	bl	8000540 <__aeabi_dmul>
 8006ab2:	ec53 2b18 	vmov	r2, r3, d8
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	460d      	mov	r5, r1
 8006aba:	4640      	mov	r0, r8
 8006abc:	4649      	mov	r1, r9
 8006abe:	f7f9 fd3f 	bl	8000540 <__aeabi_dmul>
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7f9 fb81 	bl	80001d0 <__aeabi_dsub>
 8006ace:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <__kernel_cos+0x17c>)
 8006ad0:	429e      	cmp	r6, r3
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	4689      	mov	r9, r1
 8006ad6:	dc11      	bgt.n	8006afc <__kernel_cos+0x104>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4650      	mov	r0, sl
 8006ade:	4659      	mov	r1, fp
 8006ae0:	f7f9 fb76 	bl	80001d0 <__aeabi_dsub>
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4924      	ldr	r1, [pc, #144]	; (8006b78 <__kernel_cos+0x180>)
 8006ae8:	4602      	mov	r2, r0
 8006aea:	2000      	movs	r0, #0
 8006aec:	f7f9 fb70 	bl	80001d0 <__aeabi_dsub>
 8006af0:	ecbd 8b02 	vpop	{d8}
 8006af4:	ec41 0b10 	vmov	d0, r0, r1
 8006af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afc:	4b1f      	ldr	r3, [pc, #124]	; (8006b7c <__kernel_cos+0x184>)
 8006afe:	491e      	ldr	r1, [pc, #120]	; (8006b78 <__kernel_cos+0x180>)
 8006b00:	429e      	cmp	r6, r3
 8006b02:	bfcc      	ite	gt
 8006b04:	4d1e      	ldrgt	r5, [pc, #120]	; (8006b80 <__kernel_cos+0x188>)
 8006b06:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006b0a:	2400      	movs	r4, #0
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	462b      	mov	r3, r5
 8006b10:	2000      	movs	r0, #0
 8006b12:	f7f9 fb5d 	bl	80001d0 <__aeabi_dsub>
 8006b16:	4622      	mov	r2, r4
 8006b18:	4606      	mov	r6, r0
 8006b1a:	460f      	mov	r7, r1
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	4650      	mov	r0, sl
 8006b20:	4659      	mov	r1, fp
 8006b22:	f7f9 fb55 	bl	80001d0 <__aeabi_dsub>
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	f7f9 fb51 	bl	80001d0 <__aeabi_dsub>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	e7d9      	b.n	8006aec <__kernel_cos+0xf4>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	490f      	ldr	r1, [pc, #60]	; (8006b78 <__kernel_cos+0x180>)
 8006b3c:	e7d8      	b.n	8006af0 <__kernel_cos+0xf8>
 8006b3e:	bf00      	nop
 8006b40:	be8838d4 	.word	0xbe8838d4
 8006b44:	bda8fae9 	.word	0xbda8fae9
 8006b48:	bdb4b1c4 	.word	0xbdb4b1c4
 8006b4c:	3e21ee9e 	.word	0x3e21ee9e
 8006b50:	809c52ad 	.word	0x809c52ad
 8006b54:	3e927e4f 	.word	0x3e927e4f
 8006b58:	19cb1590 	.word	0x19cb1590
 8006b5c:	3efa01a0 	.word	0x3efa01a0
 8006b60:	16c15177 	.word	0x16c15177
 8006b64:	3f56c16c 	.word	0x3f56c16c
 8006b68:	5555554c 	.word	0x5555554c
 8006b6c:	3fa55555 	.word	0x3fa55555
 8006b70:	3fe00000 	.word	0x3fe00000
 8006b74:	3fd33332 	.word	0x3fd33332
 8006b78:	3ff00000 	.word	0x3ff00000
 8006b7c:	3fe90000 	.word	0x3fe90000
 8006b80:	3fd20000 	.word	0x3fd20000
 8006b84:	00000000 	.word	0x00000000

08006b88 <__kernel_rem_pio2>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	ed2d 8b02 	vpush	{d8}
 8006b90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006b94:	1ed4      	subs	r4, r2, #3
 8006b96:	9308      	str	r3, [sp, #32]
 8006b98:	9101      	str	r1, [sp, #4]
 8006b9a:	4bc5      	ldr	r3, [pc, #788]	; (8006eb0 <__kernel_rem_pio2+0x328>)
 8006b9c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006b9e:	9009      	str	r0, [sp, #36]	; 0x24
 8006ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	9b08      	ldr	r3, [sp, #32]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	9307      	str	r3, [sp, #28]
 8006bac:	2318      	movs	r3, #24
 8006bae:	fb94 f4f3 	sdiv	r4, r4, r3
 8006bb2:	f06f 0317 	mvn.w	r3, #23
 8006bb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006bba:	fb04 3303 	mla	r3, r4, r3, r3
 8006bbe:	eb03 0a02 	add.w	sl, r3, r2
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	9a07      	ldr	r2, [sp, #28]
 8006bc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006ea0 <__kernel_rem_pio2+0x318>
 8006bca:	eb03 0802 	add.w	r8, r3, r2
 8006bce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006bd0:	1aa7      	subs	r7, r4, r2
 8006bd2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006bd6:	ae22      	add	r6, sp, #136	; 0x88
 8006bd8:	2500      	movs	r5, #0
 8006bda:	4545      	cmp	r5, r8
 8006bdc:	dd13      	ble.n	8006c06 <__kernel_rem_pio2+0x7e>
 8006bde:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006ea0 <__kernel_rem_pio2+0x318>
 8006be2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006be6:	2600      	movs	r6, #0
 8006be8:	9b04      	ldr	r3, [sp, #16]
 8006bea:	429e      	cmp	r6, r3
 8006bec:	dc32      	bgt.n	8006c54 <__kernel_rem_pio2+0xcc>
 8006bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf0:	9302      	str	r3, [sp, #8]
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	199d      	adds	r5, r3, r6
 8006bf6:	ab22      	add	r3, sp, #136	; 0x88
 8006bf8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006bfc:	9306      	str	r3, [sp, #24]
 8006bfe:	ec59 8b18 	vmov	r8, r9, d8
 8006c02:	2700      	movs	r7, #0
 8006c04:	e01f      	b.n	8006c46 <__kernel_rem_pio2+0xbe>
 8006c06:	42ef      	cmn	r7, r5
 8006c08:	d407      	bmi.n	8006c1a <__kernel_rem_pio2+0x92>
 8006c0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c0e:	f7f9 fc2d 	bl	800046c <__aeabi_i2d>
 8006c12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c16:	3501      	adds	r5, #1
 8006c18:	e7df      	b.n	8006bda <__kernel_rem_pio2+0x52>
 8006c1a:	ec51 0b18 	vmov	r0, r1, d8
 8006c1e:	e7f8      	b.n	8006c12 <__kernel_rem_pio2+0x8a>
 8006c20:	9906      	ldr	r1, [sp, #24]
 8006c22:	9d02      	ldr	r5, [sp, #8]
 8006c24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006c28:	9106      	str	r1, [sp, #24]
 8006c2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006c2e:	9502      	str	r5, [sp, #8]
 8006c30:	f7f9 fc86 	bl	8000540 <__aeabi_dmul>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 faca 	bl	80001d4 <__adddf3>
 8006c40:	3701      	adds	r7, #1
 8006c42:	4680      	mov	r8, r0
 8006c44:	4689      	mov	r9, r1
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	429f      	cmp	r7, r3
 8006c4a:	dde9      	ble.n	8006c20 <__kernel_rem_pio2+0x98>
 8006c4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006c50:	3601      	adds	r6, #1
 8006c52:	e7c9      	b.n	8006be8 <__kernel_rem_pio2+0x60>
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	aa0e      	add	r2, sp, #56	; 0x38
 8006c58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006c60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006c64:	9c04      	ldr	r4, [sp, #16]
 8006c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c68:	ab9a      	add	r3, sp, #616	; 0x268
 8006c6a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006c6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006c76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006c7a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006c7e:	ab9a      	add	r3, sp, #616	; 0x268
 8006c80:	445b      	add	r3, fp
 8006c82:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006c86:	2500      	movs	r5, #0
 8006c88:	1b63      	subs	r3, r4, r5
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dc78      	bgt.n	8006d80 <__kernel_rem_pio2+0x1f8>
 8006c8e:	4650      	mov	r0, sl
 8006c90:	ec49 8b10 	vmov	d0, r8, r9
 8006c94:	f000 fc00 	bl	8007498 <scalbn>
 8006c98:	ec57 6b10 	vmov	r6, r7, d0
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006ca2:	ee10 0a10 	vmov	r0, s0
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	f7f9 fc4a 	bl	8000540 <__aeabi_dmul>
 8006cac:	ec41 0b10 	vmov	d0, r0, r1
 8006cb0:	f000 fb6e 	bl	8007390 <floor>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	ec51 0b10 	vmov	r0, r1, d0
 8006cba:	4b7e      	ldr	r3, [pc, #504]	; (8006eb4 <__kernel_rem_pio2+0x32c>)
 8006cbc:	f7f9 fc40 	bl	8000540 <__aeabi_dmul>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	f7f9 fa82 	bl	80001d0 <__aeabi_dsub>
 8006ccc:	460f      	mov	r7, r1
 8006cce:	4606      	mov	r6, r0
 8006cd0:	f7f9 fed0 	bl	8000a74 <__aeabi_d2iz>
 8006cd4:	9006      	str	r0, [sp, #24]
 8006cd6:	f7f9 fbc9 	bl	800046c <__aeabi_i2d>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4630      	mov	r0, r6
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	f7f9 fa75 	bl	80001d0 <__aeabi_dsub>
 8006ce6:	f1ba 0f00 	cmp.w	sl, #0
 8006cea:	4606      	mov	r6, r0
 8006cec:	460f      	mov	r7, r1
 8006cee:	dd6c      	ble.n	8006dca <__kernel_rem_pio2+0x242>
 8006cf0:	1e62      	subs	r2, r4, #1
 8006cf2:	ab0e      	add	r3, sp, #56	; 0x38
 8006cf4:	f1ca 0118 	rsb	r1, sl, #24
 8006cf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006cfc:	9d06      	ldr	r5, [sp, #24]
 8006cfe:	fa40 f301 	asr.w	r3, r0, r1
 8006d02:	441d      	add	r5, r3
 8006d04:	408b      	lsls	r3, r1
 8006d06:	1ac0      	subs	r0, r0, r3
 8006d08:	ab0e      	add	r3, sp, #56	; 0x38
 8006d0a:	9506      	str	r5, [sp, #24]
 8006d0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006d10:	f1ca 0317 	rsb	r3, sl, #23
 8006d14:	fa40 f303 	asr.w	r3, r0, r3
 8006d18:	9302      	str	r3, [sp, #8]
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dd62      	ble.n	8006de6 <__kernel_rem_pio2+0x25e>
 8006d20:	9b06      	ldr	r3, [sp, #24]
 8006d22:	2200      	movs	r2, #0
 8006d24:	3301      	adds	r3, #1
 8006d26:	9306      	str	r3, [sp, #24]
 8006d28:	4615      	mov	r5, r2
 8006d2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006d2e:	4294      	cmp	r4, r2
 8006d30:	f300 8095 	bgt.w	8006e5e <__kernel_rem_pio2+0x2d6>
 8006d34:	f1ba 0f00 	cmp.w	sl, #0
 8006d38:	dd07      	ble.n	8006d4a <__kernel_rem_pio2+0x1c2>
 8006d3a:	f1ba 0f01 	cmp.w	sl, #1
 8006d3e:	f000 80a2 	beq.w	8006e86 <__kernel_rem_pio2+0x2fe>
 8006d42:	f1ba 0f02 	cmp.w	sl, #2
 8006d46:	f000 80c1 	beq.w	8006ecc <__kernel_rem_pio2+0x344>
 8006d4a:	9b02      	ldr	r3, [sp, #8]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d14a      	bne.n	8006de6 <__kernel_rem_pio2+0x25e>
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	2000      	movs	r0, #0
 8006d56:	4958      	ldr	r1, [pc, #352]	; (8006eb8 <__kernel_rem_pio2+0x330>)
 8006d58:	f7f9 fa3a 	bl	80001d0 <__aeabi_dsub>
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	d040      	beq.n	8006de6 <__kernel_rem_pio2+0x25e>
 8006d64:	4650      	mov	r0, sl
 8006d66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006ea8 <__kernel_rem_pio2+0x320>
 8006d6a:	f000 fb95 	bl	8007498 <scalbn>
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	ec53 2b10 	vmov	r2, r3, d0
 8006d76:	f7f9 fa2b 	bl	80001d0 <__aeabi_dsub>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	e032      	b.n	8006de6 <__kernel_rem_pio2+0x25e>
 8006d80:	2200      	movs	r2, #0
 8006d82:	4b4e      	ldr	r3, [pc, #312]	; (8006ebc <__kernel_rem_pio2+0x334>)
 8006d84:	4640      	mov	r0, r8
 8006d86:	4649      	mov	r1, r9
 8006d88:	f7f9 fbda 	bl	8000540 <__aeabi_dmul>
 8006d8c:	f7f9 fe72 	bl	8000a74 <__aeabi_d2iz>
 8006d90:	f7f9 fb6c 	bl	800046c <__aeabi_i2d>
 8006d94:	2200      	movs	r2, #0
 8006d96:	4b4a      	ldr	r3, [pc, #296]	; (8006ec0 <__kernel_rem_pio2+0x338>)
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	f7f9 fbd0 	bl	8000540 <__aeabi_dmul>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fa12 	bl	80001d0 <__aeabi_dsub>
 8006dac:	f7f9 fe62 	bl	8000a74 <__aeabi_d2iz>
 8006db0:	ab0e      	add	r3, sp, #56	; 0x38
 8006db2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006db6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dbe:	f7f9 fa09 	bl	80001d4 <__adddf3>
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	4689      	mov	r9, r1
 8006dc8:	e75e      	b.n	8006c88 <__kernel_rem_pio2+0x100>
 8006dca:	d105      	bne.n	8006dd8 <__kernel_rem_pio2+0x250>
 8006dcc:	1e63      	subs	r3, r4, #1
 8006dce:	aa0e      	add	r2, sp, #56	; 0x38
 8006dd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006dd4:	15c3      	asrs	r3, r0, #23
 8006dd6:	e79f      	b.n	8006d18 <__kernel_rem_pio2+0x190>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4b3a      	ldr	r3, [pc, #232]	; (8006ec4 <__kernel_rem_pio2+0x33c>)
 8006ddc:	f7f9 fe36 	bl	8000a4c <__aeabi_dcmpge>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d139      	bne.n	8006e58 <__kernel_rem_pio2+0x2d0>
 8006de4:	9002      	str	r0, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	2300      	movs	r3, #0
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 fe0f 	bl	8000a10 <__aeabi_dcmpeq>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f000 80c7 	beq.w	8006f86 <__kernel_rem_pio2+0x3fe>
 8006df8:	1e65      	subs	r5, r4, #1
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	9904      	ldr	r1, [sp, #16]
 8006e00:	428b      	cmp	r3, r1
 8006e02:	da6a      	bge.n	8006eda <__kernel_rem_pio2+0x352>
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	f000 8088 	beq.w	8006f1a <__kernel_rem_pio2+0x392>
 8006e0a:	ab0e      	add	r3, sp, #56	; 0x38
 8006e0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006e10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80b4 	beq.w	8006f82 <__kernel_rem_pio2+0x3fa>
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006ea8 <__kernel_rem_pio2+0x320>
 8006e20:	f000 fb3a 	bl	8007498 <scalbn>
 8006e24:	00ec      	lsls	r4, r5, #3
 8006e26:	ab72      	add	r3, sp, #456	; 0x1c8
 8006e28:	191e      	adds	r6, r3, r4
 8006e2a:	ec59 8b10 	vmov	r8, r9, d0
 8006e2e:	f106 0a08 	add.w	sl, r6, #8
 8006e32:	462f      	mov	r7, r5
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f280 80df 	bge.w	8006ff8 <__kernel_rem_pio2+0x470>
 8006e3a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006ea0 <__kernel_rem_pio2+0x318>
 8006e3e:	f04f 0a00 	mov.w	sl, #0
 8006e42:	eba5 030a 	sub.w	r3, r5, sl
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f2c0 810a 	blt.w	8007060 <__kernel_rem_pio2+0x4d8>
 8006e4c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006ec8 <__kernel_rem_pio2+0x340>
 8006e50:	ec59 8b18 	vmov	r8, r9, d8
 8006e54:	2700      	movs	r7, #0
 8006e56:	e0f5      	b.n	8007044 <__kernel_rem_pio2+0x4bc>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	9302      	str	r3, [sp, #8]
 8006e5c:	e760      	b.n	8006d20 <__kernel_rem_pio2+0x198>
 8006e5e:	ab0e      	add	r3, sp, #56	; 0x38
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	b94d      	cbnz	r5, 8006e7a <__kernel_rem_pio2+0x2f2>
 8006e66:	b12b      	cbz	r3, 8006e74 <__kernel_rem_pio2+0x2ec>
 8006e68:	a80e      	add	r0, sp, #56	; 0x38
 8006e6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006e6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006e72:	2301      	movs	r3, #1
 8006e74:	3201      	adds	r2, #1
 8006e76:	461d      	mov	r5, r3
 8006e78:	e759      	b.n	8006d2e <__kernel_rem_pio2+0x1a6>
 8006e7a:	a80e      	add	r0, sp, #56	; 0x38
 8006e7c:	1acb      	subs	r3, r1, r3
 8006e7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006e82:	462b      	mov	r3, r5
 8006e84:	e7f6      	b.n	8006e74 <__kernel_rem_pio2+0x2ec>
 8006e86:	1e62      	subs	r2, r4, #1
 8006e88:	ab0e      	add	r3, sp, #56	; 0x38
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e92:	a90e      	add	r1, sp, #56	; 0x38
 8006e94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e98:	e757      	b.n	8006d4a <__kernel_rem_pio2+0x1c2>
 8006e9a:	bf00      	nop
 8006e9c:	f3af 8000 	nop.w
	...
 8006eac:	3ff00000 	.word	0x3ff00000
 8006eb0:	080077a8 	.word	0x080077a8
 8006eb4:	40200000 	.word	0x40200000
 8006eb8:	3ff00000 	.word	0x3ff00000
 8006ebc:	3e700000 	.word	0x3e700000
 8006ec0:	41700000 	.word	0x41700000
 8006ec4:	3fe00000 	.word	0x3fe00000
 8006ec8:	08007768 	.word	0x08007768
 8006ecc:	1e62      	subs	r2, r4, #1
 8006ece:	ab0e      	add	r3, sp, #56	; 0x38
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006ed8:	e7db      	b.n	8006e92 <__kernel_rem_pio2+0x30a>
 8006eda:	a90e      	add	r1, sp, #56	; 0x38
 8006edc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	e78b      	b.n	8006dfe <__kernel_rem_pio2+0x276>
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006eec:	2900      	cmp	r1, #0
 8006eee:	d0fa      	beq.n	8006ee6 <__kernel_rem_pio2+0x35e>
 8006ef0:	9a08      	ldr	r2, [sp, #32]
 8006ef2:	4422      	add	r2, r4
 8006ef4:	00d2      	lsls	r2, r2, #3
 8006ef6:	a922      	add	r1, sp, #136	; 0x88
 8006ef8:	18e3      	adds	r3, r4, r3
 8006efa:	9206      	str	r2, [sp, #24]
 8006efc:	440a      	add	r2, r1
 8006efe:	9302      	str	r3, [sp, #8]
 8006f00:	f10b 0108 	add.w	r1, fp, #8
 8006f04:	f102 0308 	add.w	r3, r2, #8
 8006f08:	1c66      	adds	r6, r4, #1
 8006f0a:	910a      	str	r1, [sp, #40]	; 0x28
 8006f0c:	2500      	movs	r5, #0
 8006f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	42b3      	cmp	r3, r6
 8006f14:	da04      	bge.n	8006f20 <__kernel_rem_pio2+0x398>
 8006f16:	461c      	mov	r4, r3
 8006f18:	e6a6      	b.n	8006c68 <__kernel_rem_pio2+0xe0>
 8006f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e7e3      	b.n	8006ee8 <__kernel_rem_pio2+0x360>
 8006f20:	9b06      	ldr	r3, [sp, #24]
 8006f22:	18ef      	adds	r7, r5, r3
 8006f24:	ab22      	add	r3, sp, #136	; 0x88
 8006f26:	441f      	add	r7, r3
 8006f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f2e:	f7f9 fa9d 	bl	800046c <__aeabi_i2d>
 8006f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f34:	461c      	mov	r4, r3
 8006f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f38:	e9c7 0100 	strd	r0, r1, [r7]
 8006f3c:	eb03 0b05 	add.w	fp, r3, r5
 8006f40:	2700      	movs	r7, #0
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	9b07      	ldr	r3, [sp, #28]
 8006f4c:	429f      	cmp	r7, r3
 8006f4e:	dd08      	ble.n	8006f62 <__kernel_rem_pio2+0x3da>
 8006f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f52:	aa72      	add	r2, sp, #456	; 0x1c8
 8006f54:	18eb      	adds	r3, r5, r3
 8006f56:	4413      	add	r3, r2
 8006f58:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	3508      	adds	r5, #8
 8006f60:	e7d6      	b.n	8006f10 <__kernel_rem_pio2+0x388>
 8006f62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006f66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006f6a:	f7f9 fae9 	bl	8000540 <__aeabi_dmul>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f92d 	bl	80001d4 <__adddf3>
 8006f7a:	3701      	adds	r7, #1
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4689      	mov	r9, r1
 8006f80:	e7e3      	b.n	8006f4a <__kernel_rem_pio2+0x3c2>
 8006f82:	3d01      	subs	r5, #1
 8006f84:	e741      	b.n	8006e0a <__kernel_rem_pio2+0x282>
 8006f86:	f1ca 0000 	rsb	r0, sl, #0
 8006f8a:	ec47 6b10 	vmov	d0, r6, r7
 8006f8e:	f000 fa83 	bl	8007498 <scalbn>
 8006f92:	ec57 6b10 	vmov	r6, r7, d0
 8006f96:	2200      	movs	r2, #0
 8006f98:	4b99      	ldr	r3, [pc, #612]	; (8007200 <__kernel_rem_pio2+0x678>)
 8006f9a:	ee10 0a10 	vmov	r0, s0
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 fd54 	bl	8000a4c <__aeabi_dcmpge>
 8006fa4:	b1f8      	cbz	r0, 8006fe6 <__kernel_rem_pio2+0x45e>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4b96      	ldr	r3, [pc, #600]	; (8007204 <__kernel_rem_pio2+0x67c>)
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 fac7 	bl	8000540 <__aeabi_dmul>
 8006fb2:	f7f9 fd5f 	bl	8000a74 <__aeabi_d2iz>
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	f7f9 fa58 	bl	800046c <__aeabi_i2d>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4b90      	ldr	r3, [pc, #576]	; (8007200 <__kernel_rem_pio2+0x678>)
 8006fc0:	f7f9 fabe 	bl	8000540 <__aeabi_dmul>
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7f9 f900 	bl	80001d0 <__aeabi_dsub>
 8006fd0:	f7f9 fd50 	bl	8000a74 <__aeabi_d2iz>
 8006fd4:	1c65      	adds	r5, r4, #1
 8006fd6:	ab0e      	add	r3, sp, #56	; 0x38
 8006fd8:	f10a 0a18 	add.w	sl, sl, #24
 8006fdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006fe0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006fe4:	e719      	b.n	8006e1a <__kernel_rem_pio2+0x292>
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	4639      	mov	r1, r7
 8006fea:	f7f9 fd43 	bl	8000a74 <__aeabi_d2iz>
 8006fee:	ab0e      	add	r3, sp, #56	; 0x38
 8006ff0:	4625      	mov	r5, r4
 8006ff2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ff6:	e710      	b.n	8006e1a <__kernel_rem_pio2+0x292>
 8006ff8:	ab0e      	add	r3, sp, #56	; 0x38
 8006ffa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006ffe:	f7f9 fa35 	bl	800046c <__aeabi_i2d>
 8007002:	4642      	mov	r2, r8
 8007004:	464b      	mov	r3, r9
 8007006:	f7f9 fa9b 	bl	8000540 <__aeabi_dmul>
 800700a:	2200      	movs	r2, #0
 800700c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007010:	4b7c      	ldr	r3, [pc, #496]	; (8007204 <__kernel_rem_pio2+0x67c>)
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 fa93 	bl	8000540 <__aeabi_dmul>
 800701a:	3f01      	subs	r7, #1
 800701c:	4680      	mov	r8, r0
 800701e:	4689      	mov	r9, r1
 8007020:	e708      	b.n	8006e34 <__kernel_rem_pio2+0x2ac>
 8007022:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800702e:	f7f9 fa87 	bl	8000540 <__aeabi_dmul>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 f8cb 	bl	80001d4 <__adddf3>
 800703e:	3701      	adds	r7, #1
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	429f      	cmp	r7, r3
 8007048:	dc01      	bgt.n	800704e <__kernel_rem_pio2+0x4c6>
 800704a:	45ba      	cmp	sl, r7
 800704c:	dae9      	bge.n	8007022 <__kernel_rem_pio2+0x49a>
 800704e:	ab4a      	add	r3, sp, #296	; 0x128
 8007050:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007054:	e9c3 8900 	strd	r8, r9, [r3]
 8007058:	f10a 0a01 	add.w	sl, sl, #1
 800705c:	3e08      	subs	r6, #8
 800705e:	e6f0      	b.n	8006e42 <__kernel_rem_pio2+0x2ba>
 8007060:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007062:	2b03      	cmp	r3, #3
 8007064:	d85b      	bhi.n	800711e <__kernel_rem_pio2+0x596>
 8007066:	e8df f003 	tbb	[pc, r3]
 800706a:	264a      	.short	0x264a
 800706c:	0226      	.short	0x0226
 800706e:	ab9a      	add	r3, sp, #616	; 0x268
 8007070:	441c      	add	r4, r3
 8007072:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007076:	46a2      	mov	sl, r4
 8007078:	46ab      	mov	fp, r5
 800707a:	f1bb 0f00 	cmp.w	fp, #0
 800707e:	dc6c      	bgt.n	800715a <__kernel_rem_pio2+0x5d2>
 8007080:	46a2      	mov	sl, r4
 8007082:	46ab      	mov	fp, r5
 8007084:	f1bb 0f01 	cmp.w	fp, #1
 8007088:	f300 8086 	bgt.w	8007198 <__kernel_rem_pio2+0x610>
 800708c:	2000      	movs	r0, #0
 800708e:	2100      	movs	r1, #0
 8007090:	2d01      	cmp	r5, #1
 8007092:	f300 80a0 	bgt.w	80071d6 <__kernel_rem_pio2+0x64e>
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800709c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 809e 	bne.w	80071e2 <__kernel_rem_pio2+0x65a>
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	e9c3 7800 	strd	r7, r8, [r3]
 80070ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80070b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80070b4:	e033      	b.n	800711e <__kernel_rem_pio2+0x596>
 80070b6:	3408      	adds	r4, #8
 80070b8:	ab4a      	add	r3, sp, #296	; 0x128
 80070ba:	441c      	add	r4, r3
 80070bc:	462e      	mov	r6, r5
 80070be:	2000      	movs	r0, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	da3a      	bge.n	800713c <__kernel_rem_pio2+0x5b4>
 80070c6:	9b02      	ldr	r3, [sp, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d03d      	beq.n	8007148 <__kernel_rem_pio2+0x5c0>
 80070cc:	4602      	mov	r2, r0
 80070ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070d2:	9c01      	ldr	r4, [sp, #4]
 80070d4:	e9c4 2300 	strd	r2, r3, [r4]
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80070e0:	f7f9 f876 	bl	80001d0 <__aeabi_dsub>
 80070e4:	ae4c      	add	r6, sp, #304	; 0x130
 80070e6:	2401      	movs	r4, #1
 80070e8:	42a5      	cmp	r5, r4
 80070ea:	da30      	bge.n	800714e <__kernel_rem_pio2+0x5c6>
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	b113      	cbz	r3, 80070f6 <__kernel_rem_pio2+0x56e>
 80070f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070f4:	4619      	mov	r1, r3
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80070fc:	e00f      	b.n	800711e <__kernel_rem_pio2+0x596>
 80070fe:	ab9a      	add	r3, sp, #616	; 0x268
 8007100:	441c      	add	r4, r3
 8007102:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007106:	2000      	movs	r0, #0
 8007108:	2100      	movs	r1, #0
 800710a:	2d00      	cmp	r5, #0
 800710c:	da10      	bge.n	8007130 <__kernel_rem_pio2+0x5a8>
 800710e:	9b02      	ldr	r3, [sp, #8]
 8007110:	b113      	cbz	r3, 8007118 <__kernel_rem_pio2+0x590>
 8007112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007116:	4619      	mov	r1, r3
 8007118:	9b01      	ldr	r3, [sp, #4]
 800711a:	e9c3 0100 	strd	r0, r1, [r3]
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	f003 0007 	and.w	r0, r3, #7
 8007124:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007128:	ecbd 8b02 	vpop	{d8}
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007134:	f7f9 f84e 	bl	80001d4 <__adddf3>
 8007138:	3d01      	subs	r5, #1
 800713a:	e7e6      	b.n	800710a <__kernel_rem_pio2+0x582>
 800713c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007140:	f7f9 f848 	bl	80001d4 <__adddf3>
 8007144:	3e01      	subs	r6, #1
 8007146:	e7bc      	b.n	80070c2 <__kernel_rem_pio2+0x53a>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	e7c1      	b.n	80070d2 <__kernel_rem_pio2+0x54a>
 800714e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007152:	f7f9 f83f 	bl	80001d4 <__adddf3>
 8007156:	3401      	adds	r4, #1
 8007158:	e7c6      	b.n	80070e8 <__kernel_rem_pio2+0x560>
 800715a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800715e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007162:	4640      	mov	r0, r8
 8007164:	ec53 2b17 	vmov	r2, r3, d7
 8007168:	4649      	mov	r1, r9
 800716a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800716e:	f7f9 f831 	bl	80001d4 <__adddf3>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4606      	mov	r6, r0
 8007178:	460f      	mov	r7, r1
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	f7f9 f827 	bl	80001d0 <__aeabi_dsub>
 8007182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007186:	f7f9 f825 	bl	80001d4 <__adddf3>
 800718a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800718e:	e9ca 0100 	strd	r0, r1, [sl]
 8007192:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007196:	e770      	b.n	800707a <__kernel_rem_pio2+0x4f2>
 8007198:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800719c:	ed3a 7b02 	vldmdb	sl!, {d7}
 80071a0:	4630      	mov	r0, r6
 80071a2:	ec53 2b17 	vmov	r2, r3, d7
 80071a6:	4639      	mov	r1, r7
 80071a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071ac:	f7f9 f812 	bl	80001d4 <__adddf3>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4680      	mov	r8, r0
 80071b6:	4689      	mov	r9, r1
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f9 f808 	bl	80001d0 <__aeabi_dsub>
 80071c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c4:	f7f9 f806 	bl	80001d4 <__adddf3>
 80071c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80071cc:	e9ca 0100 	strd	r0, r1, [sl]
 80071d0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80071d4:	e756      	b.n	8007084 <__kernel_rem_pio2+0x4fc>
 80071d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80071da:	f7f8 fffb 	bl	80001d4 <__adddf3>
 80071de:	3d01      	subs	r5, #1
 80071e0:	e756      	b.n	8007090 <__kernel_rem_pio2+0x508>
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	9a01      	ldr	r2, [sp, #4]
 80071e6:	601f      	str	r7, [r3, #0]
 80071e8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80071ec:	605c      	str	r4, [r3, #4]
 80071ee:	609d      	str	r5, [r3, #8]
 80071f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80071f4:	60d3      	str	r3, [r2, #12]
 80071f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071fa:	6110      	str	r0, [r2, #16]
 80071fc:	6153      	str	r3, [r2, #20]
 80071fe:	e78e      	b.n	800711e <__kernel_rem_pio2+0x596>
 8007200:	41700000 	.word	0x41700000
 8007204:	3e700000 	.word	0x3e700000

08007208 <__kernel_sin>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	ec55 4b10 	vmov	r4, r5, d0
 8007210:	b085      	sub	sp, #20
 8007212:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007216:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800721a:	ed8d 1b00 	vstr	d1, [sp]
 800721e:	9002      	str	r0, [sp, #8]
 8007220:	da06      	bge.n	8007230 <__kernel_sin+0x28>
 8007222:	ee10 0a10 	vmov	r0, s0
 8007226:	4629      	mov	r1, r5
 8007228:	f7f9 fc24 	bl	8000a74 <__aeabi_d2iz>
 800722c:	2800      	cmp	r0, #0
 800722e:	d051      	beq.n	80072d4 <__kernel_sin+0xcc>
 8007230:	4622      	mov	r2, r4
 8007232:	462b      	mov	r3, r5
 8007234:	4620      	mov	r0, r4
 8007236:	4629      	mov	r1, r5
 8007238:	f7f9 f982 	bl	8000540 <__aeabi_dmul>
 800723c:	4682      	mov	sl, r0
 800723e:	468b      	mov	fp, r1
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4620      	mov	r0, r4
 8007246:	4629      	mov	r1, r5
 8007248:	f7f9 f97a 	bl	8000540 <__aeabi_dmul>
 800724c:	a341      	add	r3, pc, #260	; (adr r3, 8007354 <__kernel_sin+0x14c>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	4680      	mov	r8, r0
 8007254:	4689      	mov	r9, r1
 8007256:	4650      	mov	r0, sl
 8007258:	4659      	mov	r1, fp
 800725a:	f7f9 f971 	bl	8000540 <__aeabi_dmul>
 800725e:	a33f      	add	r3, pc, #252	; (adr r3, 800735c <__kernel_sin+0x154>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f8 ffb4 	bl	80001d0 <__aeabi_dsub>
 8007268:	4652      	mov	r2, sl
 800726a:	465b      	mov	r3, fp
 800726c:	f7f9 f968 	bl	8000540 <__aeabi_dmul>
 8007270:	a33c      	add	r3, pc, #240	; (adr r3, 8007364 <__kernel_sin+0x15c>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f8 ffad 	bl	80001d4 <__adddf3>
 800727a:	4652      	mov	r2, sl
 800727c:	465b      	mov	r3, fp
 800727e:	f7f9 f95f 	bl	8000540 <__aeabi_dmul>
 8007282:	a33a      	add	r3, pc, #232	; (adr r3, 800736c <__kernel_sin+0x164>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f8 ffa2 	bl	80001d0 <__aeabi_dsub>
 800728c:	4652      	mov	r2, sl
 800728e:	465b      	mov	r3, fp
 8007290:	f7f9 f956 	bl	8000540 <__aeabi_dmul>
 8007294:	a337      	add	r3, pc, #220	; (adr r3, 8007374 <__kernel_sin+0x16c>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f8 ff9b 	bl	80001d4 <__adddf3>
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	4606      	mov	r6, r0
 80072a2:	460f      	mov	r7, r1
 80072a4:	b9db      	cbnz	r3, 80072de <__kernel_sin+0xd6>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4650      	mov	r0, sl
 80072ac:	4659      	mov	r1, fp
 80072ae:	f7f9 f947 	bl	8000540 <__aeabi_dmul>
 80072b2:	a325      	add	r3, pc, #148	; (adr r3, 8007348 <__kernel_sin+0x140>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f7f8 ff8a 	bl	80001d0 <__aeabi_dsub>
 80072bc:	4642      	mov	r2, r8
 80072be:	464b      	mov	r3, r9
 80072c0:	f7f9 f93e 	bl	8000540 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f8 ff82 	bl	80001d4 <__adddf3>
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	ec45 4b10 	vmov	d0, r4, r5
 80072d8:	b005      	add	sp, #20
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	2200      	movs	r2, #0
 80072e0:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <__kernel_sin+0x148>)
 80072e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e6:	f7f9 f92b 	bl	8000540 <__aeabi_dmul>
 80072ea:	4632      	mov	r2, r6
 80072ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072f0:	463b      	mov	r3, r7
 80072f2:	4640      	mov	r0, r8
 80072f4:	4649      	mov	r1, r9
 80072f6:	f7f9 f923 	bl	8000540 <__aeabi_dmul>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007302:	f7f8 ff65 	bl	80001d0 <__aeabi_dsub>
 8007306:	4652      	mov	r2, sl
 8007308:	465b      	mov	r3, fp
 800730a:	f7f9 f919 	bl	8000540 <__aeabi_dmul>
 800730e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007312:	f7f8 ff5d 	bl	80001d0 <__aeabi_dsub>
 8007316:	a30c      	add	r3, pc, #48	; (adr r3, 8007348 <__kernel_sin+0x140>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	4640      	mov	r0, r8
 8007322:	4649      	mov	r1, r9
 8007324:	f7f9 f90c 	bl	8000540 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f8 ff50 	bl	80001d4 <__adddf3>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4620      	mov	r0, r4
 800733a:	4629      	mov	r1, r5
 800733c:	f7f8 ff48 	bl	80001d0 <__aeabi_dsub>
 8007340:	e7c6      	b.n	80072d0 <__kernel_sin+0xc8>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
 8007348:	55555549 	.word	0x55555549
 800734c:	3fc55555 	.word	0x3fc55555
 8007350:	3fe00000 	.word	0x3fe00000
 8007354:	5acfd57c 	.word	0x5acfd57c
 8007358:	3de5d93a 	.word	0x3de5d93a
 800735c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007360:	3e5ae5e6 	.word	0x3e5ae5e6
 8007364:	57b1fe7d 	.word	0x57b1fe7d
 8007368:	3ec71de3 	.word	0x3ec71de3
 800736c:	19c161d5 	.word	0x19c161d5
 8007370:	3f2a01a0 	.word	0x3f2a01a0
 8007374:	1110f8a6 	.word	0x1110f8a6
 8007378:	3f811111 	.word	0x3f811111

0800737c <fabs>:
 800737c:	ec51 0b10 	vmov	r0, r1, d0
 8007380:	ee10 2a10 	vmov	r2, s0
 8007384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007388:	ec43 2b10 	vmov	d0, r2, r3
 800738c:	4770      	bx	lr
	...

08007390 <floor>:
 8007390:	ec51 0b10 	vmov	r0, r1, d0
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800739c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80073a0:	2e13      	cmp	r6, #19
 80073a2:	460c      	mov	r4, r1
 80073a4:	ee10 5a10 	vmov	r5, s0
 80073a8:	4680      	mov	r8, r0
 80073aa:	dc34      	bgt.n	8007416 <floor+0x86>
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	da16      	bge.n	80073de <floor+0x4e>
 80073b0:	a335      	add	r3, pc, #212	; (adr r3, 8007488 <floor+0xf8>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f8 ff0d 	bl	80001d4 <__adddf3>
 80073ba:	2200      	movs	r2, #0
 80073bc:	2300      	movs	r3, #0
 80073be:	f7f9 fb4f 	bl	8000a60 <__aeabi_dcmpgt>
 80073c2:	b148      	cbz	r0, 80073d8 <floor+0x48>
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	da59      	bge.n	800747c <floor+0xec>
 80073c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80073cc:	4a30      	ldr	r2, [pc, #192]	; (8007490 <floor+0x100>)
 80073ce:	432b      	orrs	r3, r5
 80073d0:	2500      	movs	r5, #0
 80073d2:	42ab      	cmp	r3, r5
 80073d4:	bf18      	it	ne
 80073d6:	4614      	movne	r4, r2
 80073d8:	4621      	mov	r1, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	e025      	b.n	800742a <floor+0x9a>
 80073de:	4f2d      	ldr	r7, [pc, #180]	; (8007494 <floor+0x104>)
 80073e0:	4137      	asrs	r7, r6
 80073e2:	ea01 0307 	and.w	r3, r1, r7
 80073e6:	4303      	orrs	r3, r0
 80073e8:	d01f      	beq.n	800742a <floor+0x9a>
 80073ea:	a327      	add	r3, pc, #156	; (adr r3, 8007488 <floor+0xf8>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 fef0 	bl	80001d4 <__adddf3>
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	f7f9 fb32 	bl	8000a60 <__aeabi_dcmpgt>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0eb      	beq.n	80073d8 <floor+0x48>
 8007400:	2c00      	cmp	r4, #0
 8007402:	bfbe      	ittt	lt
 8007404:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007408:	fa43 f606 	asrlt.w	r6, r3, r6
 800740c:	19a4      	addlt	r4, r4, r6
 800740e:	ea24 0407 	bic.w	r4, r4, r7
 8007412:	2500      	movs	r5, #0
 8007414:	e7e0      	b.n	80073d8 <floor+0x48>
 8007416:	2e33      	cmp	r6, #51	; 0x33
 8007418:	dd0b      	ble.n	8007432 <floor+0xa2>
 800741a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800741e:	d104      	bne.n	800742a <floor+0x9a>
 8007420:	ee10 2a10 	vmov	r2, s0
 8007424:	460b      	mov	r3, r1
 8007426:	f7f8 fed5 	bl	80001d4 <__adddf3>
 800742a:	ec41 0b10 	vmov	d0, r0, r1
 800742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007432:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800743a:	fa23 f707 	lsr.w	r7, r3, r7
 800743e:	4207      	tst	r7, r0
 8007440:	d0f3      	beq.n	800742a <floor+0x9a>
 8007442:	a311      	add	r3, pc, #68	; (adr r3, 8007488 <floor+0xf8>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f8 fec4 	bl	80001d4 <__adddf3>
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	f7f9 fb06 	bl	8000a60 <__aeabi_dcmpgt>
 8007454:	2800      	cmp	r0, #0
 8007456:	d0bf      	beq.n	80073d8 <floor+0x48>
 8007458:	2c00      	cmp	r4, #0
 800745a:	da02      	bge.n	8007462 <floor+0xd2>
 800745c:	2e14      	cmp	r6, #20
 800745e:	d103      	bne.n	8007468 <floor+0xd8>
 8007460:	3401      	adds	r4, #1
 8007462:	ea25 0507 	bic.w	r5, r5, r7
 8007466:	e7b7      	b.n	80073d8 <floor+0x48>
 8007468:	2301      	movs	r3, #1
 800746a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800746e:	fa03 f606 	lsl.w	r6, r3, r6
 8007472:	4435      	add	r5, r6
 8007474:	4545      	cmp	r5, r8
 8007476:	bf38      	it	cc
 8007478:	18e4      	addcc	r4, r4, r3
 800747a:	e7f2      	b.n	8007462 <floor+0xd2>
 800747c:	2500      	movs	r5, #0
 800747e:	462c      	mov	r4, r5
 8007480:	e7aa      	b.n	80073d8 <floor+0x48>
 8007482:	bf00      	nop
 8007484:	f3af 8000 	nop.w
 8007488:	8800759c 	.word	0x8800759c
 800748c:	7e37e43c 	.word	0x7e37e43c
 8007490:	bff00000 	.word	0xbff00000
 8007494:	000fffff 	.word	0x000fffff

08007498 <scalbn>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	ec55 4b10 	vmov	r4, r5, d0
 800749e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80074a2:	4606      	mov	r6, r0
 80074a4:	462b      	mov	r3, r5
 80074a6:	b9aa      	cbnz	r2, 80074d4 <scalbn+0x3c>
 80074a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80074ac:	4323      	orrs	r3, r4
 80074ae:	d03b      	beq.n	8007528 <scalbn+0x90>
 80074b0:	4b31      	ldr	r3, [pc, #196]	; (8007578 <scalbn+0xe0>)
 80074b2:	4629      	mov	r1, r5
 80074b4:	2200      	movs	r2, #0
 80074b6:	ee10 0a10 	vmov	r0, s0
 80074ba:	f7f9 f841 	bl	8000540 <__aeabi_dmul>
 80074be:	4b2f      	ldr	r3, [pc, #188]	; (800757c <scalbn+0xe4>)
 80074c0:	429e      	cmp	r6, r3
 80074c2:	4604      	mov	r4, r0
 80074c4:	460d      	mov	r5, r1
 80074c6:	da12      	bge.n	80074ee <scalbn+0x56>
 80074c8:	a327      	add	r3, pc, #156	; (adr r3, 8007568 <scalbn+0xd0>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f9 f837 	bl	8000540 <__aeabi_dmul>
 80074d2:	e009      	b.n	80074e8 <scalbn+0x50>
 80074d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80074d8:	428a      	cmp	r2, r1
 80074da:	d10c      	bne.n	80074f6 <scalbn+0x5e>
 80074dc:	ee10 2a10 	vmov	r2, s0
 80074e0:	4620      	mov	r0, r4
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7f8 fe76 	bl	80001d4 <__adddf3>
 80074e8:	4604      	mov	r4, r0
 80074ea:	460d      	mov	r5, r1
 80074ec:	e01c      	b.n	8007528 <scalbn+0x90>
 80074ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074f2:	460b      	mov	r3, r1
 80074f4:	3a36      	subs	r2, #54	; 0x36
 80074f6:	4432      	add	r2, r6
 80074f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074fc:	428a      	cmp	r2, r1
 80074fe:	dd0b      	ble.n	8007518 <scalbn+0x80>
 8007500:	ec45 4b11 	vmov	d1, r4, r5
 8007504:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007570 <scalbn+0xd8>
 8007508:	f000 f83c 	bl	8007584 <copysign>
 800750c:	a318      	add	r3, pc, #96	; (adr r3, 8007570 <scalbn+0xd8>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	ec51 0b10 	vmov	r0, r1, d0
 8007516:	e7da      	b.n	80074ce <scalbn+0x36>
 8007518:	2a00      	cmp	r2, #0
 800751a:	dd08      	ble.n	800752e <scalbn+0x96>
 800751c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007520:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007524:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007528:	ec45 4b10 	vmov	d0, r4, r5
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007532:	da0d      	bge.n	8007550 <scalbn+0xb8>
 8007534:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007538:	429e      	cmp	r6, r3
 800753a:	ec45 4b11 	vmov	d1, r4, r5
 800753e:	dce1      	bgt.n	8007504 <scalbn+0x6c>
 8007540:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007568 <scalbn+0xd0>
 8007544:	f000 f81e 	bl	8007584 <copysign>
 8007548:	a307      	add	r3, pc, #28	; (adr r3, 8007568 <scalbn+0xd0>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	e7e0      	b.n	8007512 <scalbn+0x7a>
 8007550:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007554:	3236      	adds	r2, #54	; 0x36
 8007556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800755a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800755e:	4620      	mov	r0, r4
 8007560:	4629      	mov	r1, r5
 8007562:	2200      	movs	r2, #0
 8007564:	4b06      	ldr	r3, [pc, #24]	; (8007580 <scalbn+0xe8>)
 8007566:	e7b2      	b.n	80074ce <scalbn+0x36>
 8007568:	c2f8f359 	.word	0xc2f8f359
 800756c:	01a56e1f 	.word	0x01a56e1f
 8007570:	8800759c 	.word	0x8800759c
 8007574:	7e37e43c 	.word	0x7e37e43c
 8007578:	43500000 	.word	0x43500000
 800757c:	ffff3cb0 	.word	0xffff3cb0
 8007580:	3c900000 	.word	0x3c900000

08007584 <copysign>:
 8007584:	ec51 0b10 	vmov	r0, r1, d0
 8007588:	ee11 0a90 	vmov	r0, s3
 800758c:	ee10 2a10 	vmov	r2, s0
 8007590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007594:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007598:	ea41 0300 	orr.w	r3, r1, r0
 800759c:	ec43 2b10 	vmov	d0, r2, r3
 80075a0:	4770      	bx	lr
	...

080075a4 <_init>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr

080075b0 <_fini>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr
